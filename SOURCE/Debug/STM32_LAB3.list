
STM32_LAB3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002d48  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002e54  08002e54  00012e54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002e78  08002e78  00020018  2**0
                  CONTENTS
  4 .ARM          00000000  08002e78  08002e78  00020018  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002e78  08002e78  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002e78  08002e78  00012e78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002e7c  08002e7c  00012e7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  08002e80  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000e8  20000018  08002e98  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000100  08002e98  00020100  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020041  2**0
                  CONTENTS, READONLY
 13 .debug_info   00008a29  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001e6f  00000000  00000000  00028aad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ae8  00000000  00000000  0002a920  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000082b  00000000  00000000  0002b408  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000173ce  00000000  00000000  0002bc33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000df43  00000000  00000000  00043001  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000826f0  00000000  00000000  00050f44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000029d4  00000000  00000000  000d3634  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  000d6008  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000018 	.word	0x20000018
 8000128:	00000000 	.word	0x00000000
 800012c:	08002e3c 	.word	0x08002e3c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000001c 	.word	0x2000001c
 8000148:	08002e3c 	.word	0x08002e3c

0800014c <update7SEGa>:
 *      Author: tuann
 */
#include "display.h"

 void update7SEGa ( int index )
  {
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
    switch ( index )
 8000154:	687b      	ldr	r3, [r7, #4]
 8000156:	2b00      	cmp	r3, #0
 8000158:	d003      	beq.n	8000162 <update7SEGa+0x16>
 800015a:	687b      	ldr	r3, [r7, #4]
 800015c:	2b01      	cmp	r3, #1
 800015e:	d00c      	beq.n	800017a <update7SEGa+0x2e>
        break ;
    case 1:
	    HAL_GPIO_WritePin(en0_GPIO_Port,en0_Pin, SET);
	    HAL_GPIO_WritePin(en1_GPIO_Port,en1_Pin, RESET);
        break ;
    default : break ;
 8000160:	e017      	b.n	8000192 <update7SEGa+0x46>
	    HAL_GPIO_WritePin(en0_GPIO_Port,en0_Pin, RESET);
 8000162:	2200      	movs	r2, #0
 8000164:	2180      	movs	r1, #128	; 0x80
 8000166:	480d      	ldr	r0, [pc, #52]	; (800019c <update7SEGa+0x50>)
 8000168:	f001 fe5d 	bl	8001e26 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(en1_GPIO_Port,en1_Pin, SET);
 800016c:	2201      	movs	r2, #1
 800016e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000172:	480a      	ldr	r0, [pc, #40]	; (800019c <update7SEGa+0x50>)
 8000174:	f001 fe57 	bl	8001e26 <HAL_GPIO_WritePin>
        break ;
 8000178:	e00b      	b.n	8000192 <update7SEGa+0x46>
	    HAL_GPIO_WritePin(en0_GPIO_Port,en0_Pin, SET);
 800017a:	2201      	movs	r2, #1
 800017c:	2180      	movs	r1, #128	; 0x80
 800017e:	4807      	ldr	r0, [pc, #28]	; (800019c <update7SEGa+0x50>)
 8000180:	f001 fe51 	bl	8001e26 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(en1_GPIO_Port,en1_Pin, RESET);
 8000184:	2200      	movs	r2, #0
 8000186:	f44f 7180 	mov.w	r1, #256	; 0x100
 800018a:	4804      	ldr	r0, [pc, #16]	; (800019c <update7SEGa+0x50>)
 800018c:	f001 fe4b 	bl	8001e26 <HAL_GPIO_WritePin>
        break ;
 8000190:	bf00      	nop
    }
  }
 8000192:	bf00      	nop
 8000194:	3708      	adds	r7, #8
 8000196:	46bd      	mov	sp, r7
 8000198:	bd80      	pop	{r7, pc}
 800019a:	bf00      	nop
 800019c:	40010800 	.word	0x40010800

080001a0 <display7SEGa>:

 void display7SEGa(int index)
  {
 80001a0:	b580      	push	{r7, lr}
 80001a2:	b082      	sub	sp, #8
 80001a4:	af00      	add	r7, sp, #0
 80001a6:	6078      	str	r0, [r7, #4]
  	switch (index)
 80001a8:	687b      	ldr	r3, [r7, #4]
 80001aa:	2b09      	cmp	r3, #9
 80001ac:	f200 8180 	bhi.w	80004b0 <display7SEGa+0x310>
 80001b0:	a201      	add	r2, pc, #4	; (adr r2, 80001b8 <display7SEGa+0x18>)
 80001b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80001b6:	bf00      	nop
 80001b8:	080001e1 	.word	0x080001e1
 80001bc:	08000229 	.word	0x08000229
 80001c0:	08000271 	.word	0x08000271
 80001c4:	080002b9 	.word	0x080002b9
 80001c8:	08000301 	.word	0x08000301
 80001cc:	08000349 	.word	0x08000349
 80001d0:	08000391 	.word	0x08000391
 80001d4:	080003d9 	.word	0x080003d9
 80001d8:	08000421 	.word	0x08000421
 80001dc:	08000469 	.word	0x08000469
  	{
  	case 0 :
  		HAL_GPIO_WritePin(chan1a_GPIO_Port,chan1a_Pin, RESET);
 80001e0:	2200      	movs	r2, #0
 80001e2:	2101      	movs	r1, #1
 80001e4:	48b5      	ldr	r0, [pc, #724]	; (80004bc <display7SEGa+0x31c>)
 80001e6:	f001 fe1e 	bl	8001e26 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(chan1b_GPIO_Port,chan1b_Pin, RESET);
 80001ea:	2200      	movs	r2, #0
 80001ec:	2102      	movs	r1, #2
 80001ee:	48b3      	ldr	r0, [pc, #716]	; (80004bc <display7SEGa+0x31c>)
 80001f0:	f001 fe19 	bl	8001e26 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(chan1c_GPIO_Port,chan1c_Pin, RESET);
 80001f4:	2200      	movs	r2, #0
 80001f6:	2104      	movs	r1, #4
 80001f8:	48b0      	ldr	r0, [pc, #704]	; (80004bc <display7SEGa+0x31c>)
 80001fa:	f001 fe14 	bl	8001e26 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(chan1d_GPIO_Port,chan1d_Pin, RESET);
 80001fe:	2200      	movs	r2, #0
 8000200:	2108      	movs	r1, #8
 8000202:	48ae      	ldr	r0, [pc, #696]	; (80004bc <display7SEGa+0x31c>)
 8000204:	f001 fe0f 	bl	8001e26 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(chan1e_GPIO_Port,chan1e_Pin, RESET);
 8000208:	2200      	movs	r2, #0
 800020a:	2110      	movs	r1, #16
 800020c:	48ab      	ldr	r0, [pc, #684]	; (80004bc <display7SEGa+0x31c>)
 800020e:	f001 fe0a 	bl	8001e26 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(chan1f_GPIO_Port,chan1f_Pin, RESET);
 8000212:	2200      	movs	r2, #0
 8000214:	2120      	movs	r1, #32
 8000216:	48a9      	ldr	r0, [pc, #676]	; (80004bc <display7SEGa+0x31c>)
 8000218:	f001 fe05 	bl	8001e26 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(chan1g_GPIO_Port,chan1g_Pin, SET);
 800021c:	2201      	movs	r2, #1
 800021e:	2140      	movs	r1, #64	; 0x40
 8000220:	48a6      	ldr	r0, [pc, #664]	; (80004bc <display7SEGa+0x31c>)
 8000222:	f001 fe00 	bl	8001e26 <HAL_GPIO_WritePin>
  	    break ;
 8000226:	e144      	b.n	80004b2 <display7SEGa+0x312>
  	case 1 :
  		HAL_GPIO_WritePin(chan1a_GPIO_Port,chan1a_Pin, SET);
 8000228:	2201      	movs	r2, #1
 800022a:	2101      	movs	r1, #1
 800022c:	48a3      	ldr	r0, [pc, #652]	; (80004bc <display7SEGa+0x31c>)
 800022e:	f001 fdfa 	bl	8001e26 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(chan1b_GPIO_Port,chan1b_Pin, RESET);
 8000232:	2200      	movs	r2, #0
 8000234:	2102      	movs	r1, #2
 8000236:	48a1      	ldr	r0, [pc, #644]	; (80004bc <display7SEGa+0x31c>)
 8000238:	f001 fdf5 	bl	8001e26 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(chan1c_GPIO_Port,chan1c_Pin, RESET);
 800023c:	2200      	movs	r2, #0
 800023e:	2104      	movs	r1, #4
 8000240:	489e      	ldr	r0, [pc, #632]	; (80004bc <display7SEGa+0x31c>)
 8000242:	f001 fdf0 	bl	8001e26 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(chan1d_GPIO_Port,chan1d_Pin, SET);
 8000246:	2201      	movs	r2, #1
 8000248:	2108      	movs	r1, #8
 800024a:	489c      	ldr	r0, [pc, #624]	; (80004bc <display7SEGa+0x31c>)
 800024c:	f001 fdeb 	bl	8001e26 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(chan1e_GPIO_Port,chan1e_Pin, SET);
 8000250:	2201      	movs	r2, #1
 8000252:	2110      	movs	r1, #16
 8000254:	4899      	ldr	r0, [pc, #612]	; (80004bc <display7SEGa+0x31c>)
 8000256:	f001 fde6 	bl	8001e26 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(chan1f_GPIO_Port,chan1f_Pin, SET);
 800025a:	2201      	movs	r2, #1
 800025c:	2120      	movs	r1, #32
 800025e:	4897      	ldr	r0, [pc, #604]	; (80004bc <display7SEGa+0x31c>)
 8000260:	f001 fde1 	bl	8001e26 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(chan1g_GPIO_Port,chan1g_Pin, SET);
 8000264:	2201      	movs	r2, #1
 8000266:	2140      	movs	r1, #64	; 0x40
 8000268:	4894      	ldr	r0, [pc, #592]	; (80004bc <display7SEGa+0x31c>)
 800026a:	f001 fddc 	bl	8001e26 <HAL_GPIO_WritePin>
  	    break;
 800026e:	e120      	b.n	80004b2 <display7SEGa+0x312>
  	case 2 :
  		HAL_GPIO_WritePin(chan1a_GPIO_Port,chan1a_Pin, RESET);
 8000270:	2200      	movs	r2, #0
 8000272:	2101      	movs	r1, #1
 8000274:	4891      	ldr	r0, [pc, #580]	; (80004bc <display7SEGa+0x31c>)
 8000276:	f001 fdd6 	bl	8001e26 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(chan1b_GPIO_Port,chan1b_Pin, RESET);
 800027a:	2200      	movs	r2, #0
 800027c:	2102      	movs	r1, #2
 800027e:	488f      	ldr	r0, [pc, #572]	; (80004bc <display7SEGa+0x31c>)
 8000280:	f001 fdd1 	bl	8001e26 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(chan1c_GPIO_Port,chan1c_Pin, SET);
 8000284:	2201      	movs	r2, #1
 8000286:	2104      	movs	r1, #4
 8000288:	488c      	ldr	r0, [pc, #560]	; (80004bc <display7SEGa+0x31c>)
 800028a:	f001 fdcc 	bl	8001e26 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(chan1d_GPIO_Port,chan1d_Pin, RESET);
 800028e:	2200      	movs	r2, #0
 8000290:	2108      	movs	r1, #8
 8000292:	488a      	ldr	r0, [pc, #552]	; (80004bc <display7SEGa+0x31c>)
 8000294:	f001 fdc7 	bl	8001e26 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(chan1e_GPIO_Port,chan1e_Pin, RESET);
 8000298:	2200      	movs	r2, #0
 800029a:	2110      	movs	r1, #16
 800029c:	4887      	ldr	r0, [pc, #540]	; (80004bc <display7SEGa+0x31c>)
 800029e:	f001 fdc2 	bl	8001e26 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(chan1f_GPIO_Port,chan1f_Pin, SET);
 80002a2:	2201      	movs	r2, #1
 80002a4:	2120      	movs	r1, #32
 80002a6:	4885      	ldr	r0, [pc, #532]	; (80004bc <display7SEGa+0x31c>)
 80002a8:	f001 fdbd 	bl	8001e26 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(chan1g_GPIO_Port,chan1g_Pin, RESET);
 80002ac:	2200      	movs	r2, #0
 80002ae:	2140      	movs	r1, #64	; 0x40
 80002b0:	4882      	ldr	r0, [pc, #520]	; (80004bc <display7SEGa+0x31c>)
 80002b2:	f001 fdb8 	bl	8001e26 <HAL_GPIO_WritePin>
  	    break ;
 80002b6:	e0fc      	b.n	80004b2 <display7SEGa+0x312>
  	case 3 :
  		HAL_GPIO_WritePin(chan1a_GPIO_Port,chan1a_Pin, RESET);
 80002b8:	2200      	movs	r2, #0
 80002ba:	2101      	movs	r1, #1
 80002bc:	487f      	ldr	r0, [pc, #508]	; (80004bc <display7SEGa+0x31c>)
 80002be:	f001 fdb2 	bl	8001e26 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(chan1b_GPIO_Port,chan1b_Pin, RESET);
 80002c2:	2200      	movs	r2, #0
 80002c4:	2102      	movs	r1, #2
 80002c6:	487d      	ldr	r0, [pc, #500]	; (80004bc <display7SEGa+0x31c>)
 80002c8:	f001 fdad 	bl	8001e26 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(chan1c_GPIO_Port,chan1c_Pin, RESET);
 80002cc:	2200      	movs	r2, #0
 80002ce:	2104      	movs	r1, #4
 80002d0:	487a      	ldr	r0, [pc, #488]	; (80004bc <display7SEGa+0x31c>)
 80002d2:	f001 fda8 	bl	8001e26 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(chan1d_GPIO_Port,chan1d_Pin, RESET);
 80002d6:	2200      	movs	r2, #0
 80002d8:	2108      	movs	r1, #8
 80002da:	4878      	ldr	r0, [pc, #480]	; (80004bc <display7SEGa+0x31c>)
 80002dc:	f001 fda3 	bl	8001e26 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(chan1e_GPIO_Port,chan1e_Pin, SET);
 80002e0:	2201      	movs	r2, #1
 80002e2:	2110      	movs	r1, #16
 80002e4:	4875      	ldr	r0, [pc, #468]	; (80004bc <display7SEGa+0x31c>)
 80002e6:	f001 fd9e 	bl	8001e26 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(chan1f_GPIO_Port,chan1f_Pin, SET);
 80002ea:	2201      	movs	r2, #1
 80002ec:	2120      	movs	r1, #32
 80002ee:	4873      	ldr	r0, [pc, #460]	; (80004bc <display7SEGa+0x31c>)
 80002f0:	f001 fd99 	bl	8001e26 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(chan1g_GPIO_Port,chan1g_Pin, RESET);
 80002f4:	2200      	movs	r2, #0
 80002f6:	2140      	movs	r1, #64	; 0x40
 80002f8:	4870      	ldr	r0, [pc, #448]	; (80004bc <display7SEGa+0x31c>)
 80002fa:	f001 fd94 	bl	8001e26 <HAL_GPIO_WritePin>
  	    break ;
 80002fe:	e0d8      	b.n	80004b2 <display7SEGa+0x312>
  	case 4 :
  		HAL_GPIO_WritePin(chan1a_GPIO_Port,chan1a_Pin, SET);
 8000300:	2201      	movs	r2, #1
 8000302:	2101      	movs	r1, #1
 8000304:	486d      	ldr	r0, [pc, #436]	; (80004bc <display7SEGa+0x31c>)
 8000306:	f001 fd8e 	bl	8001e26 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(chan1b_GPIO_Port,chan1b_Pin, RESET);
 800030a:	2200      	movs	r2, #0
 800030c:	2102      	movs	r1, #2
 800030e:	486b      	ldr	r0, [pc, #428]	; (80004bc <display7SEGa+0x31c>)
 8000310:	f001 fd89 	bl	8001e26 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(chan1c_GPIO_Port,chan1c_Pin, RESET);
 8000314:	2200      	movs	r2, #0
 8000316:	2104      	movs	r1, #4
 8000318:	4868      	ldr	r0, [pc, #416]	; (80004bc <display7SEGa+0x31c>)
 800031a:	f001 fd84 	bl	8001e26 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(chan1d_GPIO_Port,chan1d_Pin, SET);
 800031e:	2201      	movs	r2, #1
 8000320:	2108      	movs	r1, #8
 8000322:	4866      	ldr	r0, [pc, #408]	; (80004bc <display7SEGa+0x31c>)
 8000324:	f001 fd7f 	bl	8001e26 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(chan1e_GPIO_Port,chan1e_Pin, SET);
 8000328:	2201      	movs	r2, #1
 800032a:	2110      	movs	r1, #16
 800032c:	4863      	ldr	r0, [pc, #396]	; (80004bc <display7SEGa+0x31c>)
 800032e:	f001 fd7a 	bl	8001e26 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(chan1f_GPIO_Port,chan1f_Pin, RESET);
 8000332:	2200      	movs	r2, #0
 8000334:	2120      	movs	r1, #32
 8000336:	4861      	ldr	r0, [pc, #388]	; (80004bc <display7SEGa+0x31c>)
 8000338:	f001 fd75 	bl	8001e26 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(chan1g_GPIO_Port,chan1g_Pin, RESET);
 800033c:	2200      	movs	r2, #0
 800033e:	2140      	movs	r1, #64	; 0x40
 8000340:	485e      	ldr	r0, [pc, #376]	; (80004bc <display7SEGa+0x31c>)
 8000342:	f001 fd70 	bl	8001e26 <HAL_GPIO_WritePin>
  		break ;
 8000346:	e0b4      	b.n	80004b2 <display7SEGa+0x312>
  	case 5 :
  		HAL_GPIO_WritePin(chan1a_GPIO_Port,chan1a_Pin, RESET);
 8000348:	2200      	movs	r2, #0
 800034a:	2101      	movs	r1, #1
 800034c:	485b      	ldr	r0, [pc, #364]	; (80004bc <display7SEGa+0x31c>)
 800034e:	f001 fd6a 	bl	8001e26 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(chan1b_GPIO_Port,chan1b_Pin, SET);
 8000352:	2201      	movs	r2, #1
 8000354:	2102      	movs	r1, #2
 8000356:	4859      	ldr	r0, [pc, #356]	; (80004bc <display7SEGa+0x31c>)
 8000358:	f001 fd65 	bl	8001e26 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(chan1c_GPIO_Port,chan1c_Pin, RESET);
 800035c:	2200      	movs	r2, #0
 800035e:	2104      	movs	r1, #4
 8000360:	4856      	ldr	r0, [pc, #344]	; (80004bc <display7SEGa+0x31c>)
 8000362:	f001 fd60 	bl	8001e26 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(chan1d_GPIO_Port,chan1d_Pin, RESET);
 8000366:	2200      	movs	r2, #0
 8000368:	2108      	movs	r1, #8
 800036a:	4854      	ldr	r0, [pc, #336]	; (80004bc <display7SEGa+0x31c>)
 800036c:	f001 fd5b 	bl	8001e26 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(chan1e_GPIO_Port,chan1e_Pin, SET);
 8000370:	2201      	movs	r2, #1
 8000372:	2110      	movs	r1, #16
 8000374:	4851      	ldr	r0, [pc, #324]	; (80004bc <display7SEGa+0x31c>)
 8000376:	f001 fd56 	bl	8001e26 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(chan1f_GPIO_Port,chan1f_Pin, RESET);
 800037a:	2200      	movs	r2, #0
 800037c:	2120      	movs	r1, #32
 800037e:	484f      	ldr	r0, [pc, #316]	; (80004bc <display7SEGa+0x31c>)
 8000380:	f001 fd51 	bl	8001e26 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(chan1g_GPIO_Port,chan1g_Pin, RESET);
 8000384:	2200      	movs	r2, #0
 8000386:	2140      	movs	r1, #64	; 0x40
 8000388:	484c      	ldr	r0, [pc, #304]	; (80004bc <display7SEGa+0x31c>)
 800038a:	f001 fd4c 	bl	8001e26 <HAL_GPIO_WritePin>
  		break ;
 800038e:	e090      	b.n	80004b2 <display7SEGa+0x312>
  	case 6 :
  	  	HAL_GPIO_WritePin(chan1a_GPIO_Port,chan1a_Pin, RESET);
 8000390:	2200      	movs	r2, #0
 8000392:	2101      	movs	r1, #1
 8000394:	4849      	ldr	r0, [pc, #292]	; (80004bc <display7SEGa+0x31c>)
 8000396:	f001 fd46 	bl	8001e26 <HAL_GPIO_WritePin>
  	  	HAL_GPIO_WritePin(chan1b_GPIO_Port,chan1b_Pin, SET);
 800039a:	2201      	movs	r2, #1
 800039c:	2102      	movs	r1, #2
 800039e:	4847      	ldr	r0, [pc, #284]	; (80004bc <display7SEGa+0x31c>)
 80003a0:	f001 fd41 	bl	8001e26 <HAL_GPIO_WritePin>
  	  	HAL_GPIO_WritePin(chan1c_GPIO_Port,chan1c_Pin, RESET);
 80003a4:	2200      	movs	r2, #0
 80003a6:	2104      	movs	r1, #4
 80003a8:	4844      	ldr	r0, [pc, #272]	; (80004bc <display7SEGa+0x31c>)
 80003aa:	f001 fd3c 	bl	8001e26 <HAL_GPIO_WritePin>
  	  	HAL_GPIO_WritePin(chan1d_GPIO_Port,chan1d_Pin, RESET);
 80003ae:	2200      	movs	r2, #0
 80003b0:	2108      	movs	r1, #8
 80003b2:	4842      	ldr	r0, [pc, #264]	; (80004bc <display7SEGa+0x31c>)
 80003b4:	f001 fd37 	bl	8001e26 <HAL_GPIO_WritePin>
  	  	HAL_GPIO_WritePin(chan1e_GPIO_Port,chan1e_Pin, RESET);
 80003b8:	2200      	movs	r2, #0
 80003ba:	2110      	movs	r1, #16
 80003bc:	483f      	ldr	r0, [pc, #252]	; (80004bc <display7SEGa+0x31c>)
 80003be:	f001 fd32 	bl	8001e26 <HAL_GPIO_WritePin>
  	  	HAL_GPIO_WritePin(chan1f_GPIO_Port,chan1f_Pin, RESET);
 80003c2:	2200      	movs	r2, #0
 80003c4:	2120      	movs	r1, #32
 80003c6:	483d      	ldr	r0, [pc, #244]	; (80004bc <display7SEGa+0x31c>)
 80003c8:	f001 fd2d 	bl	8001e26 <HAL_GPIO_WritePin>
  	  	HAL_GPIO_WritePin(chan1g_GPIO_Port,chan1g_Pin, RESET);
 80003cc:	2200      	movs	r2, #0
 80003ce:	2140      	movs	r1, #64	; 0x40
 80003d0:	483a      	ldr	r0, [pc, #232]	; (80004bc <display7SEGa+0x31c>)
 80003d2:	f001 fd28 	bl	8001e26 <HAL_GPIO_WritePin>
  	  	break ;
 80003d6:	e06c      	b.n	80004b2 <display7SEGa+0x312>
  	case 7 :
  	  	HAL_GPIO_WritePin(chan1a_GPIO_Port,chan1a_Pin, RESET);
 80003d8:	2200      	movs	r2, #0
 80003da:	2101      	movs	r1, #1
 80003dc:	4837      	ldr	r0, [pc, #220]	; (80004bc <display7SEGa+0x31c>)
 80003de:	f001 fd22 	bl	8001e26 <HAL_GPIO_WritePin>
  	  	HAL_GPIO_WritePin(chan1b_GPIO_Port,chan1b_Pin, RESET);
 80003e2:	2200      	movs	r2, #0
 80003e4:	2102      	movs	r1, #2
 80003e6:	4835      	ldr	r0, [pc, #212]	; (80004bc <display7SEGa+0x31c>)
 80003e8:	f001 fd1d 	bl	8001e26 <HAL_GPIO_WritePin>
  	  	HAL_GPIO_WritePin(chan1c_GPIO_Port,chan1c_Pin, RESET);
 80003ec:	2200      	movs	r2, #0
 80003ee:	2104      	movs	r1, #4
 80003f0:	4832      	ldr	r0, [pc, #200]	; (80004bc <display7SEGa+0x31c>)
 80003f2:	f001 fd18 	bl	8001e26 <HAL_GPIO_WritePin>
  	  	HAL_GPIO_WritePin(chan1d_GPIO_Port,chan1d_Pin, SET);
 80003f6:	2201      	movs	r2, #1
 80003f8:	2108      	movs	r1, #8
 80003fa:	4830      	ldr	r0, [pc, #192]	; (80004bc <display7SEGa+0x31c>)
 80003fc:	f001 fd13 	bl	8001e26 <HAL_GPIO_WritePin>
  	  	HAL_GPIO_WritePin(chan1e_GPIO_Port,chan1e_Pin, SET);
 8000400:	2201      	movs	r2, #1
 8000402:	2110      	movs	r1, #16
 8000404:	482d      	ldr	r0, [pc, #180]	; (80004bc <display7SEGa+0x31c>)
 8000406:	f001 fd0e 	bl	8001e26 <HAL_GPIO_WritePin>
  	  	HAL_GPIO_WritePin(chan1f_GPIO_Port,chan1f_Pin, SET);
 800040a:	2201      	movs	r2, #1
 800040c:	2120      	movs	r1, #32
 800040e:	482b      	ldr	r0, [pc, #172]	; (80004bc <display7SEGa+0x31c>)
 8000410:	f001 fd09 	bl	8001e26 <HAL_GPIO_WritePin>
  	  	HAL_GPIO_WritePin(chan1g_GPIO_Port,chan1g_Pin, SET);
 8000414:	2201      	movs	r2, #1
 8000416:	2140      	movs	r1, #64	; 0x40
 8000418:	4828      	ldr	r0, [pc, #160]	; (80004bc <display7SEGa+0x31c>)
 800041a:	f001 fd04 	bl	8001e26 <HAL_GPIO_WritePin>
  	  	break ;
 800041e:	e048      	b.n	80004b2 <display7SEGa+0x312>
  	case 8 :
  	  	HAL_GPIO_WritePin(chan1a_GPIO_Port,chan1a_Pin, RESET);
 8000420:	2200      	movs	r2, #0
 8000422:	2101      	movs	r1, #1
 8000424:	4825      	ldr	r0, [pc, #148]	; (80004bc <display7SEGa+0x31c>)
 8000426:	f001 fcfe 	bl	8001e26 <HAL_GPIO_WritePin>
  	  	HAL_GPIO_WritePin(chan1b_GPIO_Port,chan1b_Pin, RESET);
 800042a:	2200      	movs	r2, #0
 800042c:	2102      	movs	r1, #2
 800042e:	4823      	ldr	r0, [pc, #140]	; (80004bc <display7SEGa+0x31c>)
 8000430:	f001 fcf9 	bl	8001e26 <HAL_GPIO_WritePin>
  	  	HAL_GPIO_WritePin(chan1c_GPIO_Port,chan1c_Pin, RESET);
 8000434:	2200      	movs	r2, #0
 8000436:	2104      	movs	r1, #4
 8000438:	4820      	ldr	r0, [pc, #128]	; (80004bc <display7SEGa+0x31c>)
 800043a:	f001 fcf4 	bl	8001e26 <HAL_GPIO_WritePin>
  	  	HAL_GPIO_WritePin(chan1d_GPIO_Port,chan1d_Pin, RESET);
 800043e:	2200      	movs	r2, #0
 8000440:	2108      	movs	r1, #8
 8000442:	481e      	ldr	r0, [pc, #120]	; (80004bc <display7SEGa+0x31c>)
 8000444:	f001 fcef 	bl	8001e26 <HAL_GPIO_WritePin>
  	  	HAL_GPIO_WritePin(chan1e_GPIO_Port,chan1e_Pin, RESET);
 8000448:	2200      	movs	r2, #0
 800044a:	2110      	movs	r1, #16
 800044c:	481b      	ldr	r0, [pc, #108]	; (80004bc <display7SEGa+0x31c>)
 800044e:	f001 fcea 	bl	8001e26 <HAL_GPIO_WritePin>
  	  	HAL_GPIO_WritePin(chan1f_GPIO_Port,chan1f_Pin, RESET);
 8000452:	2200      	movs	r2, #0
 8000454:	2120      	movs	r1, #32
 8000456:	4819      	ldr	r0, [pc, #100]	; (80004bc <display7SEGa+0x31c>)
 8000458:	f001 fce5 	bl	8001e26 <HAL_GPIO_WritePin>
  	  	HAL_GPIO_WritePin(chan1g_GPIO_Port,chan1g_Pin, RESET);
 800045c:	2200      	movs	r2, #0
 800045e:	2140      	movs	r1, #64	; 0x40
 8000460:	4816      	ldr	r0, [pc, #88]	; (80004bc <display7SEGa+0x31c>)
 8000462:	f001 fce0 	bl	8001e26 <HAL_GPIO_WritePin>
  	  	break ;
 8000466:	e024      	b.n	80004b2 <display7SEGa+0x312>
  	case 9 :
  	  	HAL_GPIO_WritePin(chan1a_GPIO_Port,chan1a_Pin, RESET);
 8000468:	2200      	movs	r2, #0
 800046a:	2101      	movs	r1, #1
 800046c:	4813      	ldr	r0, [pc, #76]	; (80004bc <display7SEGa+0x31c>)
 800046e:	f001 fcda 	bl	8001e26 <HAL_GPIO_WritePin>
  	  	HAL_GPIO_WritePin(chan1b_GPIO_Port,chan1b_Pin, RESET);
 8000472:	2200      	movs	r2, #0
 8000474:	2102      	movs	r1, #2
 8000476:	4811      	ldr	r0, [pc, #68]	; (80004bc <display7SEGa+0x31c>)
 8000478:	f001 fcd5 	bl	8001e26 <HAL_GPIO_WritePin>
  	  	HAL_GPIO_WritePin(chan1c_GPIO_Port,chan1c_Pin, RESET);
 800047c:	2200      	movs	r2, #0
 800047e:	2104      	movs	r1, #4
 8000480:	480e      	ldr	r0, [pc, #56]	; (80004bc <display7SEGa+0x31c>)
 8000482:	f001 fcd0 	bl	8001e26 <HAL_GPIO_WritePin>
  	  	HAL_GPIO_WritePin(chan1d_GPIO_Port,chan1d_Pin, RESET);
 8000486:	2200      	movs	r2, #0
 8000488:	2108      	movs	r1, #8
 800048a:	480c      	ldr	r0, [pc, #48]	; (80004bc <display7SEGa+0x31c>)
 800048c:	f001 fccb 	bl	8001e26 <HAL_GPIO_WritePin>
  	  	HAL_GPIO_WritePin(chan1e_GPIO_Port,chan1e_Pin, SET);
 8000490:	2201      	movs	r2, #1
 8000492:	2110      	movs	r1, #16
 8000494:	4809      	ldr	r0, [pc, #36]	; (80004bc <display7SEGa+0x31c>)
 8000496:	f001 fcc6 	bl	8001e26 <HAL_GPIO_WritePin>
  	  	HAL_GPIO_WritePin(chan1f_GPIO_Port,chan1f_Pin, RESET);
 800049a:	2200      	movs	r2, #0
 800049c:	2120      	movs	r1, #32
 800049e:	4807      	ldr	r0, [pc, #28]	; (80004bc <display7SEGa+0x31c>)
 80004a0:	f001 fcc1 	bl	8001e26 <HAL_GPIO_WritePin>
  	  	HAL_GPIO_WritePin(chan1g_GPIO_Port,chan1g_Pin, RESET);
 80004a4:	2200      	movs	r2, #0
 80004a6:	2140      	movs	r1, #64	; 0x40
 80004a8:	4804      	ldr	r0, [pc, #16]	; (80004bc <display7SEGa+0x31c>)
 80004aa:	f001 fcbc 	bl	8001e26 <HAL_GPIO_WritePin>
  	  	break ;
 80004ae:	e000      	b.n	80004b2 <display7SEGa+0x312>
  	default : break;
 80004b0:	bf00      	nop
  	}
  }
 80004b2:	bf00      	nop
 80004b4:	3708      	adds	r7, #8
 80004b6:	46bd      	mov	sp, r7
 80004b8:	bd80      	pop	{r7, pc}
 80004ba:	bf00      	nop
 80004bc:	40010c00 	.word	0x40010c00

080004c0 <update7SEGb>:
 */

#include "display2.h"

 void update7SEGb ( int index )
  {
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b082      	sub	sp, #8
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	6078      	str	r0, [r7, #4]
    switch ( index )
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	2b00      	cmp	r3, #0
 80004cc:	d003      	beq.n	80004d6 <update7SEGb+0x16>
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	2b01      	cmp	r3, #1
 80004d2:	d00d      	beq.n	80004f0 <update7SEGb+0x30>
        break ;
    case 1:
	    HAL_GPIO_WritePin(en2_GPIO_Port,en2_Pin, SET);
	    HAL_GPIO_WritePin(en3_GPIO_Port,en3_Pin, RESET);
        break ;
    default : break ;
 80004d4:	e019      	b.n	800050a <update7SEGb+0x4a>
	    HAL_GPIO_WritePin(en2_GPIO_Port,en2_Pin, RESET);
 80004d6:	2200      	movs	r2, #0
 80004d8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80004dc:	480d      	ldr	r0, [pc, #52]	; (8000514 <update7SEGb+0x54>)
 80004de:	f001 fca2 	bl	8001e26 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(en3_GPIO_Port,en3_Pin, SET);
 80004e2:	2201      	movs	r2, #1
 80004e4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80004e8:	480a      	ldr	r0, [pc, #40]	; (8000514 <update7SEGb+0x54>)
 80004ea:	f001 fc9c 	bl	8001e26 <HAL_GPIO_WritePin>
        break ;
 80004ee:	e00c      	b.n	800050a <update7SEGb+0x4a>
	    HAL_GPIO_WritePin(en2_GPIO_Port,en2_Pin, SET);
 80004f0:	2201      	movs	r2, #1
 80004f2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80004f6:	4807      	ldr	r0, [pc, #28]	; (8000514 <update7SEGb+0x54>)
 80004f8:	f001 fc95 	bl	8001e26 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(en3_GPIO_Port,en3_Pin, RESET);
 80004fc:	2200      	movs	r2, #0
 80004fe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000502:	4804      	ldr	r0, [pc, #16]	; (8000514 <update7SEGb+0x54>)
 8000504:	f001 fc8f 	bl	8001e26 <HAL_GPIO_WritePin>
        break ;
 8000508:	bf00      	nop
    }
  }
 800050a:	bf00      	nop
 800050c:	3708      	adds	r7, #8
 800050e:	46bd      	mov	sp, r7
 8000510:	bd80      	pop	{r7, pc}
 8000512:	bf00      	nop
 8000514:	40010800 	.word	0x40010800

08000518 <display7SEGb>:


void display7SEGb(int index)
   {
 8000518:	b580      	push	{r7, lr}
 800051a:	b082      	sub	sp, #8
 800051c:	af00      	add	r7, sp, #0
 800051e:	6078      	str	r0, [r7, #4]
   	switch (index)
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	2b09      	cmp	r3, #9
 8000524:	f200 81bc 	bhi.w	80008a0 <display7SEGb+0x388>
 8000528:	a201      	add	r2, pc, #4	; (adr r2, 8000530 <display7SEGb+0x18>)
 800052a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800052e:	bf00      	nop
 8000530:	08000559 	.word	0x08000559
 8000534:	080005ad 	.word	0x080005ad
 8000538:	08000601 	.word	0x08000601
 800053c:	08000655 	.word	0x08000655
 8000540:	080006a9 	.word	0x080006a9
 8000544:	080006fd 	.word	0x080006fd
 8000548:	08000751 	.word	0x08000751
 800054c:	080007a5 	.word	0x080007a5
 8000550:	080007f9 	.word	0x080007f9
 8000554:	0800084d 	.word	0x0800084d
   	{
   	case 0 :
   		HAL_GPIO_WritePin(chan2a_GPIO_Port,chan2a_Pin, RESET);
 8000558:	2200      	movs	r2, #0
 800055a:	2180      	movs	r1, #128	; 0x80
 800055c:	48d3      	ldr	r0, [pc, #844]	; (80008ac <display7SEGb+0x394>)
 800055e:	f001 fc62 	bl	8001e26 <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(chan2b_GPIO_Port,chan2b_Pin, RESET);
 8000562:	2200      	movs	r2, #0
 8000564:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000568:	48d0      	ldr	r0, [pc, #832]	; (80008ac <display7SEGb+0x394>)
 800056a:	f001 fc5c 	bl	8001e26 <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(chan2c_GPIO_Port,chan2c_Pin, RESET);
 800056e:	2200      	movs	r2, #0
 8000570:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000574:	48cd      	ldr	r0, [pc, #820]	; (80008ac <display7SEGb+0x394>)
 8000576:	f001 fc56 	bl	8001e26 <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(chan2d_GPIO_Port,chan2d_Pin, RESET);
 800057a:	2200      	movs	r2, #0
 800057c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000580:	48ca      	ldr	r0, [pc, #808]	; (80008ac <display7SEGb+0x394>)
 8000582:	f001 fc50 	bl	8001e26 <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(chan2e_GPIO_Port,chan2e_Pin, RESET);
 8000586:	2200      	movs	r2, #0
 8000588:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800058c:	48c7      	ldr	r0, [pc, #796]	; (80008ac <display7SEGb+0x394>)
 800058e:	f001 fc4a 	bl	8001e26 <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(chan2f_GPIO_Port,chan2f_Pin, RESET);
 8000592:	2200      	movs	r2, #0
 8000594:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000598:	48c4      	ldr	r0, [pc, #784]	; (80008ac <display7SEGb+0x394>)
 800059a:	f001 fc44 	bl	8001e26 <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(chan2g_GPIO_Port,chan2g_Pin, SET);
 800059e:	2201      	movs	r2, #1
 80005a0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005a4:	48c1      	ldr	r0, [pc, #772]	; (80008ac <display7SEGb+0x394>)
 80005a6:	f001 fc3e 	bl	8001e26 <HAL_GPIO_WritePin>
   	    break ;
 80005aa:	e17a      	b.n	80008a2 <display7SEGb+0x38a>
   	case 1 :
   		HAL_GPIO_WritePin(chan2a_GPIO_Port,chan2a_Pin, SET);
 80005ac:	2201      	movs	r2, #1
 80005ae:	2180      	movs	r1, #128	; 0x80
 80005b0:	48be      	ldr	r0, [pc, #760]	; (80008ac <display7SEGb+0x394>)
 80005b2:	f001 fc38 	bl	8001e26 <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(chan2b_GPIO_Port,chan2b_Pin, RESET);
 80005b6:	2200      	movs	r2, #0
 80005b8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005bc:	48bb      	ldr	r0, [pc, #748]	; (80008ac <display7SEGb+0x394>)
 80005be:	f001 fc32 	bl	8001e26 <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(chan2c_GPIO_Port,chan2c_Pin, RESET);
 80005c2:	2200      	movs	r2, #0
 80005c4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005c8:	48b8      	ldr	r0, [pc, #736]	; (80008ac <display7SEGb+0x394>)
 80005ca:	f001 fc2c 	bl	8001e26 <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(chan2d_GPIO_Port,chan2d_Pin, SET);
 80005ce:	2201      	movs	r2, #1
 80005d0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005d4:	48b5      	ldr	r0, [pc, #724]	; (80008ac <display7SEGb+0x394>)
 80005d6:	f001 fc26 	bl	8001e26 <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(chan2e_GPIO_Port,chan2e_Pin, SET);
 80005da:	2201      	movs	r2, #1
 80005dc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80005e0:	48b2      	ldr	r0, [pc, #712]	; (80008ac <display7SEGb+0x394>)
 80005e2:	f001 fc20 	bl	8001e26 <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(chan2f_GPIO_Port,chan2f_Pin, SET);
 80005e6:	2201      	movs	r2, #1
 80005e8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005ec:	48af      	ldr	r0, [pc, #700]	; (80008ac <display7SEGb+0x394>)
 80005ee:	f001 fc1a 	bl	8001e26 <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(chan2g_GPIO_Port,chan2g_Pin, SET);
 80005f2:	2201      	movs	r2, #1
 80005f4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005f8:	48ac      	ldr	r0, [pc, #688]	; (80008ac <display7SEGb+0x394>)
 80005fa:	f001 fc14 	bl	8001e26 <HAL_GPIO_WritePin>
   	    break;
 80005fe:	e150      	b.n	80008a2 <display7SEGb+0x38a>
   	case 2 :
   		HAL_GPIO_WritePin(chan2a_GPIO_Port,chan2a_Pin, RESET);
 8000600:	2200      	movs	r2, #0
 8000602:	2180      	movs	r1, #128	; 0x80
 8000604:	48a9      	ldr	r0, [pc, #676]	; (80008ac <display7SEGb+0x394>)
 8000606:	f001 fc0e 	bl	8001e26 <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(chan2b_GPIO_Port,chan2b_Pin, RESET);
 800060a:	2200      	movs	r2, #0
 800060c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000610:	48a6      	ldr	r0, [pc, #664]	; (80008ac <display7SEGb+0x394>)
 8000612:	f001 fc08 	bl	8001e26 <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(chan2c_GPIO_Port,chan2c_Pin, SET);
 8000616:	2201      	movs	r2, #1
 8000618:	f44f 7100 	mov.w	r1, #512	; 0x200
 800061c:	48a3      	ldr	r0, [pc, #652]	; (80008ac <display7SEGb+0x394>)
 800061e:	f001 fc02 	bl	8001e26 <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(chan2d_GPIO_Port,chan2d_Pin, RESET);
 8000622:	2200      	movs	r2, #0
 8000624:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000628:	48a0      	ldr	r0, [pc, #640]	; (80008ac <display7SEGb+0x394>)
 800062a:	f001 fbfc 	bl	8001e26 <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(chan2e_GPIO_Port,chan2e_Pin, RESET);
 800062e:	2200      	movs	r2, #0
 8000630:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000634:	489d      	ldr	r0, [pc, #628]	; (80008ac <display7SEGb+0x394>)
 8000636:	f001 fbf6 	bl	8001e26 <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(chan2f_GPIO_Port,chan2f_Pin, SET);
 800063a:	2201      	movs	r2, #1
 800063c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000640:	489a      	ldr	r0, [pc, #616]	; (80008ac <display7SEGb+0x394>)
 8000642:	f001 fbf0 	bl	8001e26 <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(chan2g_GPIO_Port,chan2g_Pin, RESET);
 8000646:	2200      	movs	r2, #0
 8000648:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800064c:	4897      	ldr	r0, [pc, #604]	; (80008ac <display7SEGb+0x394>)
 800064e:	f001 fbea 	bl	8001e26 <HAL_GPIO_WritePin>
   	    break ;
 8000652:	e126      	b.n	80008a2 <display7SEGb+0x38a>
   	case 3 :
   		HAL_GPIO_WritePin(chan2a_GPIO_Port,chan2a_Pin, RESET);
 8000654:	2200      	movs	r2, #0
 8000656:	2180      	movs	r1, #128	; 0x80
 8000658:	4894      	ldr	r0, [pc, #592]	; (80008ac <display7SEGb+0x394>)
 800065a:	f001 fbe4 	bl	8001e26 <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(chan2b_GPIO_Port,chan2b_Pin, RESET);
 800065e:	2200      	movs	r2, #0
 8000660:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000664:	4891      	ldr	r0, [pc, #580]	; (80008ac <display7SEGb+0x394>)
 8000666:	f001 fbde 	bl	8001e26 <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(chan2c_GPIO_Port,chan2c_Pin, RESET);
 800066a:	2200      	movs	r2, #0
 800066c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000670:	488e      	ldr	r0, [pc, #568]	; (80008ac <display7SEGb+0x394>)
 8000672:	f001 fbd8 	bl	8001e26 <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(chan2d_GPIO_Port,chan2d_Pin, RESET);
 8000676:	2200      	movs	r2, #0
 8000678:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800067c:	488b      	ldr	r0, [pc, #556]	; (80008ac <display7SEGb+0x394>)
 800067e:	f001 fbd2 	bl	8001e26 <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(chan2e_GPIO_Port,chan2e_Pin, SET);
 8000682:	2201      	movs	r2, #1
 8000684:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000688:	4888      	ldr	r0, [pc, #544]	; (80008ac <display7SEGb+0x394>)
 800068a:	f001 fbcc 	bl	8001e26 <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(chan2f_GPIO_Port,chan2f_Pin, SET);
 800068e:	2201      	movs	r2, #1
 8000690:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000694:	4885      	ldr	r0, [pc, #532]	; (80008ac <display7SEGb+0x394>)
 8000696:	f001 fbc6 	bl	8001e26 <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(chan2g_GPIO_Port,chan2g_Pin, RESET);
 800069a:	2200      	movs	r2, #0
 800069c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006a0:	4882      	ldr	r0, [pc, #520]	; (80008ac <display7SEGb+0x394>)
 80006a2:	f001 fbc0 	bl	8001e26 <HAL_GPIO_WritePin>
   	    break ;
 80006a6:	e0fc      	b.n	80008a2 <display7SEGb+0x38a>
   	case 4 :
   		HAL_GPIO_WritePin(chan2a_GPIO_Port,chan2a_Pin, SET);
 80006a8:	2201      	movs	r2, #1
 80006aa:	2180      	movs	r1, #128	; 0x80
 80006ac:	487f      	ldr	r0, [pc, #508]	; (80008ac <display7SEGb+0x394>)
 80006ae:	f001 fbba 	bl	8001e26 <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(chan2b_GPIO_Port,chan2b_Pin, RESET);
 80006b2:	2200      	movs	r2, #0
 80006b4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006b8:	487c      	ldr	r0, [pc, #496]	; (80008ac <display7SEGb+0x394>)
 80006ba:	f001 fbb4 	bl	8001e26 <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(chan2c_GPIO_Port,chan2c_Pin, RESET);
 80006be:	2200      	movs	r2, #0
 80006c0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006c4:	4879      	ldr	r0, [pc, #484]	; (80008ac <display7SEGb+0x394>)
 80006c6:	f001 fbae 	bl	8001e26 <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(chan2d_GPIO_Port,chan2d_Pin, SET);
 80006ca:	2201      	movs	r2, #1
 80006cc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006d0:	4876      	ldr	r0, [pc, #472]	; (80008ac <display7SEGb+0x394>)
 80006d2:	f001 fba8 	bl	8001e26 <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(chan2e_GPIO_Port,chan2e_Pin, SET);
 80006d6:	2201      	movs	r2, #1
 80006d8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80006dc:	4873      	ldr	r0, [pc, #460]	; (80008ac <display7SEGb+0x394>)
 80006de:	f001 fba2 	bl	8001e26 <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(chan2f_GPIO_Port,chan2f_Pin, RESET);
 80006e2:	2200      	movs	r2, #0
 80006e4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006e8:	4870      	ldr	r0, [pc, #448]	; (80008ac <display7SEGb+0x394>)
 80006ea:	f001 fb9c 	bl	8001e26 <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(chan2g_GPIO_Port,chan2g_Pin, RESET);
 80006ee:	2200      	movs	r2, #0
 80006f0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006f4:	486d      	ldr	r0, [pc, #436]	; (80008ac <display7SEGb+0x394>)
 80006f6:	f001 fb96 	bl	8001e26 <HAL_GPIO_WritePin>
   		break ;
 80006fa:	e0d2      	b.n	80008a2 <display7SEGb+0x38a>
   	case 5 :
   		HAL_GPIO_WritePin(chan2a_GPIO_Port,chan2a_Pin, RESET);
 80006fc:	2200      	movs	r2, #0
 80006fe:	2180      	movs	r1, #128	; 0x80
 8000700:	486a      	ldr	r0, [pc, #424]	; (80008ac <display7SEGb+0x394>)
 8000702:	f001 fb90 	bl	8001e26 <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(chan2b_GPIO_Port,chan2b_Pin, SET);
 8000706:	2201      	movs	r2, #1
 8000708:	f44f 7180 	mov.w	r1, #256	; 0x100
 800070c:	4867      	ldr	r0, [pc, #412]	; (80008ac <display7SEGb+0x394>)
 800070e:	f001 fb8a 	bl	8001e26 <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(chan2c_GPIO_Port,chan2c_Pin, RESET);
 8000712:	2200      	movs	r2, #0
 8000714:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000718:	4864      	ldr	r0, [pc, #400]	; (80008ac <display7SEGb+0x394>)
 800071a:	f001 fb84 	bl	8001e26 <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(chan2d_GPIO_Port,chan2d_Pin, RESET);
 800071e:	2200      	movs	r2, #0
 8000720:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000724:	4861      	ldr	r0, [pc, #388]	; (80008ac <display7SEGb+0x394>)
 8000726:	f001 fb7e 	bl	8001e26 <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(chan2e_GPIO_Port,chan2e_Pin, SET);
 800072a:	2201      	movs	r2, #1
 800072c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000730:	485e      	ldr	r0, [pc, #376]	; (80008ac <display7SEGb+0x394>)
 8000732:	f001 fb78 	bl	8001e26 <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(chan2f_GPIO_Port,chan2f_Pin, RESET);
 8000736:	2200      	movs	r2, #0
 8000738:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800073c:	485b      	ldr	r0, [pc, #364]	; (80008ac <display7SEGb+0x394>)
 800073e:	f001 fb72 	bl	8001e26 <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(chan2g_GPIO_Port,chan2g_Pin, RESET);
 8000742:	2200      	movs	r2, #0
 8000744:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000748:	4858      	ldr	r0, [pc, #352]	; (80008ac <display7SEGb+0x394>)
 800074a:	f001 fb6c 	bl	8001e26 <HAL_GPIO_WritePin>
   		break ;
 800074e:	e0a8      	b.n	80008a2 <display7SEGb+0x38a>
   	case 6 :
   	   	HAL_GPIO_WritePin(chan2a_GPIO_Port,chan2a_Pin, RESET);
 8000750:	2200      	movs	r2, #0
 8000752:	2180      	movs	r1, #128	; 0x80
 8000754:	4855      	ldr	r0, [pc, #340]	; (80008ac <display7SEGb+0x394>)
 8000756:	f001 fb66 	bl	8001e26 <HAL_GPIO_WritePin>
   	   	HAL_GPIO_WritePin(chan2b_GPIO_Port,chan2b_Pin, SET);
 800075a:	2201      	movs	r2, #1
 800075c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000760:	4852      	ldr	r0, [pc, #328]	; (80008ac <display7SEGb+0x394>)
 8000762:	f001 fb60 	bl	8001e26 <HAL_GPIO_WritePin>
   	   	HAL_GPIO_WritePin(chan2c_GPIO_Port,chan2c_Pin, RESET);
 8000766:	2200      	movs	r2, #0
 8000768:	f44f 7100 	mov.w	r1, #512	; 0x200
 800076c:	484f      	ldr	r0, [pc, #316]	; (80008ac <display7SEGb+0x394>)
 800076e:	f001 fb5a 	bl	8001e26 <HAL_GPIO_WritePin>
   	   	HAL_GPIO_WritePin(chan2d_GPIO_Port,chan2d_Pin, RESET);
 8000772:	2200      	movs	r2, #0
 8000774:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000778:	484c      	ldr	r0, [pc, #304]	; (80008ac <display7SEGb+0x394>)
 800077a:	f001 fb54 	bl	8001e26 <HAL_GPIO_WritePin>
   	   	HAL_GPIO_WritePin(chan2e_GPIO_Port,chan2e_Pin, RESET);
 800077e:	2200      	movs	r2, #0
 8000780:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000784:	4849      	ldr	r0, [pc, #292]	; (80008ac <display7SEGb+0x394>)
 8000786:	f001 fb4e 	bl	8001e26 <HAL_GPIO_WritePin>
   	   	HAL_GPIO_WritePin(chan2f_GPIO_Port,chan2f_Pin, RESET);
 800078a:	2200      	movs	r2, #0
 800078c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000790:	4846      	ldr	r0, [pc, #280]	; (80008ac <display7SEGb+0x394>)
 8000792:	f001 fb48 	bl	8001e26 <HAL_GPIO_WritePin>
   	   	HAL_GPIO_WritePin(chan2g_GPIO_Port,chan2g_Pin, RESET);
 8000796:	2200      	movs	r2, #0
 8000798:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800079c:	4843      	ldr	r0, [pc, #268]	; (80008ac <display7SEGb+0x394>)
 800079e:	f001 fb42 	bl	8001e26 <HAL_GPIO_WritePin>
   	   	break;
 80007a2:	e07e      	b.n	80008a2 <display7SEGb+0x38a>
   	case 7 :
   	   	HAL_GPIO_WritePin(chan2a_GPIO_Port,chan2a_Pin, RESET);
 80007a4:	2200      	movs	r2, #0
 80007a6:	2180      	movs	r1, #128	; 0x80
 80007a8:	4840      	ldr	r0, [pc, #256]	; (80008ac <display7SEGb+0x394>)
 80007aa:	f001 fb3c 	bl	8001e26 <HAL_GPIO_WritePin>
   	   	HAL_GPIO_WritePin(chan2b_GPIO_Port,chan2b_Pin, RESET);
 80007ae:	2200      	movs	r2, #0
 80007b0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007b4:	483d      	ldr	r0, [pc, #244]	; (80008ac <display7SEGb+0x394>)
 80007b6:	f001 fb36 	bl	8001e26 <HAL_GPIO_WritePin>
   	   	HAL_GPIO_WritePin(chan2c_GPIO_Port,chan2c_Pin, RESET);
 80007ba:	2200      	movs	r2, #0
 80007bc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007c0:	483a      	ldr	r0, [pc, #232]	; (80008ac <display7SEGb+0x394>)
 80007c2:	f001 fb30 	bl	8001e26 <HAL_GPIO_WritePin>
   	   	HAL_GPIO_WritePin(chan2d_GPIO_Port,chan2d_Pin, SET);
 80007c6:	2201      	movs	r2, #1
 80007c8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007cc:	4837      	ldr	r0, [pc, #220]	; (80008ac <display7SEGb+0x394>)
 80007ce:	f001 fb2a 	bl	8001e26 <HAL_GPIO_WritePin>
   	   	HAL_GPIO_WritePin(chan2e_GPIO_Port,chan2e_Pin, SET);
 80007d2:	2201      	movs	r2, #1
 80007d4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80007d8:	4834      	ldr	r0, [pc, #208]	; (80008ac <display7SEGb+0x394>)
 80007da:	f001 fb24 	bl	8001e26 <HAL_GPIO_WritePin>
   	   	HAL_GPIO_WritePin(chan2f_GPIO_Port,chan2f_Pin, SET);
 80007de:	2201      	movs	r2, #1
 80007e0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007e4:	4831      	ldr	r0, [pc, #196]	; (80008ac <display7SEGb+0x394>)
 80007e6:	f001 fb1e 	bl	8001e26 <HAL_GPIO_WritePin>
   	   	HAL_GPIO_WritePin(chan2g_GPIO_Port,chan2g_Pin, SET);
 80007ea:	2201      	movs	r2, #1
 80007ec:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007f0:	482e      	ldr	r0, [pc, #184]	; (80008ac <display7SEGb+0x394>)
 80007f2:	f001 fb18 	bl	8001e26 <HAL_GPIO_WritePin>
   	   	break;
 80007f6:	e054      	b.n	80008a2 <display7SEGb+0x38a>
   	case 8 :
   	   	HAL_GPIO_WritePin(chan2a_GPIO_Port,chan2a_Pin, RESET);
 80007f8:	2200      	movs	r2, #0
 80007fa:	2180      	movs	r1, #128	; 0x80
 80007fc:	482b      	ldr	r0, [pc, #172]	; (80008ac <display7SEGb+0x394>)
 80007fe:	f001 fb12 	bl	8001e26 <HAL_GPIO_WritePin>
   	   	HAL_GPIO_WritePin(chan2b_GPIO_Port,chan2b_Pin, RESET);
 8000802:	2200      	movs	r2, #0
 8000804:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000808:	4828      	ldr	r0, [pc, #160]	; (80008ac <display7SEGb+0x394>)
 800080a:	f001 fb0c 	bl	8001e26 <HAL_GPIO_WritePin>
   	   	HAL_GPIO_WritePin(chan2c_GPIO_Port,chan2c_Pin, RESET);
 800080e:	2200      	movs	r2, #0
 8000810:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000814:	4825      	ldr	r0, [pc, #148]	; (80008ac <display7SEGb+0x394>)
 8000816:	f001 fb06 	bl	8001e26 <HAL_GPIO_WritePin>
   	   	HAL_GPIO_WritePin(chan2d_GPIO_Port,chan2d_Pin, RESET);
 800081a:	2200      	movs	r2, #0
 800081c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000820:	4822      	ldr	r0, [pc, #136]	; (80008ac <display7SEGb+0x394>)
 8000822:	f001 fb00 	bl	8001e26 <HAL_GPIO_WritePin>
   	   	HAL_GPIO_WritePin(chan2e_GPIO_Port,chan2e_Pin, RESET);
 8000826:	2200      	movs	r2, #0
 8000828:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800082c:	481f      	ldr	r0, [pc, #124]	; (80008ac <display7SEGb+0x394>)
 800082e:	f001 fafa 	bl	8001e26 <HAL_GPIO_WritePin>
   	   	HAL_GPIO_WritePin(chan2f_GPIO_Port,chan2f_Pin, RESET);
 8000832:	2200      	movs	r2, #0
 8000834:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000838:	481c      	ldr	r0, [pc, #112]	; (80008ac <display7SEGb+0x394>)
 800083a:	f001 faf4 	bl	8001e26 <HAL_GPIO_WritePin>
   	   	HAL_GPIO_WritePin(chan2g_GPIO_Port,chan2g_Pin, RESET);
 800083e:	2200      	movs	r2, #0
 8000840:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000844:	4819      	ldr	r0, [pc, #100]	; (80008ac <display7SEGb+0x394>)
 8000846:	f001 faee 	bl	8001e26 <HAL_GPIO_WritePin>
   	   	break;
 800084a:	e02a      	b.n	80008a2 <display7SEGb+0x38a>
   	case 9 :
   	   	HAL_GPIO_WritePin(chan2a_GPIO_Port,chan2a_Pin, RESET);
 800084c:	2200      	movs	r2, #0
 800084e:	2180      	movs	r1, #128	; 0x80
 8000850:	4816      	ldr	r0, [pc, #88]	; (80008ac <display7SEGb+0x394>)
 8000852:	f001 fae8 	bl	8001e26 <HAL_GPIO_WritePin>
   	   	HAL_GPIO_WritePin(chan2b_GPIO_Port,chan2b_Pin, RESET);
 8000856:	2200      	movs	r2, #0
 8000858:	f44f 7180 	mov.w	r1, #256	; 0x100
 800085c:	4813      	ldr	r0, [pc, #76]	; (80008ac <display7SEGb+0x394>)
 800085e:	f001 fae2 	bl	8001e26 <HAL_GPIO_WritePin>
   	   	HAL_GPIO_WritePin(chan2c_GPIO_Port,chan2c_Pin, RESET);
 8000862:	2200      	movs	r2, #0
 8000864:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000868:	4810      	ldr	r0, [pc, #64]	; (80008ac <display7SEGb+0x394>)
 800086a:	f001 fadc 	bl	8001e26 <HAL_GPIO_WritePin>
   	   	HAL_GPIO_WritePin(chan2d_GPIO_Port,chan2d_Pin, RESET);
 800086e:	2200      	movs	r2, #0
 8000870:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000874:	480d      	ldr	r0, [pc, #52]	; (80008ac <display7SEGb+0x394>)
 8000876:	f001 fad6 	bl	8001e26 <HAL_GPIO_WritePin>
   	   	HAL_GPIO_WritePin(chan2e_GPIO_Port,chan2e_Pin, SET);
 800087a:	2201      	movs	r2, #1
 800087c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000880:	480a      	ldr	r0, [pc, #40]	; (80008ac <display7SEGb+0x394>)
 8000882:	f001 fad0 	bl	8001e26 <HAL_GPIO_WritePin>
   	   	HAL_GPIO_WritePin(chan2f_GPIO_Port,chan2f_Pin, RESET);
 8000886:	2200      	movs	r2, #0
 8000888:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800088c:	4807      	ldr	r0, [pc, #28]	; (80008ac <display7SEGb+0x394>)
 800088e:	f001 faca 	bl	8001e26 <HAL_GPIO_WritePin>
   	   	HAL_GPIO_WritePin(chan2g_GPIO_Port,chan2g_Pin, RESET);
 8000892:	2200      	movs	r2, #0
 8000894:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000898:	4804      	ldr	r0, [pc, #16]	; (80008ac <display7SEGb+0x394>)
 800089a:	f001 fac4 	bl	8001e26 <HAL_GPIO_WritePin>
   	   	break;
 800089e:	e000      	b.n	80008a2 <display7SEGb+0x38a>
   	default : break;
 80008a0:	bf00      	nop
   	}
   }
 80008a2:	bf00      	nop
 80008a4:	3708      	adds	r7, #8
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	40010c00 	.word	0x40010c00

080008b0 <fsm_run1>:

int duration =0 ;
int duration2 =0 ;

void fsm_run1()
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	af00      	add	r7, sp, #0
	switch(status1)
 80008b4:	4b33      	ldr	r3, [pc, #204]	; (8000984 <fsm_run1+0xd4>)
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	2b03      	cmp	r3, #3
 80008ba:	d85a      	bhi.n	8000972 <fsm_run1+0xc2>
 80008bc:	a201      	add	r2, pc, #4	; (adr r2, 80008c4 <fsm_run1+0x14>)
 80008be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008c2:	bf00      	nop
 80008c4:	080008d5 	.word	0x080008d5
 80008c8:	080008f5 	.word	0x080008f5
 80008cc:	0800091f 	.word	0x0800091f
 80008d0:	08000949 	.word	0x08000949
	{
	case INIT :
		turn_off();
 80008d4:	f000 f8e0 	bl	8000a98 <turn_off>
		status1=auto_red;
 80008d8:	4b2a      	ldr	r3, [pc, #168]	; (8000984 <fsm_run1+0xd4>)
 80008da:	2201      	movs	r2, #1
 80008dc:	601a      	str	r2, [r3, #0]
		duration=timer1+50;
 80008de:	4b2a      	ldr	r3, [pc, #168]	; (8000988 <fsm_run1+0xd8>)
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	3332      	adds	r3, #50	; 0x32
 80008e4:	4a29      	ldr	r2, [pc, #164]	; (800098c <fsm_run1+0xdc>)
 80008e6:	6013      	str	r3, [r2, #0]
		settimer1(duration);
 80008e8:	4b28      	ldr	r3, [pc, #160]	; (800098c <fsm_run1+0xdc>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	4618      	mov	r0, r3
 80008ee:	f000 fb81 	bl	8000ff4 <settimer1>
		break;
 80008f2:	e045      	b.n	8000980 <fsm_run1+0xd0>
	case auto_red:
		turn_on(0);
 80008f4:	2000      	movs	r0, #0
 80008f6:	f000 f8f3 	bl	8000ae0 <turn_on>
		if(timer1_flag==1)
 80008fa:	4b25      	ldr	r3, [pc, #148]	; (8000990 <fsm_run1+0xe0>)
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	2b01      	cmp	r3, #1
 8000900:	d139      	bne.n	8000976 <fsm_run1+0xc6>
		{
			status1=auto_green;
 8000902:	4b20      	ldr	r3, [pc, #128]	; (8000984 <fsm_run1+0xd4>)
 8000904:	2202      	movs	r2, #2
 8000906:	601a      	str	r2, [r3, #0]
			duration=timer2+50;
 8000908:	4b22      	ldr	r3, [pc, #136]	; (8000994 <fsm_run1+0xe4>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	3332      	adds	r3, #50	; 0x32
 800090e:	4a1f      	ldr	r2, [pc, #124]	; (800098c <fsm_run1+0xdc>)
 8000910:	6013      	str	r3, [r2, #0]
			settimer1(duration);
 8000912:	4b1e      	ldr	r3, [pc, #120]	; (800098c <fsm_run1+0xdc>)
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	4618      	mov	r0, r3
 8000918:	f000 fb6c 	bl	8000ff4 <settimer1>
		}
		break;
 800091c:	e02b      	b.n	8000976 <fsm_run1+0xc6>
	case auto_green :
		turn_on(1);
 800091e:	2001      	movs	r0, #1
 8000920:	f000 f8de 	bl	8000ae0 <turn_on>
		if(timer1_flag==1)
 8000924:	4b1a      	ldr	r3, [pc, #104]	; (8000990 <fsm_run1+0xe0>)
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	2b01      	cmp	r3, #1
 800092a:	d126      	bne.n	800097a <fsm_run1+0xca>
		{
			status1=auto_yellow;
 800092c:	4b15      	ldr	r3, [pc, #84]	; (8000984 <fsm_run1+0xd4>)
 800092e:	2203      	movs	r2, #3
 8000930:	601a      	str	r2, [r3, #0]
			duration=timer3+50;
 8000932:	4b19      	ldr	r3, [pc, #100]	; (8000998 <fsm_run1+0xe8>)
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	3332      	adds	r3, #50	; 0x32
 8000938:	4a14      	ldr	r2, [pc, #80]	; (800098c <fsm_run1+0xdc>)
 800093a:	6013      	str	r3, [r2, #0]
			settimer1(duration);
 800093c:	4b13      	ldr	r3, [pc, #76]	; (800098c <fsm_run1+0xdc>)
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	4618      	mov	r0, r3
 8000942:	f000 fb57 	bl	8000ff4 <settimer1>
		}
		break;
 8000946:	e018      	b.n	800097a <fsm_run1+0xca>
	case auto_yellow :
		turn_on(2);
 8000948:	2002      	movs	r0, #2
 800094a:	f000 f8c9 	bl	8000ae0 <turn_on>
		if(timer1_flag==1)
 800094e:	4b10      	ldr	r3, [pc, #64]	; (8000990 <fsm_run1+0xe0>)
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	2b01      	cmp	r3, #1
 8000954:	d113      	bne.n	800097e <fsm_run1+0xce>
		{
			status1=auto_red;
 8000956:	4b0b      	ldr	r3, [pc, #44]	; (8000984 <fsm_run1+0xd4>)
 8000958:	2201      	movs	r2, #1
 800095a:	601a      	str	r2, [r3, #0]
			duration=timer1+50;
 800095c:	4b0a      	ldr	r3, [pc, #40]	; (8000988 <fsm_run1+0xd8>)
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	3332      	adds	r3, #50	; 0x32
 8000962:	4a0a      	ldr	r2, [pc, #40]	; (800098c <fsm_run1+0xdc>)
 8000964:	6013      	str	r3, [r2, #0]
			settimer1(duration);
 8000966:	4b09      	ldr	r3, [pc, #36]	; (800098c <fsm_run1+0xdc>)
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	4618      	mov	r0, r3
 800096c:	f000 fb42 	bl	8000ff4 <settimer1>
		}
		break;
 8000970:	e005      	b.n	800097e <fsm_run1+0xce>
	default :  break;
 8000972:	bf00      	nop
 8000974:	e004      	b.n	8000980 <fsm_run1+0xd0>
		break;
 8000976:	bf00      	nop
 8000978:	e002      	b.n	8000980 <fsm_run1+0xd0>
		break;
 800097a:	bf00      	nop
 800097c:	e000      	b.n	8000980 <fsm_run1+0xd0>
		break;
 800097e:	bf00      	nop
	}
}
 8000980:	bf00      	nop
 8000982:	bd80      	pop	{r7, pc}
 8000984:	2000003c 	.word	0x2000003c
 8000988:	20000000 	.word	0x20000000
 800098c:	20000034 	.word	0x20000034
 8000990:	200000b0 	.word	0x200000b0
 8000994:	20000004 	.word	0x20000004
 8000998:	20000008 	.word	0x20000008

0800099c <fsm_run2>:

void fsm_run2()
{
 800099c:	b580      	push	{r7, lr}
 800099e:	af00      	add	r7, sp, #0
	switch(status2)
 80009a0:	4b33      	ldr	r3, [pc, #204]	; (8000a70 <fsm_run2+0xd4>)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	2b03      	cmp	r3, #3
 80009a6:	d85a      	bhi.n	8000a5e <fsm_run2+0xc2>
 80009a8:	a201      	add	r2, pc, #4	; (adr r2, 80009b0 <fsm_run2+0x14>)
 80009aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009ae:	bf00      	nop
 80009b0:	080009c1 	.word	0x080009c1
 80009b4:	080009e1 	.word	0x080009e1
 80009b8:	08000a0b 	.word	0x08000a0b
 80009bc:	08000a35 	.word	0x08000a35
	{
	case INIT :
		turn_off();
 80009c0:	f000 f86a 	bl	8000a98 <turn_off>
		status2=auto_green;
 80009c4:	4b2a      	ldr	r3, [pc, #168]	; (8000a70 <fsm_run2+0xd4>)
 80009c6:	2202      	movs	r2, #2
 80009c8:	601a      	str	r2, [r3, #0]
		duration2=timer2+50;
 80009ca:	4b2a      	ldr	r3, [pc, #168]	; (8000a74 <fsm_run2+0xd8>)
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	3332      	adds	r3, #50	; 0x32
 80009d0:	4a29      	ldr	r2, [pc, #164]	; (8000a78 <fsm_run2+0xdc>)
 80009d2:	6013      	str	r3, [r2, #0]
		settimer2(duration2);
 80009d4:	4b28      	ldr	r3, [pc, #160]	; (8000a78 <fsm_run2+0xdc>)
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	4618      	mov	r0, r3
 80009da:	f000 fb1f 	bl	800101c <settimer2>
		break;
 80009de:	e045      	b.n	8000a6c <fsm_run2+0xd0>
	case auto_red:
		turn_on2(0);
 80009e0:	2000      	movs	r0, #0
 80009e2:	f000 f8c5 	bl	8000b70 <turn_on2>
		if(timer2_flag==1)
 80009e6:	4b25      	ldr	r3, [pc, #148]	; (8000a7c <fsm_run2+0xe0>)
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	2b01      	cmp	r3, #1
 80009ec:	d139      	bne.n	8000a62 <fsm_run2+0xc6>
		{
			status2=auto_green;
 80009ee:	4b20      	ldr	r3, [pc, #128]	; (8000a70 <fsm_run2+0xd4>)
 80009f0:	2202      	movs	r2, #2
 80009f2:	601a      	str	r2, [r3, #0]
			duration2=timer2+50;
 80009f4:	4b1f      	ldr	r3, [pc, #124]	; (8000a74 <fsm_run2+0xd8>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	3332      	adds	r3, #50	; 0x32
 80009fa:	4a1f      	ldr	r2, [pc, #124]	; (8000a78 <fsm_run2+0xdc>)
 80009fc:	6013      	str	r3, [r2, #0]
			settimer2(duration2);
 80009fe:	4b1e      	ldr	r3, [pc, #120]	; (8000a78 <fsm_run2+0xdc>)
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	4618      	mov	r0, r3
 8000a04:	f000 fb0a 	bl	800101c <settimer2>
		}
		break;
 8000a08:	e02b      	b.n	8000a62 <fsm_run2+0xc6>
	case auto_green :
		turn_on2(1);
 8000a0a:	2001      	movs	r0, #1
 8000a0c:	f000 f8b0 	bl	8000b70 <turn_on2>
		if(timer2_flag==1)
 8000a10:	4b1a      	ldr	r3, [pc, #104]	; (8000a7c <fsm_run2+0xe0>)
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	2b01      	cmp	r3, #1
 8000a16:	d126      	bne.n	8000a66 <fsm_run2+0xca>
		{
			status2=auto_yellow;
 8000a18:	4b15      	ldr	r3, [pc, #84]	; (8000a70 <fsm_run2+0xd4>)
 8000a1a:	2203      	movs	r2, #3
 8000a1c:	601a      	str	r2, [r3, #0]
			duration2=timer3+50;
 8000a1e:	4b18      	ldr	r3, [pc, #96]	; (8000a80 <fsm_run2+0xe4>)
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	3332      	adds	r3, #50	; 0x32
 8000a24:	4a14      	ldr	r2, [pc, #80]	; (8000a78 <fsm_run2+0xdc>)
 8000a26:	6013      	str	r3, [r2, #0]
			settimer2(duration2);
 8000a28:	4b13      	ldr	r3, [pc, #76]	; (8000a78 <fsm_run2+0xdc>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	f000 faf5 	bl	800101c <settimer2>
		}
		break;
 8000a32:	e018      	b.n	8000a66 <fsm_run2+0xca>
	case auto_yellow :
		turn_on2(2);
 8000a34:	2002      	movs	r0, #2
 8000a36:	f000 f89b 	bl	8000b70 <turn_on2>
		if(timer2_flag==1)
 8000a3a:	4b10      	ldr	r3, [pc, #64]	; (8000a7c <fsm_run2+0xe0>)
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	2b01      	cmp	r3, #1
 8000a40:	d113      	bne.n	8000a6a <fsm_run2+0xce>
		{
			status2=auto_red;
 8000a42:	4b0b      	ldr	r3, [pc, #44]	; (8000a70 <fsm_run2+0xd4>)
 8000a44:	2201      	movs	r2, #1
 8000a46:	601a      	str	r2, [r3, #0]
			duration2=timer1+50;
 8000a48:	4b0e      	ldr	r3, [pc, #56]	; (8000a84 <fsm_run2+0xe8>)
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	3332      	adds	r3, #50	; 0x32
 8000a4e:	4a0a      	ldr	r2, [pc, #40]	; (8000a78 <fsm_run2+0xdc>)
 8000a50:	6013      	str	r3, [r2, #0]
			settimer2(duration2);
 8000a52:	4b09      	ldr	r3, [pc, #36]	; (8000a78 <fsm_run2+0xdc>)
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	4618      	mov	r0, r3
 8000a58:	f000 fae0 	bl	800101c <settimer2>
		}
		break;
 8000a5c:	e005      	b.n	8000a6a <fsm_run2+0xce>
	default :  break;
 8000a5e:	bf00      	nop
 8000a60:	e004      	b.n	8000a6c <fsm_run2+0xd0>
		break;
 8000a62:	bf00      	nop
 8000a64:	e002      	b.n	8000a6c <fsm_run2+0xd0>
		break;
 8000a66:	bf00      	nop
 8000a68:	e000      	b.n	8000a6c <fsm_run2+0xd0>
		break;
 8000a6a:	bf00      	nop
	}
}
 8000a6c:	bf00      	nop
 8000a6e:	bd80      	pop	{r7, pc}
 8000a70:	20000040 	.word	0x20000040
 8000a74:	20000004 	.word	0x20000004
 8000a78:	20000038 	.word	0x20000038
 8000a7c:	200000b8 	.word	0x200000b8
 8000a80:	20000008 	.word	0x20000008
 8000a84:	20000000 	.word	0x20000000

08000a88 <fsm_run>:

void fsm_run()
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	af00      	add	r7, sp, #0
	fsm_run1();
 8000a8c:	f7ff ff10 	bl	80008b0 <fsm_run1>
	fsm_run2();
 8000a90:	f7ff ff84 	bl	800099c <fsm_run2>
}
 8000a94:	bf00      	nop
 8000a96:	bd80      	pop	{r7, pc}

08000a98 <turn_off>:
 */

#include "fsm_auto_help.h"

void turn_off()
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(led_red1_GPIO_Port, led_red1_Pin, SET);
 8000a9c:	2201      	movs	r2, #1
 8000a9e:	2101      	movs	r1, #1
 8000aa0:	480e      	ldr	r0, [pc, #56]	; (8000adc <turn_off+0x44>)
 8000aa2:	f001 f9c0 	bl	8001e26 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(led_green1_GPIO_Port, led_green1_Pin, SET);
 8000aa6:	2201      	movs	r2, #1
 8000aa8:	2102      	movs	r1, #2
 8000aaa:	480c      	ldr	r0, [pc, #48]	; (8000adc <turn_off+0x44>)
 8000aac:	f001 f9bb 	bl	8001e26 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(led_yellow1_GPIO_Port, led_yellow1_Pin, SET);
 8000ab0:	2201      	movs	r2, #1
 8000ab2:	2104      	movs	r1, #4
 8000ab4:	4809      	ldr	r0, [pc, #36]	; (8000adc <turn_off+0x44>)
 8000ab6:	f001 f9b6 	bl	8001e26 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(led_red2_GPIO_Port, led_red2_Pin, SET);
 8000aba:	2201      	movs	r2, #1
 8000abc:	2108      	movs	r1, #8
 8000abe:	4807      	ldr	r0, [pc, #28]	; (8000adc <turn_off+0x44>)
 8000ac0:	f001 f9b1 	bl	8001e26 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(led_green2_GPIO_Port, led_green2_Pin, SET);
 8000ac4:	2201      	movs	r2, #1
 8000ac6:	2110      	movs	r1, #16
 8000ac8:	4804      	ldr	r0, [pc, #16]	; (8000adc <turn_off+0x44>)
 8000aca:	f001 f9ac 	bl	8001e26 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(led_yellow2_GPIO_Port, led_yellow2_Pin, SET);
 8000ace:	2201      	movs	r2, #1
 8000ad0:	2120      	movs	r1, #32
 8000ad2:	4802      	ldr	r0, [pc, #8]	; (8000adc <turn_off+0x44>)
 8000ad4:	f001 f9a7 	bl	8001e26 <HAL_GPIO_WritePin>
}
 8000ad8:	bf00      	nop
 8000ada:	bd80      	pop	{r7, pc}
 8000adc:	40010800 	.word	0x40010800

08000ae0 <turn_on>:

void turn_on(int index)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b082      	sub	sp, #8
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
	switch (index)
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	2b02      	cmp	r3, #2
 8000aec:	d029      	beq.n	8000b42 <turn_on+0x62>
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	2b02      	cmp	r3, #2
 8000af2:	dc36      	bgt.n	8000b62 <turn_on+0x82>
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d003      	beq.n	8000b02 <turn_on+0x22>
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	2b01      	cmp	r3, #1
 8000afe:	d010      	beq.n	8000b22 <turn_on+0x42>
	case 2 :
		HAL_GPIO_WritePin(led_red1_GPIO_Port, led_red1_Pin, SET);
		HAL_GPIO_WritePin(led_green1_GPIO_Port, led_green1_Pin, SET);
		HAL_GPIO_WritePin(led_yellow1_GPIO_Port, led_yellow1_Pin, RESET);
		break ;
	default : break;
 8000b00:	e02f      	b.n	8000b62 <turn_on+0x82>
		HAL_GPIO_WritePin(led_red1_GPIO_Port, led_red1_Pin, RESET);
 8000b02:	2200      	movs	r2, #0
 8000b04:	2101      	movs	r1, #1
 8000b06:	4819      	ldr	r0, [pc, #100]	; (8000b6c <turn_on+0x8c>)
 8000b08:	f001 f98d 	bl	8001e26 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(led_green1_GPIO_Port, led_green1_Pin, SET);
 8000b0c:	2201      	movs	r2, #1
 8000b0e:	2102      	movs	r1, #2
 8000b10:	4816      	ldr	r0, [pc, #88]	; (8000b6c <turn_on+0x8c>)
 8000b12:	f001 f988 	bl	8001e26 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(led_yellow1_GPIO_Port, led_yellow1_Pin, SET);
 8000b16:	2201      	movs	r2, #1
 8000b18:	2104      	movs	r1, #4
 8000b1a:	4814      	ldr	r0, [pc, #80]	; (8000b6c <turn_on+0x8c>)
 8000b1c:	f001 f983 	bl	8001e26 <HAL_GPIO_WritePin>
		break ;
 8000b20:	e020      	b.n	8000b64 <turn_on+0x84>
		HAL_GPIO_WritePin(led_red1_GPIO_Port, led_red1_Pin, SET);
 8000b22:	2201      	movs	r2, #1
 8000b24:	2101      	movs	r1, #1
 8000b26:	4811      	ldr	r0, [pc, #68]	; (8000b6c <turn_on+0x8c>)
 8000b28:	f001 f97d 	bl	8001e26 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(led_green1_GPIO_Port, led_green1_Pin, RESET);
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	2102      	movs	r1, #2
 8000b30:	480e      	ldr	r0, [pc, #56]	; (8000b6c <turn_on+0x8c>)
 8000b32:	f001 f978 	bl	8001e26 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(led_yellow1_GPIO_Port, led_yellow1_Pin, SET);
 8000b36:	2201      	movs	r2, #1
 8000b38:	2104      	movs	r1, #4
 8000b3a:	480c      	ldr	r0, [pc, #48]	; (8000b6c <turn_on+0x8c>)
 8000b3c:	f001 f973 	bl	8001e26 <HAL_GPIO_WritePin>
		break;
 8000b40:	e010      	b.n	8000b64 <turn_on+0x84>
		HAL_GPIO_WritePin(led_red1_GPIO_Port, led_red1_Pin, SET);
 8000b42:	2201      	movs	r2, #1
 8000b44:	2101      	movs	r1, #1
 8000b46:	4809      	ldr	r0, [pc, #36]	; (8000b6c <turn_on+0x8c>)
 8000b48:	f001 f96d 	bl	8001e26 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(led_green1_GPIO_Port, led_green1_Pin, SET);
 8000b4c:	2201      	movs	r2, #1
 8000b4e:	2102      	movs	r1, #2
 8000b50:	4806      	ldr	r0, [pc, #24]	; (8000b6c <turn_on+0x8c>)
 8000b52:	f001 f968 	bl	8001e26 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(led_yellow1_GPIO_Port, led_yellow1_Pin, RESET);
 8000b56:	2200      	movs	r2, #0
 8000b58:	2104      	movs	r1, #4
 8000b5a:	4804      	ldr	r0, [pc, #16]	; (8000b6c <turn_on+0x8c>)
 8000b5c:	f001 f963 	bl	8001e26 <HAL_GPIO_WritePin>
		break ;
 8000b60:	e000      	b.n	8000b64 <turn_on+0x84>
	default : break;
 8000b62:	bf00      	nop
	}
}
 8000b64:	bf00      	nop
 8000b66:	3708      	adds	r7, #8
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd80      	pop	{r7, pc}
 8000b6c:	40010800 	.word	0x40010800

08000b70 <turn_on2>:

void turn_on2(int index)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b082      	sub	sp, #8
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
	switch (index)
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	2b02      	cmp	r3, #2
 8000b7c:	d029      	beq.n	8000bd2 <turn_on2+0x62>
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	2b02      	cmp	r3, #2
 8000b82:	dc36      	bgt.n	8000bf2 <turn_on2+0x82>
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d003      	beq.n	8000b92 <turn_on2+0x22>
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	2b01      	cmp	r3, #1
 8000b8e:	d010      	beq.n	8000bb2 <turn_on2+0x42>
	case 2 :
		HAL_GPIO_WritePin(led_red2_GPIO_Port, led_red2_Pin, SET);
		HAL_GPIO_WritePin(led_green2_GPIO_Port, led_green2_Pin, SET);
		HAL_GPIO_WritePin(led_yellow2_GPIO_Port, led_yellow2_Pin, RESET);
		break ;
	default : break;
 8000b90:	e02f      	b.n	8000bf2 <turn_on2+0x82>
		HAL_GPIO_WritePin(led_red2_GPIO_Port, led_red2_Pin, RESET);
 8000b92:	2200      	movs	r2, #0
 8000b94:	2108      	movs	r1, #8
 8000b96:	4819      	ldr	r0, [pc, #100]	; (8000bfc <turn_on2+0x8c>)
 8000b98:	f001 f945 	bl	8001e26 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(led_green2_GPIO_Port, led_green2_Pin, SET);
 8000b9c:	2201      	movs	r2, #1
 8000b9e:	2110      	movs	r1, #16
 8000ba0:	4816      	ldr	r0, [pc, #88]	; (8000bfc <turn_on2+0x8c>)
 8000ba2:	f001 f940 	bl	8001e26 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(led_yellow2_GPIO_Port, led_yellow2_Pin, SET);
 8000ba6:	2201      	movs	r2, #1
 8000ba8:	2120      	movs	r1, #32
 8000baa:	4814      	ldr	r0, [pc, #80]	; (8000bfc <turn_on2+0x8c>)
 8000bac:	f001 f93b 	bl	8001e26 <HAL_GPIO_WritePin>
		break ;
 8000bb0:	e020      	b.n	8000bf4 <turn_on2+0x84>
		HAL_GPIO_WritePin(led_red2_GPIO_Port, led_red2_Pin, SET);
 8000bb2:	2201      	movs	r2, #1
 8000bb4:	2108      	movs	r1, #8
 8000bb6:	4811      	ldr	r0, [pc, #68]	; (8000bfc <turn_on2+0x8c>)
 8000bb8:	f001 f935 	bl	8001e26 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(led_green2_GPIO_Port, led_green2_Pin, RESET);
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	2110      	movs	r1, #16
 8000bc0:	480e      	ldr	r0, [pc, #56]	; (8000bfc <turn_on2+0x8c>)
 8000bc2:	f001 f930 	bl	8001e26 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(led_yellow2_GPIO_Port, led_yellow2_Pin, SET);
 8000bc6:	2201      	movs	r2, #1
 8000bc8:	2120      	movs	r1, #32
 8000bca:	480c      	ldr	r0, [pc, #48]	; (8000bfc <turn_on2+0x8c>)
 8000bcc:	f001 f92b 	bl	8001e26 <HAL_GPIO_WritePin>
		break;
 8000bd0:	e010      	b.n	8000bf4 <turn_on2+0x84>
		HAL_GPIO_WritePin(led_red2_GPIO_Port, led_red2_Pin, SET);
 8000bd2:	2201      	movs	r2, #1
 8000bd4:	2108      	movs	r1, #8
 8000bd6:	4809      	ldr	r0, [pc, #36]	; (8000bfc <turn_on2+0x8c>)
 8000bd8:	f001 f925 	bl	8001e26 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(led_green2_GPIO_Port, led_green2_Pin, SET);
 8000bdc:	2201      	movs	r2, #1
 8000bde:	2110      	movs	r1, #16
 8000be0:	4806      	ldr	r0, [pc, #24]	; (8000bfc <turn_on2+0x8c>)
 8000be2:	f001 f920 	bl	8001e26 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(led_yellow2_GPIO_Port, led_yellow2_Pin, RESET);
 8000be6:	2200      	movs	r2, #0
 8000be8:	2120      	movs	r1, #32
 8000bea:	4804      	ldr	r0, [pc, #16]	; (8000bfc <turn_on2+0x8c>)
 8000bec:	f001 f91b 	bl	8001e26 <HAL_GPIO_WritePin>
		break ;
 8000bf0:	e000      	b.n	8000bf4 <turn_on2+0x84>
	default : break;
 8000bf2:	bf00      	nop
	}
}
 8000bf4:	bf00      	nop
 8000bf6:	3708      	adds	r7, #8
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bd80      	pop	{r7, pc}
 8000bfc:	40010800 	.word	0x40010800

08000c00 <fsm_for_input_processing>:
#include "input_processing.h"
#include "input_reading.h"

enum ButtonState buttonState = BUTTON_RELEASED;

void fsm_for_input_processing(void) {
 8000c00:	b580      	push	{r7, lr}
 8000c02:	af00      	add	r7, sp, #0
    switch (buttonState) {
 8000c04:	4b1c      	ldr	r3, [pc, #112]	; (8000c78 <fsm_for_input_processing+0x78>)
 8000c06:	781b      	ldrb	r3, [r3, #0]
 8000c08:	2b02      	cmp	r3, #2
 8000c0a:	d024      	beq.n	8000c56 <fsm_for_input_processing+0x56>
 8000c0c:	2b02      	cmp	r3, #2
 8000c0e:	dc31      	bgt.n	8000c74 <fsm_for_input_processing+0x74>
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d002      	beq.n	8000c1a <fsm_for_input_processing+0x1a>
 8000c14:	2b01      	cmp	r3, #1
 8000c16:	d00a      	beq.n	8000c2e <fsm_for_input_processing+0x2e>
                buttonState = BUTTON_RELEASED;
            }
            // TODO: Add code for handling button press more than 1 second
            break;
    }
}
 8000c18:	e02c      	b.n	8000c74 <fsm_for_input_processing+0x74>
            if (is_button_pressed(0)) {
 8000c1a:	2000      	movs	r0, #0
 8000c1c:	f000 f88c 	bl	8000d38 <is_button_pressed>
 8000c20:	4603      	mov	r3, r0
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d021      	beq.n	8000c6a <fsm_for_input_processing+0x6a>
                buttonState = BUTTON_PRESSED;
 8000c26:	4b14      	ldr	r3, [pc, #80]	; (8000c78 <fsm_for_input_processing+0x78>)
 8000c28:	2201      	movs	r2, #1
 8000c2a:	701a      	strb	r2, [r3, #0]
            break;
 8000c2c:	e01d      	b.n	8000c6a <fsm_for_input_processing+0x6a>
            if (!is_button_pressed(0)) {
 8000c2e:	2000      	movs	r0, #0
 8000c30:	f000 f882 	bl	8000d38 <is_button_pressed>
 8000c34:	4603      	mov	r3, r0
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d103      	bne.n	8000c42 <fsm_for_input_processing+0x42>
                buttonState = BUTTON_RELEASED;
 8000c3a:	4b0f      	ldr	r3, [pc, #60]	; (8000c78 <fsm_for_input_processing+0x78>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	701a      	strb	r2, [r3, #0]
            break;
 8000c40:	e015      	b.n	8000c6e <fsm_for_input_processing+0x6e>
                if (is_button_pressed_1s(0)) {
 8000c42:	2000      	movs	r0, #0
 8000c44:	f000 f892 	bl	8000d6c <is_button_pressed_1s>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d00f      	beq.n	8000c6e <fsm_for_input_processing+0x6e>
                    buttonState = BUTTON_PRESSED_MORE_THAN_1_SECOND;
 8000c4e:	4b0a      	ldr	r3, [pc, #40]	; (8000c78 <fsm_for_input_processing+0x78>)
 8000c50:	2202      	movs	r2, #2
 8000c52:	701a      	strb	r2, [r3, #0]
            break;
 8000c54:	e00b      	b.n	8000c6e <fsm_for_input_processing+0x6e>
            if (!is_button_pressed(0)) {
 8000c56:	2000      	movs	r0, #0
 8000c58:	f000 f86e 	bl	8000d38 <is_button_pressed>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d107      	bne.n	8000c72 <fsm_for_input_processing+0x72>
                buttonState = BUTTON_RELEASED;
 8000c62:	4b05      	ldr	r3, [pc, #20]	; (8000c78 <fsm_for_input_processing+0x78>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	701a      	strb	r2, [r3, #0]
            break;
 8000c68:	e003      	b.n	8000c72 <fsm_for_input_processing+0x72>
            break;
 8000c6a:	bf00      	nop
 8000c6c:	e002      	b.n	8000c74 <fsm_for_input_processing+0x74>
            break;
 8000c6e:	bf00      	nop
 8000c70:	e000      	b.n	8000c74 <fsm_for_input_processing+0x74>
            break;
 8000c72:	bf00      	nop
}
 8000c74:	bf00      	nop
 8000c76:	bd80      	pop	{r7, pc}
 8000c78:	2000004c 	.word	0x2000004c

08000c7c <button_reading>:

static uint16_t counterForButtonPress1s[N0_OF_BUTTONS];


void button_reading(void)
{
 8000c7c:	b590      	push	{r4, r7, lr}
 8000c7e:	b083      	sub	sp, #12
 8000c80:	af00      	add	r7, sp, #0
    for (char i = 0; i < N0_OF_BUTTONS; i++)
 8000c82:	2300      	movs	r3, #0
 8000c84:	71fb      	strb	r3, [r7, #7]
 8000c86:	e043      	b.n	8000d10 <button_reading+0x94>
    {
        debounceButtonBuffer2[i] = debounceButtonBuffer1[i];
 8000c88:	79fa      	ldrb	r2, [r7, #7]
 8000c8a:	79fb      	ldrb	r3, [r7, #7]
 8000c8c:	4924      	ldr	r1, [pc, #144]	; (8000d20 <button_reading+0xa4>)
 8000c8e:	5c89      	ldrb	r1, [r1, r2]
 8000c90:	4a24      	ldr	r2, [pc, #144]	; (8000d24 <button_reading+0xa8>)
 8000c92:	54d1      	strb	r1, [r2, r3]
        debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(button1_GPIO_Port, button1_Pin);
 8000c94:	79fc      	ldrb	r4, [r7, #7]
 8000c96:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c9a:	4823      	ldr	r0, [pc, #140]	; (8000d28 <button_reading+0xac>)
 8000c9c:	f001 f8ac 	bl	8001df8 <HAL_GPIO_ReadPin>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	461a      	mov	r2, r3
 8000ca4:	4b1e      	ldr	r3, [pc, #120]	; (8000d20 <button_reading+0xa4>)
 8000ca6:	551a      	strb	r2, [r3, r4]

        if (debounceButtonBuffer1[i] == debounceButtonBuffer2[i])
 8000ca8:	79fb      	ldrb	r3, [r7, #7]
 8000caa:	4a1d      	ldr	r2, [pc, #116]	; (8000d20 <button_reading+0xa4>)
 8000cac:	5cd2      	ldrb	r2, [r2, r3]
 8000cae:	79fb      	ldrb	r3, [r7, #7]
 8000cb0:	491c      	ldr	r1, [pc, #112]	; (8000d24 <button_reading+0xa8>)
 8000cb2:	5ccb      	ldrb	r3, [r1, r3]
 8000cb4:	429a      	cmp	r2, r3
 8000cb6:	d128      	bne.n	8000d0a <button_reading+0x8e>
        {
            buttonBuffer[i] = debounceButtonBuffer1[i];
 8000cb8:	79fa      	ldrb	r2, [r7, #7]
 8000cba:	79fb      	ldrb	r3, [r7, #7]
 8000cbc:	4918      	ldr	r1, [pc, #96]	; (8000d20 <button_reading+0xa4>)
 8000cbe:	5c89      	ldrb	r1, [r1, r2]
 8000cc0:	4a1a      	ldr	r2, [pc, #104]	; (8000d2c <button_reading+0xb0>)
 8000cc2:	54d1      	strb	r1, [r2, r3]

            if (buttonBuffer[i] == BUTTON_IS_PRESSED)
 8000cc4:	79fb      	ldrb	r3, [r7, #7]
 8000cc6:	4a19      	ldr	r2, [pc, #100]	; (8000d2c <button_reading+0xb0>)
 8000cc8:	5cd3      	ldrb	r3, [r2, r3]
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d114      	bne.n	8000cf8 <button_reading+0x7c>
            {
                if (counterForButtonPress1s[i] < DURATION_FOR_AUTO_INCREASING)
 8000cce:	79fb      	ldrb	r3, [r7, #7]
 8000cd0:	4a17      	ldr	r2, [pc, #92]	; (8000d30 <button_reading+0xb4>)
 8000cd2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000cd6:	2b63      	cmp	r3, #99	; 0x63
 8000cd8:	d809      	bhi.n	8000cee <button_reading+0x72>
                {
                    counterForButtonPress1s[i]++;
 8000cda:	79fb      	ldrb	r3, [r7, #7]
 8000cdc:	4a14      	ldr	r2, [pc, #80]	; (8000d30 <button_reading+0xb4>)
 8000cde:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000ce2:	3201      	adds	r2, #1
 8000ce4:	b291      	uxth	r1, r2
 8000ce6:	4a12      	ldr	r2, [pc, #72]	; (8000d30 <button_reading+0xb4>)
 8000ce8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000cec:	e00d      	b.n	8000d0a <button_reading+0x8e>
                } else
                {
                    flagForButtonPress1s[i] = 1;
 8000cee:	79fb      	ldrb	r3, [r7, #7]
 8000cf0:	4a10      	ldr	r2, [pc, #64]	; (8000d34 <button_reading+0xb8>)
 8000cf2:	2101      	movs	r1, #1
 8000cf4:	54d1      	strb	r1, [r2, r3]
 8000cf6:	e008      	b.n	8000d0a <button_reading+0x8e>
                }
            } else
            {
                counterForButtonPress1s[i] = 0;
 8000cf8:	79fb      	ldrb	r3, [r7, #7]
 8000cfa:	4a0d      	ldr	r2, [pc, #52]	; (8000d30 <button_reading+0xb4>)
 8000cfc:	2100      	movs	r1, #0
 8000cfe:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
                flagForButtonPress1s[i] = 0;
 8000d02:	79fb      	ldrb	r3, [r7, #7]
 8000d04:	4a0b      	ldr	r2, [pc, #44]	; (8000d34 <button_reading+0xb8>)
 8000d06:	2100      	movs	r1, #0
 8000d08:	54d1      	strb	r1, [r2, r3]
    for (char i = 0; i < N0_OF_BUTTONS; i++)
 8000d0a:	79fb      	ldrb	r3, [r7, #7]
 8000d0c:	3301      	adds	r3, #1
 8000d0e:	71fb      	strb	r3, [r7, #7]
 8000d10:	79fb      	ldrb	r3, [r7, #7]
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d0b8      	beq.n	8000c88 <button_reading+0xc>
            }
        }
    }
}
 8000d16:	bf00      	nop
 8000d18:	bf00      	nop
 8000d1a:	370c      	adds	r7, #12
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bd90      	pop	{r4, r7, pc}
 8000d20:	20000054 	.word	0x20000054
 8000d24:	20000058 	.word	0x20000058
 8000d28:	40010800 	.word	0x40010800
 8000d2c:	20000050 	.word	0x20000050
 8000d30:	20000060 	.word	0x20000060
 8000d34:	2000005c 	.word	0x2000005c

08000d38 <is_button_pressed>:
unsigned char is_button_pressed(uint8_t index)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	b083      	sub	sp, #12
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	4603      	mov	r3, r0
 8000d40:	71fb      	strb	r3, [r7, #7]
    if (index >= N0_OF_BUTTONS)
 8000d42:	79fb      	ldrb	r3, [r7, #7]
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d001      	beq.n	8000d4c <is_button_pressed+0x14>
    {
        return 0;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	e007      	b.n	8000d5c <is_button_pressed+0x24>
    }
    return (buttonBuffer[index] == BUTTON_IS_PRESSED);
 8000d4c:	79fb      	ldrb	r3, [r7, #7]
 8000d4e:	4a06      	ldr	r2, [pc, #24]	; (8000d68 <is_button_pressed+0x30>)
 8000d50:	5cd3      	ldrb	r3, [r2, r3]
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	bf0c      	ite	eq
 8000d56:	2301      	moveq	r3, #1
 8000d58:	2300      	movne	r3, #0
 8000d5a:	b2db      	uxtb	r3, r3
}
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	370c      	adds	r7, #12
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bc80      	pop	{r7}
 8000d64:	4770      	bx	lr
 8000d66:	bf00      	nop
 8000d68:	20000050 	.word	0x20000050

08000d6c <is_button_pressed_1s>:

unsigned char is_button_pressed_1s(unsigned char index)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	b083      	sub	sp, #12
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	4603      	mov	r3, r0
 8000d74:	71fb      	strb	r3, [r7, #7]
    if (index >= N0_OF_BUTTONS)
 8000d76:	79fb      	ldrb	r3, [r7, #7]
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d001      	beq.n	8000d80 <is_button_pressed_1s+0x14>
    {
        return 0xFF;
 8000d7c:	23ff      	movs	r3, #255	; 0xff
 8000d7e:	e007      	b.n	8000d90 <is_button_pressed_1s+0x24>
    }
    return (flagForButtonPress1s[index] == 1);
 8000d80:	79fb      	ldrb	r3, [r7, #7]
 8000d82:	4a06      	ldr	r2, [pc, #24]	; (8000d9c <is_button_pressed_1s+0x30>)
 8000d84:	5cd3      	ldrb	r3, [r2, r3]
 8000d86:	2b01      	cmp	r3, #1
 8000d88:	bf0c      	ite	eq
 8000d8a:	2301      	moveq	r3, #1
 8000d8c:	2300      	movne	r3, #0
 8000d8e:	b2db      	uxtb	r3, r3
}
 8000d90:	4618      	mov	r0, r3
 8000d92:	370c      	adds	r7, #12
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bc80      	pop	{r7}
 8000d98:	4770      	bx	lr
 8000d9a:	bf00      	nop
 8000d9c:	2000005c 	.word	0x2000005c

08000da0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000da4:	f000 fd3c 	bl	8001820 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000da8:	f000 f826 	bl	8000df8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000dac:	f000 f8ac 	bl	8000f08 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000db0:	f000 f85e 	bl	8000e70 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000db4:	480b      	ldr	r0, [pc, #44]	; (8000de4 <main+0x44>)
 8000db6:	f001 fc7d 	bl	80026b4 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  status1=INIT;
 8000dba:	4b0b      	ldr	r3, [pc, #44]	; (8000de8 <main+0x48>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	601a      	str	r2, [r3, #0]
  status2=INIT;
 8000dc0:	4b0a      	ldr	r3, [pc, #40]	; (8000dec <main+0x4c>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	601a      	str	r2, [r3, #0]
  status3=INIT;
 8000dc6:	4b0a      	ldr	r3, [pc, #40]	; (8000df0 <main+0x50>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	601a      	str	r2, [r3, #0]
  status4=INIT;
 8000dcc:	4b09      	ldr	r3, [pc, #36]	; (8000df4 <main+0x54>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	601a      	str	r2, [r3, #0]
  while (1)
  {
    /* USER CODE END WHILE */
	fsm_run();
 8000dd2:	f7ff fe59 	bl	8000a88 <fsm_run>
    display_traffic1();
 8000dd6:	f000 faad 	bl	8001334 <display_traffic1>
    display_traffic2();
 8000dda:	f000 fbe9 	bl	80015b0 <display_traffic2>
    fsm_for_input_processing () ;
 8000dde:	f7ff ff0f 	bl	8000c00 <fsm_for_input_processing>
  {
 8000de2:	e7f6      	b.n	8000dd2 <main+0x32>
 8000de4:	20000064 	.word	0x20000064
 8000de8:	2000003c 	.word	0x2000003c
 8000dec:	20000040 	.word	0x20000040
 8000df0:	20000044 	.word	0x20000044
 8000df4:	20000048 	.word	0x20000048

08000df8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b090      	sub	sp, #64	; 0x40
 8000dfc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dfe:	f107 0318 	add.w	r3, r7, #24
 8000e02:	2228      	movs	r2, #40	; 0x28
 8000e04:	2100      	movs	r1, #0
 8000e06:	4618      	mov	r0, r3
 8000e08:	f001 ffec 	bl	8002de4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e0c:	1d3b      	adds	r3, r7, #4
 8000e0e:	2200      	movs	r2, #0
 8000e10:	601a      	str	r2, [r3, #0]
 8000e12:	605a      	str	r2, [r3, #4]
 8000e14:	609a      	str	r2, [r3, #8]
 8000e16:	60da      	str	r2, [r3, #12]
 8000e18:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e1a:	2302      	movs	r3, #2
 8000e1c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e1e:	2301      	movs	r3, #1
 8000e20:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e22:	2310      	movs	r3, #16
 8000e24:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000e26:	2300      	movs	r3, #0
 8000e28:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e2a:	f107 0318 	add.w	r3, r7, #24
 8000e2e:	4618      	mov	r0, r3
 8000e30:	f001 f812 	bl	8001e58 <HAL_RCC_OscConfig>
 8000e34:	4603      	mov	r3, r0
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d001      	beq.n	8000e3e <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000e3a:	f000 f8d5 	bl	8000fe8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e3e:	230f      	movs	r3, #15
 8000e40:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000e42:	2300      	movs	r3, #0
 8000e44:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e46:	2300      	movs	r3, #0
 8000e48:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000e52:	1d3b      	adds	r3, r7, #4
 8000e54:	2100      	movs	r1, #0
 8000e56:	4618      	mov	r0, r3
 8000e58:	f001 fa80 	bl	800235c <HAL_RCC_ClockConfig>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d001      	beq.n	8000e66 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000e62:	f000 f8c1 	bl	8000fe8 <Error_Handler>
  }
}
 8000e66:	bf00      	nop
 8000e68:	3740      	adds	r7, #64	; 0x40
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}
	...

08000e70 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b086      	sub	sp, #24
 8000e74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e76:	f107 0308 	add.w	r3, r7, #8
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	601a      	str	r2, [r3, #0]
 8000e7e:	605a      	str	r2, [r3, #4]
 8000e80:	609a      	str	r2, [r3, #8]
 8000e82:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e84:	463b      	mov	r3, r7
 8000e86:	2200      	movs	r2, #0
 8000e88:	601a      	str	r2, [r3, #0]
 8000e8a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000e8c:	4b1d      	ldr	r3, [pc, #116]	; (8000f04 <MX_TIM2_Init+0x94>)
 8000e8e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e92:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000e94:	4b1b      	ldr	r3, [pc, #108]	; (8000f04 <MX_TIM2_Init+0x94>)
 8000e96:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000e9a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e9c:	4b19      	ldr	r3, [pc, #100]	; (8000f04 <MX_TIM2_Init+0x94>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000ea2:	4b18      	ldr	r3, [pc, #96]	; (8000f04 <MX_TIM2_Init+0x94>)
 8000ea4:	2209      	movs	r2, #9
 8000ea6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ea8:	4b16      	ldr	r3, [pc, #88]	; (8000f04 <MX_TIM2_Init+0x94>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000eae:	4b15      	ldr	r3, [pc, #84]	; (8000f04 <MX_TIM2_Init+0x94>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000eb4:	4813      	ldr	r0, [pc, #76]	; (8000f04 <MX_TIM2_Init+0x94>)
 8000eb6:	f001 fbad 	bl	8002614 <HAL_TIM_Base_Init>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d001      	beq.n	8000ec4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000ec0:	f000 f892 	bl	8000fe8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ec4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ec8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000eca:	f107 0308 	add.w	r3, r7, #8
 8000ece:	4619      	mov	r1, r3
 8000ed0:	480c      	ldr	r0, [pc, #48]	; (8000f04 <MX_TIM2_Init+0x94>)
 8000ed2:	f001 fd43 	bl	800295c <HAL_TIM_ConfigClockSource>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d001      	beq.n	8000ee0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000edc:	f000 f884 	bl	8000fe8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000ee8:	463b      	mov	r3, r7
 8000eea:	4619      	mov	r1, r3
 8000eec:	4805      	ldr	r0, [pc, #20]	; (8000f04 <MX_TIM2_Init+0x94>)
 8000eee:	f001 ff0f 	bl	8002d10 <HAL_TIMEx_MasterConfigSynchronization>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d001      	beq.n	8000efc <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000ef8:	f000 f876 	bl	8000fe8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000efc:	bf00      	nop
 8000efe:	3718      	adds	r7, #24
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd80      	pop	{r7, pc}
 8000f04:	20000064 	.word	0x20000064

08000f08 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b086      	sub	sp, #24
 8000f0c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f0e:	f107 0308 	add.w	r3, r7, #8
 8000f12:	2200      	movs	r2, #0
 8000f14:	601a      	str	r2, [r3, #0]
 8000f16:	605a      	str	r2, [r3, #4]
 8000f18:	609a      	str	r2, [r3, #8]
 8000f1a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f1c:	4b29      	ldr	r3, [pc, #164]	; (8000fc4 <MX_GPIO_Init+0xbc>)
 8000f1e:	699b      	ldr	r3, [r3, #24]
 8000f20:	4a28      	ldr	r2, [pc, #160]	; (8000fc4 <MX_GPIO_Init+0xbc>)
 8000f22:	f043 0304 	orr.w	r3, r3, #4
 8000f26:	6193      	str	r3, [r2, #24]
 8000f28:	4b26      	ldr	r3, [pc, #152]	; (8000fc4 <MX_GPIO_Init+0xbc>)
 8000f2a:	699b      	ldr	r3, [r3, #24]
 8000f2c:	f003 0304 	and.w	r3, r3, #4
 8000f30:	607b      	str	r3, [r7, #4]
 8000f32:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f34:	4b23      	ldr	r3, [pc, #140]	; (8000fc4 <MX_GPIO_Init+0xbc>)
 8000f36:	699b      	ldr	r3, [r3, #24]
 8000f38:	4a22      	ldr	r2, [pc, #136]	; (8000fc4 <MX_GPIO_Init+0xbc>)
 8000f3a:	f043 0308 	orr.w	r3, r3, #8
 8000f3e:	6193      	str	r3, [r2, #24]
 8000f40:	4b20      	ldr	r3, [pc, #128]	; (8000fc4 <MX_GPIO_Init+0xbc>)
 8000f42:	699b      	ldr	r3, [r3, #24]
 8000f44:	f003 0308 	and.w	r3, r3, #8
 8000f48:	603b      	str	r3, [r7, #0]
 8000f4a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, led_red1_Pin|led_green1_Pin|led_yellow1_Pin|led_red2_Pin
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	f240 71bf 	movw	r1, #1983	; 0x7bf
 8000f52:	481d      	ldr	r0, [pc, #116]	; (8000fc8 <MX_GPIO_Init+0xc0>)
 8000f54:	f000 ff67 	bl	8001e26 <HAL_GPIO_WritePin>
                          |led_green2_Pin|led_yellow2_Pin|en0_Pin|en1_Pin
                          |en2_Pin|en3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, chan1a_Pin|chan1b_Pin|chan1c_Pin|chan2d_Pin
 8000f58:	2200      	movs	r2, #0
 8000f5a:	f643 71ff 	movw	r1, #16383	; 0x3fff
 8000f5e:	481b      	ldr	r0, [pc, #108]	; (8000fcc <MX_GPIO_Init+0xc4>)
 8000f60:	f000 ff61 	bl	8001e26 <HAL_GPIO_WritePin>
                          |chan2b_Pin|chan2c_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : led_red1_Pin led_green1_Pin led_yellow1_Pin led_red2_Pin
                           led_green2_Pin led_yellow2_Pin en0_Pin en1_Pin
                           en2_Pin en3_Pin */
  GPIO_InitStruct.Pin = led_red1_Pin|led_green1_Pin|led_yellow1_Pin|led_red2_Pin
 8000f64:	f240 73bf 	movw	r3, #1983	; 0x7bf
 8000f68:	60bb      	str	r3, [r7, #8]
                          |led_green2_Pin|led_yellow2_Pin|en0_Pin|en1_Pin
                          |en2_Pin|en3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f72:	2302      	movs	r3, #2
 8000f74:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f76:	f107 0308 	add.w	r3, r7, #8
 8000f7a:	4619      	mov	r1, r3
 8000f7c:	4812      	ldr	r0, [pc, #72]	; (8000fc8 <MX_GPIO_Init+0xc0>)
 8000f7e:	f000 fdbf 	bl	8001b00 <HAL_GPIO_Init>

  /*Configure GPIO pins : chan1a_Pin chan1b_Pin chan1c_Pin chan2d_Pin
                           chan2e_Pin chan2f_Pin chan2g_Pin chan1d_Pin
                           chan1e_Pin chan1f_Pin chan1g_Pin chan2a_Pin
                           chan2b_Pin chan2c_Pin */
  GPIO_InitStruct.Pin = chan1a_Pin|chan1b_Pin|chan1c_Pin|chan2d_Pin
 8000f82:	f643 73ff 	movw	r3, #16383	; 0x3fff
 8000f86:	60bb      	str	r3, [r7, #8]
                          |chan2e_Pin|chan2f_Pin|chan2g_Pin|chan1d_Pin
                          |chan1e_Pin|chan1f_Pin|chan1g_Pin|chan2a_Pin
                          |chan2b_Pin|chan2c_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f88:	2301      	movs	r3, #1
 8000f8a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f90:	2302      	movs	r3, #2
 8000f92:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f94:	f107 0308 	add.w	r3, r7, #8
 8000f98:	4619      	mov	r1, r3
 8000f9a:	480c      	ldr	r0, [pc, #48]	; (8000fcc <MX_GPIO_Init+0xc4>)
 8000f9c:	f000 fdb0 	bl	8001b00 <HAL_GPIO_Init>

  /*Configure GPIO pins : button1_Pin button2_Pin button3_Pin */
  GPIO_InitStruct.Pin = button1_Pin|button2_Pin|button3_Pin;
 8000fa0:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8000fa4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000faa:	2300      	movs	r3, #0
 8000fac:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fae:	f107 0308 	add.w	r3, r7, #8
 8000fb2:	4619      	mov	r1, r3
 8000fb4:	4804      	ldr	r0, [pc, #16]	; (8000fc8 <MX_GPIO_Init+0xc0>)
 8000fb6:	f000 fda3 	bl	8001b00 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000fba:	bf00      	nop
 8000fbc:	3718      	adds	r7, #24
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	40021000 	.word	0x40021000
 8000fc8:	40010800 	.word	0x40010800
 8000fcc:	40010c00 	.word	0x40010c00

08000fd0 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b082      	sub	sp, #8
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
	timerrun();
 8000fd8:	f000 f884 	bl	80010e4 <timerrun>
	button_reading();
 8000fdc:	f7ff fe4e 	bl	8000c7c <button_reading>
}
 8000fe0:	bf00      	nop
 8000fe2:	3708      	adds	r7, #8
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}

08000fe8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fec:	b672      	cpsid	i
}
 8000fee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ff0:	e7fe      	b.n	8000ff0 <Error_Handler+0x8>
	...

08000ff4 <settimer1>:
int timer5_flag=0;
int timer6_counter=0;
int timer6_flag=0;

void settimer1(int duration)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b083      	sub	sp, #12
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
	timer1_counter=duration;
 8000ffc:	4a05      	ldr	r2, [pc, #20]	; (8001014 <settimer1+0x20>)
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	6013      	str	r3, [r2, #0]
	timer1_flag=0;
 8001002:	4b05      	ldr	r3, [pc, #20]	; (8001018 <settimer1+0x24>)
 8001004:	2200      	movs	r2, #0
 8001006:	601a      	str	r2, [r3, #0]
}
 8001008:	bf00      	nop
 800100a:	370c      	adds	r7, #12
 800100c:	46bd      	mov	sp, r7
 800100e:	bc80      	pop	{r7}
 8001010:	4770      	bx	lr
 8001012:	bf00      	nop
 8001014:	200000ac 	.word	0x200000ac
 8001018:	200000b0 	.word	0x200000b0

0800101c <settimer2>:
void settimer2(int duration)
{
 800101c:	b480      	push	{r7}
 800101e:	b083      	sub	sp, #12
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
	timer2_counter=duration;
 8001024:	4a05      	ldr	r2, [pc, #20]	; (800103c <settimer2+0x20>)
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	6013      	str	r3, [r2, #0]
	timer2_flag=0;
 800102a:	4b05      	ldr	r3, [pc, #20]	; (8001040 <settimer2+0x24>)
 800102c:	2200      	movs	r2, #0
 800102e:	601a      	str	r2, [r3, #0]
}
 8001030:	bf00      	nop
 8001032:	370c      	adds	r7, #12
 8001034:	46bd      	mov	sp, r7
 8001036:	bc80      	pop	{r7}
 8001038:	4770      	bx	lr
 800103a:	bf00      	nop
 800103c:	200000b4 	.word	0x200000b4
 8001040:	200000b8 	.word	0x200000b8

08001044 <settimer3>:
void settimer3(int duration)
{
 8001044:	b480      	push	{r7}
 8001046:	b083      	sub	sp, #12
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
	timer3_counter=duration;
 800104c:	4a05      	ldr	r2, [pc, #20]	; (8001064 <settimer3+0x20>)
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	6013      	str	r3, [r2, #0]
	timer3_flag=0;
 8001052:	4b05      	ldr	r3, [pc, #20]	; (8001068 <settimer3+0x24>)
 8001054:	2200      	movs	r2, #0
 8001056:	601a      	str	r2, [r3, #0]
}
 8001058:	bf00      	nop
 800105a:	370c      	adds	r7, #12
 800105c:	46bd      	mov	sp, r7
 800105e:	bc80      	pop	{r7}
 8001060:	4770      	bx	lr
 8001062:	bf00      	nop
 8001064:	200000bc 	.word	0x200000bc
 8001068:	200000c0 	.word	0x200000c0

0800106c <settimer4>:
void settimer4(int duration)
{
 800106c:	b480      	push	{r7}
 800106e:	b083      	sub	sp, #12
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
	timer4_counter=duration;
 8001074:	4a05      	ldr	r2, [pc, #20]	; (800108c <settimer4+0x20>)
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	6013      	str	r3, [r2, #0]
	timer4_flag=0;
 800107a:	4b05      	ldr	r3, [pc, #20]	; (8001090 <settimer4+0x24>)
 800107c:	2200      	movs	r2, #0
 800107e:	601a      	str	r2, [r3, #0]
}
 8001080:	bf00      	nop
 8001082:	370c      	adds	r7, #12
 8001084:	46bd      	mov	sp, r7
 8001086:	bc80      	pop	{r7}
 8001088:	4770      	bx	lr
 800108a:	bf00      	nop
 800108c:	200000c4 	.word	0x200000c4
 8001090:	200000c8 	.word	0x200000c8

08001094 <settimer5>:
void settimer5(int duration)
{
 8001094:	b480      	push	{r7}
 8001096:	b083      	sub	sp, #12
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
	timer5_counter=duration;
 800109c:	4a05      	ldr	r2, [pc, #20]	; (80010b4 <settimer5+0x20>)
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	6013      	str	r3, [r2, #0]
	timer5_flag=0;
 80010a2:	4b05      	ldr	r3, [pc, #20]	; (80010b8 <settimer5+0x24>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	601a      	str	r2, [r3, #0]
}
 80010a8:	bf00      	nop
 80010aa:	370c      	adds	r7, #12
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bc80      	pop	{r7}
 80010b0:	4770      	bx	lr
 80010b2:	bf00      	nop
 80010b4:	200000cc 	.word	0x200000cc
 80010b8:	200000d0 	.word	0x200000d0

080010bc <settimer6>:
void settimer6(int duration)
{
 80010bc:	b480      	push	{r7}
 80010be:	b083      	sub	sp, #12
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
	timer6_counter=duration;
 80010c4:	4a05      	ldr	r2, [pc, #20]	; (80010dc <settimer6+0x20>)
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	6013      	str	r3, [r2, #0]
	timer6_flag=0;
 80010ca:	4b05      	ldr	r3, [pc, #20]	; (80010e0 <settimer6+0x24>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	601a      	str	r2, [r3, #0]
}
 80010d0:	bf00      	nop
 80010d2:	370c      	adds	r7, #12
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bc80      	pop	{r7}
 80010d8:	4770      	bx	lr
 80010da:	bf00      	nop
 80010dc:	200000d4 	.word	0x200000d4
 80010e0:	200000d8 	.word	0x200000d8

080010e4 <timerrun>:

void timerrun()
{
 80010e4:	b480      	push	{r7}
 80010e6:	af00      	add	r7, sp, #0
	if(timer1_counter>0)
 80010e8:	4b31      	ldr	r3, [pc, #196]	; (80011b0 <timerrun+0xcc>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	dd04      	ble.n	80010fa <timerrun+0x16>
	{
		timer1_counter--;
 80010f0:	4b2f      	ldr	r3, [pc, #188]	; (80011b0 <timerrun+0xcc>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	3b01      	subs	r3, #1
 80010f6:	4a2e      	ldr	r2, [pc, #184]	; (80011b0 <timerrun+0xcc>)
 80010f8:	6013      	str	r3, [r2, #0]
	}
	if(timer1_counter<=0)
 80010fa:	4b2d      	ldr	r3, [pc, #180]	; (80011b0 <timerrun+0xcc>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	2b00      	cmp	r3, #0
 8001100:	dc02      	bgt.n	8001108 <timerrun+0x24>
	{
		timer1_flag=1;
 8001102:	4b2c      	ldr	r3, [pc, #176]	; (80011b4 <timerrun+0xd0>)
 8001104:	2201      	movs	r2, #1
 8001106:	601a      	str	r2, [r3, #0]
	}
	if(timer2_counter>0)
 8001108:	4b2b      	ldr	r3, [pc, #172]	; (80011b8 <timerrun+0xd4>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	2b00      	cmp	r3, #0
 800110e:	dd04      	ble.n	800111a <timerrun+0x36>
	{
		timer2_counter--;
 8001110:	4b29      	ldr	r3, [pc, #164]	; (80011b8 <timerrun+0xd4>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	3b01      	subs	r3, #1
 8001116:	4a28      	ldr	r2, [pc, #160]	; (80011b8 <timerrun+0xd4>)
 8001118:	6013      	str	r3, [r2, #0]
	}
	if(timer2_counter<=0)
 800111a:	4b27      	ldr	r3, [pc, #156]	; (80011b8 <timerrun+0xd4>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	2b00      	cmp	r3, #0
 8001120:	dc02      	bgt.n	8001128 <timerrun+0x44>
	{
		timer2_flag=1;
 8001122:	4b26      	ldr	r3, [pc, #152]	; (80011bc <timerrun+0xd8>)
 8001124:	2201      	movs	r2, #1
 8001126:	601a      	str	r2, [r3, #0]
	}
	if(timer3_counter>0)
 8001128:	4b25      	ldr	r3, [pc, #148]	; (80011c0 <timerrun+0xdc>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	2b00      	cmp	r3, #0
 800112e:	dd04      	ble.n	800113a <timerrun+0x56>
	{
		timer3_counter--;
 8001130:	4b23      	ldr	r3, [pc, #140]	; (80011c0 <timerrun+0xdc>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	3b01      	subs	r3, #1
 8001136:	4a22      	ldr	r2, [pc, #136]	; (80011c0 <timerrun+0xdc>)
 8001138:	6013      	str	r3, [r2, #0]
	}
	if(timer3_counter<=0)
 800113a:	4b21      	ldr	r3, [pc, #132]	; (80011c0 <timerrun+0xdc>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	2b00      	cmp	r3, #0
 8001140:	dc02      	bgt.n	8001148 <timerrun+0x64>
	{
		timer3_flag=1;
 8001142:	4b20      	ldr	r3, [pc, #128]	; (80011c4 <timerrun+0xe0>)
 8001144:	2201      	movs	r2, #1
 8001146:	601a      	str	r2, [r3, #0]
	}
	if(timer4_counter>0)
 8001148:	4b1f      	ldr	r3, [pc, #124]	; (80011c8 <timerrun+0xe4>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	2b00      	cmp	r3, #0
 800114e:	dd04      	ble.n	800115a <timerrun+0x76>
	{
		timer4_counter--;
 8001150:	4b1d      	ldr	r3, [pc, #116]	; (80011c8 <timerrun+0xe4>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	3b01      	subs	r3, #1
 8001156:	4a1c      	ldr	r2, [pc, #112]	; (80011c8 <timerrun+0xe4>)
 8001158:	6013      	str	r3, [r2, #0]
	}
	if(timer4_counter<=0)
 800115a:	4b1b      	ldr	r3, [pc, #108]	; (80011c8 <timerrun+0xe4>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	2b00      	cmp	r3, #0
 8001160:	dc02      	bgt.n	8001168 <timerrun+0x84>
	{
		timer4_flag=1;
 8001162:	4b1a      	ldr	r3, [pc, #104]	; (80011cc <timerrun+0xe8>)
 8001164:	2201      	movs	r2, #1
 8001166:	601a      	str	r2, [r3, #0]
	}
	if(timer5_counter>0)
 8001168:	4b19      	ldr	r3, [pc, #100]	; (80011d0 <timerrun+0xec>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	2b00      	cmp	r3, #0
 800116e:	dd04      	ble.n	800117a <timerrun+0x96>
	{
		timer5_counter--;
 8001170:	4b17      	ldr	r3, [pc, #92]	; (80011d0 <timerrun+0xec>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	3b01      	subs	r3, #1
 8001176:	4a16      	ldr	r2, [pc, #88]	; (80011d0 <timerrun+0xec>)
 8001178:	6013      	str	r3, [r2, #0]
	}
	if(timer5_counter<=0)
 800117a:	4b15      	ldr	r3, [pc, #84]	; (80011d0 <timerrun+0xec>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	2b00      	cmp	r3, #0
 8001180:	dc02      	bgt.n	8001188 <timerrun+0xa4>
	{
		timer5_flag=1;
 8001182:	4b14      	ldr	r3, [pc, #80]	; (80011d4 <timerrun+0xf0>)
 8001184:	2201      	movs	r2, #1
 8001186:	601a      	str	r2, [r3, #0]
	}
	if(timer6_counter>0)
 8001188:	4b13      	ldr	r3, [pc, #76]	; (80011d8 <timerrun+0xf4>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	2b00      	cmp	r3, #0
 800118e:	dd04      	ble.n	800119a <timerrun+0xb6>
	{
		timer6_counter--;
 8001190:	4b11      	ldr	r3, [pc, #68]	; (80011d8 <timerrun+0xf4>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	3b01      	subs	r3, #1
 8001196:	4a10      	ldr	r2, [pc, #64]	; (80011d8 <timerrun+0xf4>)
 8001198:	6013      	str	r3, [r2, #0]
	}
	if(timer6_counter<=0)
 800119a:	4b0f      	ldr	r3, [pc, #60]	; (80011d8 <timerrun+0xf4>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	dc02      	bgt.n	80011a8 <timerrun+0xc4>
	{
		timer6_flag=1;
 80011a2:	4b0e      	ldr	r3, [pc, #56]	; (80011dc <timerrun+0xf8>)
 80011a4:	2201      	movs	r2, #1
 80011a6:	601a      	str	r2, [r3, #0]
	}
}
 80011a8:	bf00      	nop
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bc80      	pop	{r7}
 80011ae:	4770      	bx	lr
 80011b0:	200000ac 	.word	0x200000ac
 80011b4:	200000b0 	.word	0x200000b0
 80011b8:	200000b4 	.word	0x200000b4
 80011bc:	200000b8 	.word	0x200000b8
 80011c0:	200000bc 	.word	0x200000bc
 80011c4:	200000c0 	.word	0x200000c0
 80011c8:	200000c4 	.word	0x200000c4
 80011cc:	200000c8 	.word	0x200000c8
 80011d0:	200000cc 	.word	0x200000cc
 80011d4:	200000d0 	.word	0x200000d0
 80011d8:	200000d4 	.word	0x200000d4
 80011dc:	200000d8 	.word	0x200000d8

080011e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011e0:	b480      	push	{r7}
 80011e2:	b083      	sub	sp, #12
 80011e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80011e6:	4b0e      	ldr	r3, [pc, #56]	; (8001220 <HAL_MspInit+0x40>)
 80011e8:	699b      	ldr	r3, [r3, #24]
 80011ea:	4a0d      	ldr	r2, [pc, #52]	; (8001220 <HAL_MspInit+0x40>)
 80011ec:	f043 0301 	orr.w	r3, r3, #1
 80011f0:	6193      	str	r3, [r2, #24]
 80011f2:	4b0b      	ldr	r3, [pc, #44]	; (8001220 <HAL_MspInit+0x40>)
 80011f4:	699b      	ldr	r3, [r3, #24]
 80011f6:	f003 0301 	and.w	r3, r3, #1
 80011fa:	607b      	str	r3, [r7, #4]
 80011fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011fe:	4b08      	ldr	r3, [pc, #32]	; (8001220 <HAL_MspInit+0x40>)
 8001200:	69db      	ldr	r3, [r3, #28]
 8001202:	4a07      	ldr	r2, [pc, #28]	; (8001220 <HAL_MspInit+0x40>)
 8001204:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001208:	61d3      	str	r3, [r2, #28]
 800120a:	4b05      	ldr	r3, [pc, #20]	; (8001220 <HAL_MspInit+0x40>)
 800120c:	69db      	ldr	r3, [r3, #28]
 800120e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001212:	603b      	str	r3, [r7, #0]
 8001214:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001216:	bf00      	nop
 8001218:	370c      	adds	r7, #12
 800121a:	46bd      	mov	sp, r7
 800121c:	bc80      	pop	{r7}
 800121e:	4770      	bx	lr
 8001220:	40021000 	.word	0x40021000

08001224 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b084      	sub	sp, #16
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001234:	d113      	bne.n	800125e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001236:	4b0c      	ldr	r3, [pc, #48]	; (8001268 <HAL_TIM_Base_MspInit+0x44>)
 8001238:	69db      	ldr	r3, [r3, #28]
 800123a:	4a0b      	ldr	r2, [pc, #44]	; (8001268 <HAL_TIM_Base_MspInit+0x44>)
 800123c:	f043 0301 	orr.w	r3, r3, #1
 8001240:	61d3      	str	r3, [r2, #28]
 8001242:	4b09      	ldr	r3, [pc, #36]	; (8001268 <HAL_TIM_Base_MspInit+0x44>)
 8001244:	69db      	ldr	r3, [r3, #28]
 8001246:	f003 0301 	and.w	r3, r3, #1
 800124a:	60fb      	str	r3, [r7, #12]
 800124c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800124e:	2200      	movs	r2, #0
 8001250:	2100      	movs	r1, #0
 8001252:	201c      	movs	r0, #28
 8001254:	f000 fc1d 	bl	8001a92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001258:	201c      	movs	r0, #28
 800125a:	f000 fc36 	bl	8001aca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800125e:	bf00      	nop
 8001260:	3710      	adds	r7, #16
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	40021000 	.word	0x40021000

0800126c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800126c:	b480      	push	{r7}
 800126e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001270:	e7fe      	b.n	8001270 <NMI_Handler+0x4>

08001272 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001272:	b480      	push	{r7}
 8001274:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001276:	e7fe      	b.n	8001276 <HardFault_Handler+0x4>

08001278 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001278:	b480      	push	{r7}
 800127a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800127c:	e7fe      	b.n	800127c <MemManage_Handler+0x4>

0800127e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800127e:	b480      	push	{r7}
 8001280:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001282:	e7fe      	b.n	8001282 <BusFault_Handler+0x4>

08001284 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001284:	b480      	push	{r7}
 8001286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001288:	e7fe      	b.n	8001288 <UsageFault_Handler+0x4>

0800128a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800128a:	b480      	push	{r7}
 800128c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800128e:	bf00      	nop
 8001290:	46bd      	mov	sp, r7
 8001292:	bc80      	pop	{r7}
 8001294:	4770      	bx	lr

08001296 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001296:	b480      	push	{r7}
 8001298:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800129a:	bf00      	nop
 800129c:	46bd      	mov	sp, r7
 800129e:	bc80      	pop	{r7}
 80012a0:	4770      	bx	lr

080012a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012a2:	b480      	push	{r7}
 80012a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012a6:	bf00      	nop
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bc80      	pop	{r7}
 80012ac:	4770      	bx	lr

080012ae <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012ae:	b580      	push	{r7, lr}
 80012b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012b2:	f000 fafb 	bl	80018ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012b6:	bf00      	nop
 80012b8:	bd80      	pop	{r7, pc}
	...

080012bc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80012c0:	4802      	ldr	r0, [pc, #8]	; (80012cc <TIM2_IRQHandler+0x10>)
 80012c2:	f001 fa43 	bl	800274c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80012c6:	bf00      	nop
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	20000064 	.word	0x20000064

080012d0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80012d0:	b480      	push	{r7}
 80012d2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012d4:	bf00      	nop
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bc80      	pop	{r7}
 80012da:	4770      	bx	lr

080012dc <updateClockBuffer>:
int second=0;
int index_led=0;
int led_buffer[2] = {0 , 0};

void updateClockBuffer ()
  {
 80012dc:	b480      	push	{r7}
 80012de:	b083      	sub	sp, #12
 80012e0:	af00      	add	r7, sp, #0
	  int second_tens=second/10;
 80012e2:	4b11      	ldr	r3, [pc, #68]	; (8001328 <updateClockBuffer+0x4c>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	4a11      	ldr	r2, [pc, #68]	; (800132c <updateClockBuffer+0x50>)
 80012e8:	fb82 1203 	smull	r1, r2, r2, r3
 80012ec:	1092      	asrs	r2, r2, #2
 80012ee:	17db      	asrs	r3, r3, #31
 80012f0:	1ad3      	subs	r3, r2, r3
 80012f2:	607b      	str	r3, [r7, #4]
	  int second_ones=second%10;
 80012f4:	4b0c      	ldr	r3, [pc, #48]	; (8001328 <updateClockBuffer+0x4c>)
 80012f6:	681a      	ldr	r2, [r3, #0]
 80012f8:	4b0c      	ldr	r3, [pc, #48]	; (800132c <updateClockBuffer+0x50>)
 80012fa:	fb83 1302 	smull	r1, r3, r3, r2
 80012fe:	1099      	asrs	r1, r3, #2
 8001300:	17d3      	asrs	r3, r2, #31
 8001302:	1ac9      	subs	r1, r1, r3
 8001304:	460b      	mov	r3, r1
 8001306:	009b      	lsls	r3, r3, #2
 8001308:	440b      	add	r3, r1
 800130a:	005b      	lsls	r3, r3, #1
 800130c:	1ad3      	subs	r3, r2, r3
 800130e:	603b      	str	r3, [r7, #0]

	  led_buffer[0] = second_tens;
 8001310:	4a07      	ldr	r2, [pc, #28]	; (8001330 <updateClockBuffer+0x54>)
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	6013      	str	r3, [r2, #0]
	  led_buffer[1] = second_ones;
 8001316:	4a06      	ldr	r2, [pc, #24]	; (8001330 <updateClockBuffer+0x54>)
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	6053      	str	r3, [r2, #4]
  }
 800131c:	bf00      	nop
 800131e:	370c      	adds	r7, #12
 8001320:	46bd      	mov	sp, r7
 8001322:	bc80      	pop	{r7}
 8001324:	4770      	bx	lr
 8001326:	bf00      	nop
 8001328:	200000dc 	.word	0x200000dc
 800132c:	66666667 	.word	0x66666667
 8001330:	200000e4 	.word	0x200000e4

08001334 <display_traffic1>:

void display_traffic1()
{
 8001334:	b580      	push	{r7, lr}
 8001336:	af00      	add	r7, sp, #0
	switch (status3)
 8001338:	4b7d      	ldr	r3, [pc, #500]	; (8001530 <display_traffic1+0x1fc>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	2b03      	cmp	r3, #3
 800133e:	f200 80ee 	bhi.w	800151e <display_traffic1+0x1ea>
 8001342:	a201      	add	r2, pc, #4	; (adr r2, 8001348 <display_traffic1+0x14>)
 8001344:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001348:	08001359 	.word	0x08001359
 800134c:	08001385 	.word	0x08001385
 8001350:	0800140f 	.word	0x0800140f
 8001354:	08001497 	.word	0x08001497
	{
	case INIT :
	second=timer1/100;
 8001358:	4b76      	ldr	r3, [pc, #472]	; (8001534 <display_traffic1+0x200>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	4a76      	ldr	r2, [pc, #472]	; (8001538 <display_traffic1+0x204>)
 800135e:	fb82 1203 	smull	r1, r2, r2, r3
 8001362:	1152      	asrs	r2, r2, #5
 8001364:	17db      	asrs	r3, r3, #31
 8001366:	1ad3      	subs	r3, r2, r3
 8001368:	4a74      	ldr	r2, [pc, #464]	; (800153c <display_traffic1+0x208>)
 800136a:	6013      	str	r3, [r2, #0]
	updateClockBuffer ();
 800136c:	f7ff ffb6 	bl	80012dc <updateClockBuffer>
    status3=auto_red;
 8001370:	4b6f      	ldr	r3, [pc, #444]	; (8001530 <display_traffic1+0x1fc>)
 8001372:	2201      	movs	r2, #1
 8001374:	601a      	str	r2, [r3, #0]
    settimer3(50);
 8001376:	2032      	movs	r0, #50	; 0x32
 8001378:	f7ff fe64 	bl	8001044 <settimer3>
    settimer4(100);
 800137c:	2064      	movs	r0, #100	; 0x64
 800137e:	f7ff fe75 	bl	800106c <settimer4>
		break;
 8001382:	e0d3      	b.n	800152c <display_traffic1+0x1f8>
	case auto_red :
		if (timer3_flag==1)
 8001384:	4b6e      	ldr	r3, [pc, #440]	; (8001540 <display_traffic1+0x20c>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	2b01      	cmp	r3, #1
 800138a:	d11f      	bne.n	80013cc <display_traffic1+0x98>
		{
			settimer3 (50) ;
 800138c:	2032      	movs	r0, #50	; 0x32
 800138e:	f7ff fe59 	bl	8001044 <settimer3>
		    if( index_led < 2 )
 8001392:	4b6c      	ldr	r3, [pc, #432]	; (8001544 <display_traffic1+0x210>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	2b01      	cmp	r3, #1
 8001398:	dc11      	bgt.n	80013be <display_traffic1+0x8a>
			{
			  update7SEGa ( index_led ) ;
 800139a:	4b6a      	ldr	r3, [pc, #424]	; (8001544 <display_traffic1+0x210>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	4618      	mov	r0, r3
 80013a0:	f7fe fed4 	bl	800014c <update7SEGa>
			  display7SEGa ( led_buffer [ index_led ] ) ;
 80013a4:	4b67      	ldr	r3, [pc, #412]	; (8001544 <display_traffic1+0x210>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	4a67      	ldr	r2, [pc, #412]	; (8001548 <display_traffic1+0x214>)
 80013aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013ae:	4618      	mov	r0, r3
 80013b0:	f7fe fef6 	bl	80001a0 <display7SEGa>
			  index_led ++ ;
 80013b4:	4b63      	ldr	r3, [pc, #396]	; (8001544 <display_traffic1+0x210>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	3301      	adds	r3, #1
 80013ba:	4a62      	ldr	r2, [pc, #392]	; (8001544 <display_traffic1+0x210>)
 80013bc:	6013      	str	r3, [r2, #0]
			}
			if( index_led >= 2 )
 80013be:	4b61      	ldr	r3, [pc, #388]	; (8001544 <display_traffic1+0x210>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	2b01      	cmp	r3, #1
 80013c4:	dd02      	ble.n	80013cc <display_traffic1+0x98>
			{
			  index_led = 0;
 80013c6:	4b5f      	ldr	r3, [pc, #380]	; (8001544 <display_traffic1+0x210>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	601a      	str	r2, [r3, #0]
			}
		}
		if(timer4_flag==1)
 80013cc:	4b5f      	ldr	r3, [pc, #380]	; (800154c <display_traffic1+0x218>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	2b01      	cmp	r3, #1
 80013d2:	f040 80a6 	bne.w	8001522 <display_traffic1+0x1ee>
		{
			settimer4 (100) ;
 80013d6:	2064      	movs	r0, #100	; 0x64
 80013d8:	f7ff fe48 	bl	800106c <settimer4>
			second -- ;
 80013dc:	4b57      	ldr	r3, [pc, #348]	; (800153c <display_traffic1+0x208>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	3b01      	subs	r3, #1
 80013e2:	4a56      	ldr	r2, [pc, #344]	; (800153c <display_traffic1+0x208>)
 80013e4:	6013      	str	r3, [r2, #0]
			if(second <= 0 )
 80013e6:	4b55      	ldr	r3, [pc, #340]	; (800153c <display_traffic1+0x208>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	dc0c      	bgt.n	8001408 <display_traffic1+0xd4>
			{
				status3 = auto_green;
 80013ee:	4b50      	ldr	r3, [pc, #320]	; (8001530 <display_traffic1+0x1fc>)
 80013f0:	2202      	movs	r2, #2
 80013f2:	601a      	str	r2, [r3, #0]
				second = timer2/100;
 80013f4:	4b56      	ldr	r3, [pc, #344]	; (8001550 <display_traffic1+0x21c>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	4a4f      	ldr	r2, [pc, #316]	; (8001538 <display_traffic1+0x204>)
 80013fa:	fb82 1203 	smull	r1, r2, r2, r3
 80013fe:	1152      	asrs	r2, r2, #5
 8001400:	17db      	asrs	r3, r3, #31
 8001402:	1ad3      	subs	r3, r2, r3
 8001404:	4a4d      	ldr	r2, [pc, #308]	; (800153c <display_traffic1+0x208>)
 8001406:	6013      	str	r3, [r2, #0]
			}
		   updateClockBuffer () ;
 8001408:	f7ff ff68 	bl	80012dc <updateClockBuffer>
		}
		break ;
 800140c:	e089      	b.n	8001522 <display_traffic1+0x1ee>
	case auto_green :
		if (timer3_flag==1)
 800140e:	4b4c      	ldr	r3, [pc, #304]	; (8001540 <display_traffic1+0x20c>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	2b01      	cmp	r3, #1
 8001414:	d11f      	bne.n	8001456 <display_traffic1+0x122>
		{
			settimer3 (50) ;
 8001416:	2032      	movs	r0, #50	; 0x32
 8001418:	f7ff fe14 	bl	8001044 <settimer3>
		    if( index_led < 2 )
 800141c:	4b49      	ldr	r3, [pc, #292]	; (8001544 <display_traffic1+0x210>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	2b01      	cmp	r3, #1
 8001422:	dc11      	bgt.n	8001448 <display_traffic1+0x114>
			{
			  update7SEGa ( index_led ) ;
 8001424:	4b47      	ldr	r3, [pc, #284]	; (8001544 <display_traffic1+0x210>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	4618      	mov	r0, r3
 800142a:	f7fe fe8f 	bl	800014c <update7SEGa>
			  display7SEGa ( led_buffer [ index_led ] ) ;
 800142e:	4b45      	ldr	r3, [pc, #276]	; (8001544 <display_traffic1+0x210>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	4a45      	ldr	r2, [pc, #276]	; (8001548 <display_traffic1+0x214>)
 8001434:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001438:	4618      	mov	r0, r3
 800143a:	f7fe feb1 	bl	80001a0 <display7SEGa>
			  index_led ++ ;
 800143e:	4b41      	ldr	r3, [pc, #260]	; (8001544 <display_traffic1+0x210>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	3301      	adds	r3, #1
 8001444:	4a3f      	ldr	r2, [pc, #252]	; (8001544 <display_traffic1+0x210>)
 8001446:	6013      	str	r3, [r2, #0]
			}
			if( index_led >= 2 )
 8001448:	4b3e      	ldr	r3, [pc, #248]	; (8001544 <display_traffic1+0x210>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	2b01      	cmp	r3, #1
 800144e:	dd02      	ble.n	8001456 <display_traffic1+0x122>
			{
			  index_led = 0;
 8001450:	4b3c      	ldr	r3, [pc, #240]	; (8001544 <display_traffic1+0x210>)
 8001452:	2200      	movs	r2, #0
 8001454:	601a      	str	r2, [r3, #0]
			}
		}
		if(timer4_flag==1)
 8001456:	4b3d      	ldr	r3, [pc, #244]	; (800154c <display_traffic1+0x218>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	2b01      	cmp	r3, #1
 800145c:	d163      	bne.n	8001526 <display_traffic1+0x1f2>
		{
			settimer4 (100) ;
 800145e:	2064      	movs	r0, #100	; 0x64
 8001460:	f7ff fe04 	bl	800106c <settimer4>
			second -- ;
 8001464:	4b35      	ldr	r3, [pc, #212]	; (800153c <display_traffic1+0x208>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	3b01      	subs	r3, #1
 800146a:	4a34      	ldr	r2, [pc, #208]	; (800153c <display_traffic1+0x208>)
 800146c:	6013      	str	r3, [r2, #0]
			if(second <= 0 )
 800146e:	4b33      	ldr	r3, [pc, #204]	; (800153c <display_traffic1+0x208>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	2b00      	cmp	r3, #0
 8001474:	dc0c      	bgt.n	8001490 <display_traffic1+0x15c>
			{
				status3 = auto_yellow;
 8001476:	4b2e      	ldr	r3, [pc, #184]	; (8001530 <display_traffic1+0x1fc>)
 8001478:	2203      	movs	r2, #3
 800147a:	601a      	str	r2, [r3, #0]
				second = timer3/100;
 800147c:	4b35      	ldr	r3, [pc, #212]	; (8001554 <display_traffic1+0x220>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4a2d      	ldr	r2, [pc, #180]	; (8001538 <display_traffic1+0x204>)
 8001482:	fb82 1203 	smull	r1, r2, r2, r3
 8001486:	1152      	asrs	r2, r2, #5
 8001488:	17db      	asrs	r3, r3, #31
 800148a:	1ad3      	subs	r3, r2, r3
 800148c:	4a2b      	ldr	r2, [pc, #172]	; (800153c <display_traffic1+0x208>)
 800148e:	6013      	str	r3, [r2, #0]
			}
		   updateClockBuffer () ;
 8001490:	f7ff ff24 	bl	80012dc <updateClockBuffer>
		}
		break;
 8001494:	e047      	b.n	8001526 <display_traffic1+0x1f2>
	case auto_yellow :
		if (timer3_flag==1)
 8001496:	4b2a      	ldr	r3, [pc, #168]	; (8001540 <display_traffic1+0x20c>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	2b01      	cmp	r3, #1
 800149c:	d11f      	bne.n	80014de <display_traffic1+0x1aa>
		{
			settimer3 (50) ;
 800149e:	2032      	movs	r0, #50	; 0x32
 80014a0:	f7ff fdd0 	bl	8001044 <settimer3>
		    if( index_led < 2 )
 80014a4:	4b27      	ldr	r3, [pc, #156]	; (8001544 <display_traffic1+0x210>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	2b01      	cmp	r3, #1
 80014aa:	dc11      	bgt.n	80014d0 <display_traffic1+0x19c>
			{
			  update7SEGa ( index_led ) ;
 80014ac:	4b25      	ldr	r3, [pc, #148]	; (8001544 <display_traffic1+0x210>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	4618      	mov	r0, r3
 80014b2:	f7fe fe4b 	bl	800014c <update7SEGa>
			  display7SEGa ( led_buffer [ index_led ] ) ;
 80014b6:	4b23      	ldr	r3, [pc, #140]	; (8001544 <display_traffic1+0x210>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	4a23      	ldr	r2, [pc, #140]	; (8001548 <display_traffic1+0x214>)
 80014bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014c0:	4618      	mov	r0, r3
 80014c2:	f7fe fe6d 	bl	80001a0 <display7SEGa>
			  index_led ++ ;
 80014c6:	4b1f      	ldr	r3, [pc, #124]	; (8001544 <display_traffic1+0x210>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	3301      	adds	r3, #1
 80014cc:	4a1d      	ldr	r2, [pc, #116]	; (8001544 <display_traffic1+0x210>)
 80014ce:	6013      	str	r3, [r2, #0]
			}
			if( index_led >= 2 )
 80014d0:	4b1c      	ldr	r3, [pc, #112]	; (8001544 <display_traffic1+0x210>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	2b01      	cmp	r3, #1
 80014d6:	dd02      	ble.n	80014de <display_traffic1+0x1aa>
			{
			  index_led = 0;
 80014d8:	4b1a      	ldr	r3, [pc, #104]	; (8001544 <display_traffic1+0x210>)
 80014da:	2200      	movs	r2, #0
 80014dc:	601a      	str	r2, [r3, #0]
			}
		}
		if(timer4_flag==1)
 80014de:	4b1b      	ldr	r3, [pc, #108]	; (800154c <display_traffic1+0x218>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	2b01      	cmp	r3, #1
 80014e4:	d121      	bne.n	800152a <display_traffic1+0x1f6>
		{
			settimer4 (100) ;
 80014e6:	2064      	movs	r0, #100	; 0x64
 80014e8:	f7ff fdc0 	bl	800106c <settimer4>
			second -- ;
 80014ec:	4b13      	ldr	r3, [pc, #76]	; (800153c <display_traffic1+0x208>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	3b01      	subs	r3, #1
 80014f2:	4a12      	ldr	r2, [pc, #72]	; (800153c <display_traffic1+0x208>)
 80014f4:	6013      	str	r3, [r2, #0]
			if(second <= 0 )
 80014f6:	4b11      	ldr	r3, [pc, #68]	; (800153c <display_traffic1+0x208>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	dc0c      	bgt.n	8001518 <display_traffic1+0x1e4>
			{
				status3 = auto_red;
 80014fe:	4b0c      	ldr	r3, [pc, #48]	; (8001530 <display_traffic1+0x1fc>)
 8001500:	2201      	movs	r2, #1
 8001502:	601a      	str	r2, [r3, #0]
				second = timer1/100;
 8001504:	4b0b      	ldr	r3, [pc, #44]	; (8001534 <display_traffic1+0x200>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	4a0b      	ldr	r2, [pc, #44]	; (8001538 <display_traffic1+0x204>)
 800150a:	fb82 1203 	smull	r1, r2, r2, r3
 800150e:	1152      	asrs	r2, r2, #5
 8001510:	17db      	asrs	r3, r3, #31
 8001512:	1ad3      	subs	r3, r2, r3
 8001514:	4a09      	ldr	r2, [pc, #36]	; (800153c <display_traffic1+0x208>)
 8001516:	6013      	str	r3, [r2, #0]
			}
		   updateClockBuffer () ;
 8001518:	f7ff fee0 	bl	80012dc <updateClockBuffer>
		}
		break ;
 800151c:	e005      	b.n	800152a <display_traffic1+0x1f6>
	default : break ;
 800151e:	bf00      	nop
 8001520:	e004      	b.n	800152c <display_traffic1+0x1f8>
		break ;
 8001522:	bf00      	nop
 8001524:	e002      	b.n	800152c <display_traffic1+0x1f8>
		break;
 8001526:	bf00      	nop
 8001528:	e000      	b.n	800152c <display_traffic1+0x1f8>
		break ;
 800152a:	bf00      	nop
	}
}
 800152c:	bf00      	nop
 800152e:	bd80      	pop	{r7, pc}
 8001530:	20000044 	.word	0x20000044
 8001534:	20000000 	.word	0x20000000
 8001538:	51eb851f 	.word	0x51eb851f
 800153c:	200000dc 	.word	0x200000dc
 8001540:	200000c0 	.word	0x200000c0
 8001544:	200000e0 	.word	0x200000e0
 8001548:	200000e4 	.word	0x200000e4
 800154c:	200000c8 	.word	0x200000c8
 8001550:	20000004 	.word	0x20000004
 8001554:	20000008 	.word	0x20000008

08001558 <updateClockBuffer2>:
int second2=0;
int index_led2=0;
int led_buffer2[2] = {0 , 0};

void updateClockBuffer2 ()
  {
 8001558:	b480      	push	{r7}
 800155a:	b083      	sub	sp, #12
 800155c:	af00      	add	r7, sp, #0
	  int second_tens=second2/10;
 800155e:	4b11      	ldr	r3, [pc, #68]	; (80015a4 <updateClockBuffer2+0x4c>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	4a11      	ldr	r2, [pc, #68]	; (80015a8 <updateClockBuffer2+0x50>)
 8001564:	fb82 1203 	smull	r1, r2, r2, r3
 8001568:	1092      	asrs	r2, r2, #2
 800156a:	17db      	asrs	r3, r3, #31
 800156c:	1ad3      	subs	r3, r2, r3
 800156e:	607b      	str	r3, [r7, #4]
	  int second_ones=second2%10;
 8001570:	4b0c      	ldr	r3, [pc, #48]	; (80015a4 <updateClockBuffer2+0x4c>)
 8001572:	681a      	ldr	r2, [r3, #0]
 8001574:	4b0c      	ldr	r3, [pc, #48]	; (80015a8 <updateClockBuffer2+0x50>)
 8001576:	fb83 1302 	smull	r1, r3, r3, r2
 800157a:	1099      	asrs	r1, r3, #2
 800157c:	17d3      	asrs	r3, r2, #31
 800157e:	1ac9      	subs	r1, r1, r3
 8001580:	460b      	mov	r3, r1
 8001582:	009b      	lsls	r3, r3, #2
 8001584:	440b      	add	r3, r1
 8001586:	005b      	lsls	r3, r3, #1
 8001588:	1ad3      	subs	r3, r2, r3
 800158a:	603b      	str	r3, [r7, #0]

	  led_buffer2[0] = second_tens;
 800158c:	4a07      	ldr	r2, [pc, #28]	; (80015ac <updateClockBuffer2+0x54>)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	6013      	str	r3, [r2, #0]
	  led_buffer2[1] = second_ones;
 8001592:	4a06      	ldr	r2, [pc, #24]	; (80015ac <updateClockBuffer2+0x54>)
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	6053      	str	r3, [r2, #4]
  }
 8001598:	bf00      	nop
 800159a:	370c      	adds	r7, #12
 800159c:	46bd      	mov	sp, r7
 800159e:	bc80      	pop	{r7}
 80015a0:	4770      	bx	lr
 80015a2:	bf00      	nop
 80015a4:	200000ec 	.word	0x200000ec
 80015a8:	66666667 	.word	0x66666667
 80015ac:	200000f4 	.word	0x200000f4

080015b0 <display_traffic2>:

void display_traffic2()
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	af00      	add	r7, sp, #0
	switch (status4)
 80015b4:	4b7d      	ldr	r3, [pc, #500]	; (80017ac <display_traffic2+0x1fc>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	2b03      	cmp	r3, #3
 80015ba:	f200 80ee 	bhi.w	800179a <display_traffic2+0x1ea>
 80015be:	a201      	add	r2, pc, #4	; (adr r2, 80015c4 <display_traffic2+0x14>)
 80015c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015c4:	080015d5 	.word	0x080015d5
 80015c8:	08001601 	.word	0x08001601
 80015cc:	0800168b 	.word	0x0800168b
 80015d0:	08001713 	.word	0x08001713
	{
	case INIT :
	second2=timer2/100;
 80015d4:	4b76      	ldr	r3, [pc, #472]	; (80017b0 <display_traffic2+0x200>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4a76      	ldr	r2, [pc, #472]	; (80017b4 <display_traffic2+0x204>)
 80015da:	fb82 1203 	smull	r1, r2, r2, r3
 80015de:	1152      	asrs	r2, r2, #5
 80015e0:	17db      	asrs	r3, r3, #31
 80015e2:	1ad3      	subs	r3, r2, r3
 80015e4:	4a74      	ldr	r2, [pc, #464]	; (80017b8 <display_traffic2+0x208>)
 80015e6:	6013      	str	r3, [r2, #0]
	updateClockBuffer2 ();
 80015e8:	f7ff ffb6 	bl	8001558 <updateClockBuffer2>
    status4=auto_green;
 80015ec:	4b6f      	ldr	r3, [pc, #444]	; (80017ac <display_traffic2+0x1fc>)
 80015ee:	2202      	movs	r2, #2
 80015f0:	601a      	str	r2, [r3, #0]
    settimer5(50);
 80015f2:	2032      	movs	r0, #50	; 0x32
 80015f4:	f7ff fd4e 	bl	8001094 <settimer5>
    settimer6(100);
 80015f8:	2064      	movs	r0, #100	; 0x64
 80015fa:	f7ff fd5f 	bl	80010bc <settimer6>
		break;
 80015fe:	e0d3      	b.n	80017a8 <display_traffic2+0x1f8>
	case auto_red :
		if (timer5_flag==1)
 8001600:	4b6e      	ldr	r3, [pc, #440]	; (80017bc <display_traffic2+0x20c>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	2b01      	cmp	r3, #1
 8001606:	d11f      	bne.n	8001648 <display_traffic2+0x98>
		{
			settimer5 (50) ;
 8001608:	2032      	movs	r0, #50	; 0x32
 800160a:	f7ff fd43 	bl	8001094 <settimer5>
		    if( index_led2 < 2 )
 800160e:	4b6c      	ldr	r3, [pc, #432]	; (80017c0 <display_traffic2+0x210>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	2b01      	cmp	r3, #1
 8001614:	dc11      	bgt.n	800163a <display_traffic2+0x8a>
			{
			  update7SEGb ( index_led2 ) ;
 8001616:	4b6a      	ldr	r3, [pc, #424]	; (80017c0 <display_traffic2+0x210>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	4618      	mov	r0, r3
 800161c:	f7fe ff50 	bl	80004c0 <update7SEGb>
			  display7SEGb ( led_buffer2 [ index_led2 ] ) ;
 8001620:	4b67      	ldr	r3, [pc, #412]	; (80017c0 <display_traffic2+0x210>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	4a67      	ldr	r2, [pc, #412]	; (80017c4 <display_traffic2+0x214>)
 8001626:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800162a:	4618      	mov	r0, r3
 800162c:	f7fe ff74 	bl	8000518 <display7SEGb>
			  index_led2 ++ ;
 8001630:	4b63      	ldr	r3, [pc, #396]	; (80017c0 <display_traffic2+0x210>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	3301      	adds	r3, #1
 8001636:	4a62      	ldr	r2, [pc, #392]	; (80017c0 <display_traffic2+0x210>)
 8001638:	6013      	str	r3, [r2, #0]
			}
			if( index_led2 >= 2 )
 800163a:	4b61      	ldr	r3, [pc, #388]	; (80017c0 <display_traffic2+0x210>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	2b01      	cmp	r3, #1
 8001640:	dd02      	ble.n	8001648 <display_traffic2+0x98>
			{
			  index_led2 = 0;
 8001642:	4b5f      	ldr	r3, [pc, #380]	; (80017c0 <display_traffic2+0x210>)
 8001644:	2200      	movs	r2, #0
 8001646:	601a      	str	r2, [r3, #0]
			}
		}
		if(timer6_flag==1)
 8001648:	4b5f      	ldr	r3, [pc, #380]	; (80017c8 <display_traffic2+0x218>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	2b01      	cmp	r3, #1
 800164e:	f040 80a6 	bne.w	800179e <display_traffic2+0x1ee>
		{
			settimer6 (100) ;
 8001652:	2064      	movs	r0, #100	; 0x64
 8001654:	f7ff fd32 	bl	80010bc <settimer6>
			second2 -- ;
 8001658:	4b57      	ldr	r3, [pc, #348]	; (80017b8 <display_traffic2+0x208>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	3b01      	subs	r3, #1
 800165e:	4a56      	ldr	r2, [pc, #344]	; (80017b8 <display_traffic2+0x208>)
 8001660:	6013      	str	r3, [r2, #0]
			if(second2 <= 0 )
 8001662:	4b55      	ldr	r3, [pc, #340]	; (80017b8 <display_traffic2+0x208>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	2b00      	cmp	r3, #0
 8001668:	dc0c      	bgt.n	8001684 <display_traffic2+0xd4>
			{
				status4 = auto_green;
 800166a:	4b50      	ldr	r3, [pc, #320]	; (80017ac <display_traffic2+0x1fc>)
 800166c:	2202      	movs	r2, #2
 800166e:	601a      	str	r2, [r3, #0]
				second2 = timer2/100;
 8001670:	4b4f      	ldr	r3, [pc, #316]	; (80017b0 <display_traffic2+0x200>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	4a4f      	ldr	r2, [pc, #316]	; (80017b4 <display_traffic2+0x204>)
 8001676:	fb82 1203 	smull	r1, r2, r2, r3
 800167a:	1152      	asrs	r2, r2, #5
 800167c:	17db      	asrs	r3, r3, #31
 800167e:	1ad3      	subs	r3, r2, r3
 8001680:	4a4d      	ldr	r2, [pc, #308]	; (80017b8 <display_traffic2+0x208>)
 8001682:	6013      	str	r3, [r2, #0]
			}
		   updateClockBuffer2 () ;
 8001684:	f7ff ff68 	bl	8001558 <updateClockBuffer2>
		}
		break ;
 8001688:	e089      	b.n	800179e <display_traffic2+0x1ee>
	case auto_green :
		if (timer5_flag==1)
 800168a:	4b4c      	ldr	r3, [pc, #304]	; (80017bc <display_traffic2+0x20c>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	2b01      	cmp	r3, #1
 8001690:	d11f      	bne.n	80016d2 <display_traffic2+0x122>
		{
			settimer5 (50) ;
 8001692:	2032      	movs	r0, #50	; 0x32
 8001694:	f7ff fcfe 	bl	8001094 <settimer5>
		    if( index_led2 < 2 )
 8001698:	4b49      	ldr	r3, [pc, #292]	; (80017c0 <display_traffic2+0x210>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	2b01      	cmp	r3, #1
 800169e:	dc11      	bgt.n	80016c4 <display_traffic2+0x114>
			{
			  update7SEGb ( index_led2 ) ;
 80016a0:	4b47      	ldr	r3, [pc, #284]	; (80017c0 <display_traffic2+0x210>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	4618      	mov	r0, r3
 80016a6:	f7fe ff0b 	bl	80004c0 <update7SEGb>
			  display7SEGb ( led_buffer2 [ index_led2 ] ) ;
 80016aa:	4b45      	ldr	r3, [pc, #276]	; (80017c0 <display_traffic2+0x210>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	4a45      	ldr	r2, [pc, #276]	; (80017c4 <display_traffic2+0x214>)
 80016b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016b4:	4618      	mov	r0, r3
 80016b6:	f7fe ff2f 	bl	8000518 <display7SEGb>
			  index_led2 ++ ;
 80016ba:	4b41      	ldr	r3, [pc, #260]	; (80017c0 <display_traffic2+0x210>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	3301      	adds	r3, #1
 80016c0:	4a3f      	ldr	r2, [pc, #252]	; (80017c0 <display_traffic2+0x210>)
 80016c2:	6013      	str	r3, [r2, #0]
			}
			if( index_led2 >= 2 )
 80016c4:	4b3e      	ldr	r3, [pc, #248]	; (80017c0 <display_traffic2+0x210>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	2b01      	cmp	r3, #1
 80016ca:	dd02      	ble.n	80016d2 <display_traffic2+0x122>
			{
			  index_led2 = 0;
 80016cc:	4b3c      	ldr	r3, [pc, #240]	; (80017c0 <display_traffic2+0x210>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	601a      	str	r2, [r3, #0]
			}
		}
		if(timer6_flag==1)
 80016d2:	4b3d      	ldr	r3, [pc, #244]	; (80017c8 <display_traffic2+0x218>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	2b01      	cmp	r3, #1
 80016d8:	d163      	bne.n	80017a2 <display_traffic2+0x1f2>
		{
			settimer6 (100) ;
 80016da:	2064      	movs	r0, #100	; 0x64
 80016dc:	f7ff fcee 	bl	80010bc <settimer6>
			second2 -- ;
 80016e0:	4b35      	ldr	r3, [pc, #212]	; (80017b8 <display_traffic2+0x208>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	3b01      	subs	r3, #1
 80016e6:	4a34      	ldr	r2, [pc, #208]	; (80017b8 <display_traffic2+0x208>)
 80016e8:	6013      	str	r3, [r2, #0]
			if(second2 <= 0 )
 80016ea:	4b33      	ldr	r3, [pc, #204]	; (80017b8 <display_traffic2+0x208>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	dc0c      	bgt.n	800170c <display_traffic2+0x15c>
			{
				status4 = auto_yellow;
 80016f2:	4b2e      	ldr	r3, [pc, #184]	; (80017ac <display_traffic2+0x1fc>)
 80016f4:	2203      	movs	r2, #3
 80016f6:	601a      	str	r2, [r3, #0]
				second2 = timer3/100;
 80016f8:	4b34      	ldr	r3, [pc, #208]	; (80017cc <display_traffic2+0x21c>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4a2d      	ldr	r2, [pc, #180]	; (80017b4 <display_traffic2+0x204>)
 80016fe:	fb82 1203 	smull	r1, r2, r2, r3
 8001702:	1152      	asrs	r2, r2, #5
 8001704:	17db      	asrs	r3, r3, #31
 8001706:	1ad3      	subs	r3, r2, r3
 8001708:	4a2b      	ldr	r2, [pc, #172]	; (80017b8 <display_traffic2+0x208>)
 800170a:	6013      	str	r3, [r2, #0]
			}
		   updateClockBuffer2 () ;
 800170c:	f7ff ff24 	bl	8001558 <updateClockBuffer2>
		}
		break;
 8001710:	e047      	b.n	80017a2 <display_traffic2+0x1f2>
	case auto_yellow :
		if (timer5_flag==1)
 8001712:	4b2a      	ldr	r3, [pc, #168]	; (80017bc <display_traffic2+0x20c>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	2b01      	cmp	r3, #1
 8001718:	d11f      	bne.n	800175a <display_traffic2+0x1aa>
		{
			settimer5 (50) ;
 800171a:	2032      	movs	r0, #50	; 0x32
 800171c:	f7ff fcba 	bl	8001094 <settimer5>
		    if( index_led2 < 2 )
 8001720:	4b27      	ldr	r3, [pc, #156]	; (80017c0 <display_traffic2+0x210>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	2b01      	cmp	r3, #1
 8001726:	dc11      	bgt.n	800174c <display_traffic2+0x19c>
			{
			  update7SEGb ( index_led2 ) ;
 8001728:	4b25      	ldr	r3, [pc, #148]	; (80017c0 <display_traffic2+0x210>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4618      	mov	r0, r3
 800172e:	f7fe fec7 	bl	80004c0 <update7SEGb>
			  display7SEGb ( led_buffer2 [ index_led2 ] ) ;
 8001732:	4b23      	ldr	r3, [pc, #140]	; (80017c0 <display_traffic2+0x210>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	4a23      	ldr	r2, [pc, #140]	; (80017c4 <display_traffic2+0x214>)
 8001738:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800173c:	4618      	mov	r0, r3
 800173e:	f7fe feeb 	bl	8000518 <display7SEGb>
			  index_led2 ++ ;
 8001742:	4b1f      	ldr	r3, [pc, #124]	; (80017c0 <display_traffic2+0x210>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	3301      	adds	r3, #1
 8001748:	4a1d      	ldr	r2, [pc, #116]	; (80017c0 <display_traffic2+0x210>)
 800174a:	6013      	str	r3, [r2, #0]
			}
			if( index_led2 >= 2 )
 800174c:	4b1c      	ldr	r3, [pc, #112]	; (80017c0 <display_traffic2+0x210>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	2b01      	cmp	r3, #1
 8001752:	dd02      	ble.n	800175a <display_traffic2+0x1aa>
			{
			  index_led2 = 0;
 8001754:	4b1a      	ldr	r3, [pc, #104]	; (80017c0 <display_traffic2+0x210>)
 8001756:	2200      	movs	r2, #0
 8001758:	601a      	str	r2, [r3, #0]
			}
		}
		if(timer6_flag==1)
 800175a:	4b1b      	ldr	r3, [pc, #108]	; (80017c8 <display_traffic2+0x218>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	2b01      	cmp	r3, #1
 8001760:	d121      	bne.n	80017a6 <display_traffic2+0x1f6>
		{
			settimer6 (100) ;
 8001762:	2064      	movs	r0, #100	; 0x64
 8001764:	f7ff fcaa 	bl	80010bc <settimer6>
			second2 -- ;
 8001768:	4b13      	ldr	r3, [pc, #76]	; (80017b8 <display_traffic2+0x208>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	3b01      	subs	r3, #1
 800176e:	4a12      	ldr	r2, [pc, #72]	; (80017b8 <display_traffic2+0x208>)
 8001770:	6013      	str	r3, [r2, #0]
			if(second2 <= 0 )
 8001772:	4b11      	ldr	r3, [pc, #68]	; (80017b8 <display_traffic2+0x208>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	2b00      	cmp	r3, #0
 8001778:	dc0c      	bgt.n	8001794 <display_traffic2+0x1e4>
			{
				status4 = auto_red;
 800177a:	4b0c      	ldr	r3, [pc, #48]	; (80017ac <display_traffic2+0x1fc>)
 800177c:	2201      	movs	r2, #1
 800177e:	601a      	str	r2, [r3, #0]
				second2 = timer1/100;
 8001780:	4b13      	ldr	r3, [pc, #76]	; (80017d0 <display_traffic2+0x220>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4a0b      	ldr	r2, [pc, #44]	; (80017b4 <display_traffic2+0x204>)
 8001786:	fb82 1203 	smull	r1, r2, r2, r3
 800178a:	1152      	asrs	r2, r2, #5
 800178c:	17db      	asrs	r3, r3, #31
 800178e:	1ad3      	subs	r3, r2, r3
 8001790:	4a09      	ldr	r2, [pc, #36]	; (80017b8 <display_traffic2+0x208>)
 8001792:	6013      	str	r3, [r2, #0]
			}
		   updateClockBuffer2 () ;
 8001794:	f7ff fee0 	bl	8001558 <updateClockBuffer2>
		}
		break ;
 8001798:	e005      	b.n	80017a6 <display_traffic2+0x1f6>
	default : break ;
 800179a:	bf00      	nop
 800179c:	e004      	b.n	80017a8 <display_traffic2+0x1f8>
		break ;
 800179e:	bf00      	nop
 80017a0:	e002      	b.n	80017a8 <display_traffic2+0x1f8>
		break;
 80017a2:	bf00      	nop
 80017a4:	e000      	b.n	80017a8 <display_traffic2+0x1f8>
		break ;
 80017a6:	bf00      	nop
	}
}
 80017a8:	bf00      	nop
 80017aa:	bd80      	pop	{r7, pc}
 80017ac:	20000048 	.word	0x20000048
 80017b0:	20000004 	.word	0x20000004
 80017b4:	51eb851f 	.word	0x51eb851f
 80017b8:	200000ec 	.word	0x200000ec
 80017bc:	200000d0 	.word	0x200000d0
 80017c0:	200000f0 	.word	0x200000f0
 80017c4:	200000f4 	.word	0x200000f4
 80017c8:	200000d8 	.word	0x200000d8
 80017cc:	20000008 	.word	0x20000008
 80017d0:	20000000 	.word	0x20000000

080017d4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80017d4:	f7ff fd7c 	bl	80012d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80017d8:	480b      	ldr	r0, [pc, #44]	; (8001808 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80017da:	490c      	ldr	r1, [pc, #48]	; (800180c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80017dc:	4a0c      	ldr	r2, [pc, #48]	; (8001810 <LoopFillZerobss+0x16>)
  movs r3, #0
 80017de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017e0:	e002      	b.n	80017e8 <LoopCopyDataInit>

080017e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017e6:	3304      	adds	r3, #4

080017e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017ec:	d3f9      	bcc.n	80017e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017ee:	4a09      	ldr	r2, [pc, #36]	; (8001814 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80017f0:	4c09      	ldr	r4, [pc, #36]	; (8001818 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80017f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017f4:	e001      	b.n	80017fa <LoopFillZerobss>

080017f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017f8:	3204      	adds	r2, #4

080017fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017fc:	d3fb      	bcc.n	80017f6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80017fe:	f001 faf9 	bl	8002df4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001802:	f7ff facd 	bl	8000da0 <main>
  bx lr
 8001806:	4770      	bx	lr
  ldr r0, =_sdata
 8001808:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800180c:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8001810:	08002e80 	.word	0x08002e80
  ldr r2, =_sbss
 8001814:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8001818:	20000100 	.word	0x20000100

0800181c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800181c:	e7fe      	b.n	800181c <ADC1_2_IRQHandler>
	...

08001820 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001824:	4b08      	ldr	r3, [pc, #32]	; (8001848 <HAL_Init+0x28>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	4a07      	ldr	r2, [pc, #28]	; (8001848 <HAL_Init+0x28>)
 800182a:	f043 0310 	orr.w	r3, r3, #16
 800182e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001830:	2003      	movs	r0, #3
 8001832:	f000 f923 	bl	8001a7c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001836:	200f      	movs	r0, #15
 8001838:	f000 f808 	bl	800184c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800183c:	f7ff fcd0 	bl	80011e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001840:	2300      	movs	r3, #0
}
 8001842:	4618      	mov	r0, r3
 8001844:	bd80      	pop	{r7, pc}
 8001846:	bf00      	nop
 8001848:	40022000 	.word	0x40022000

0800184c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b082      	sub	sp, #8
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001854:	4b12      	ldr	r3, [pc, #72]	; (80018a0 <HAL_InitTick+0x54>)
 8001856:	681a      	ldr	r2, [r3, #0]
 8001858:	4b12      	ldr	r3, [pc, #72]	; (80018a4 <HAL_InitTick+0x58>)
 800185a:	781b      	ldrb	r3, [r3, #0]
 800185c:	4619      	mov	r1, r3
 800185e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001862:	fbb3 f3f1 	udiv	r3, r3, r1
 8001866:	fbb2 f3f3 	udiv	r3, r2, r3
 800186a:	4618      	mov	r0, r3
 800186c:	f000 f93b 	bl	8001ae6 <HAL_SYSTICK_Config>
 8001870:	4603      	mov	r3, r0
 8001872:	2b00      	cmp	r3, #0
 8001874:	d001      	beq.n	800187a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001876:	2301      	movs	r3, #1
 8001878:	e00e      	b.n	8001898 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	2b0f      	cmp	r3, #15
 800187e:	d80a      	bhi.n	8001896 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001880:	2200      	movs	r2, #0
 8001882:	6879      	ldr	r1, [r7, #4]
 8001884:	f04f 30ff 	mov.w	r0, #4294967295
 8001888:	f000 f903 	bl	8001a92 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800188c:	4a06      	ldr	r2, [pc, #24]	; (80018a8 <HAL_InitTick+0x5c>)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001892:	2300      	movs	r3, #0
 8001894:	e000      	b.n	8001898 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001896:	2301      	movs	r3, #1
}
 8001898:	4618      	mov	r0, r3
 800189a:	3708      	adds	r7, #8
 800189c:	46bd      	mov	sp, r7
 800189e:	bd80      	pop	{r7, pc}
 80018a0:	2000000c 	.word	0x2000000c
 80018a4:	20000014 	.word	0x20000014
 80018a8:	20000010 	.word	0x20000010

080018ac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018ac:	b480      	push	{r7}
 80018ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018b0:	4b05      	ldr	r3, [pc, #20]	; (80018c8 <HAL_IncTick+0x1c>)
 80018b2:	781b      	ldrb	r3, [r3, #0]
 80018b4:	461a      	mov	r2, r3
 80018b6:	4b05      	ldr	r3, [pc, #20]	; (80018cc <HAL_IncTick+0x20>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	4413      	add	r3, r2
 80018bc:	4a03      	ldr	r2, [pc, #12]	; (80018cc <HAL_IncTick+0x20>)
 80018be:	6013      	str	r3, [r2, #0]
}
 80018c0:	bf00      	nop
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bc80      	pop	{r7}
 80018c6:	4770      	bx	lr
 80018c8:	20000014 	.word	0x20000014
 80018cc:	200000fc 	.word	0x200000fc

080018d0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018d0:	b480      	push	{r7}
 80018d2:	af00      	add	r7, sp, #0
  return uwTick;
 80018d4:	4b02      	ldr	r3, [pc, #8]	; (80018e0 <HAL_GetTick+0x10>)
 80018d6:	681b      	ldr	r3, [r3, #0]
}
 80018d8:	4618      	mov	r0, r3
 80018da:	46bd      	mov	sp, r7
 80018dc:	bc80      	pop	{r7}
 80018de:	4770      	bx	lr
 80018e0:	200000fc 	.word	0x200000fc

080018e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018e4:	b480      	push	{r7}
 80018e6:	b085      	sub	sp, #20
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	f003 0307 	and.w	r3, r3, #7
 80018f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018f4:	4b0c      	ldr	r3, [pc, #48]	; (8001928 <__NVIC_SetPriorityGrouping+0x44>)
 80018f6:	68db      	ldr	r3, [r3, #12]
 80018f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018fa:	68ba      	ldr	r2, [r7, #8]
 80018fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001900:	4013      	ands	r3, r2
 8001902:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001908:	68bb      	ldr	r3, [r7, #8]
 800190a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800190c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001910:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001914:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001916:	4a04      	ldr	r2, [pc, #16]	; (8001928 <__NVIC_SetPriorityGrouping+0x44>)
 8001918:	68bb      	ldr	r3, [r7, #8]
 800191a:	60d3      	str	r3, [r2, #12]
}
 800191c:	bf00      	nop
 800191e:	3714      	adds	r7, #20
 8001920:	46bd      	mov	sp, r7
 8001922:	bc80      	pop	{r7}
 8001924:	4770      	bx	lr
 8001926:	bf00      	nop
 8001928:	e000ed00 	.word	0xe000ed00

0800192c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800192c:	b480      	push	{r7}
 800192e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001930:	4b04      	ldr	r3, [pc, #16]	; (8001944 <__NVIC_GetPriorityGrouping+0x18>)
 8001932:	68db      	ldr	r3, [r3, #12]
 8001934:	0a1b      	lsrs	r3, r3, #8
 8001936:	f003 0307 	and.w	r3, r3, #7
}
 800193a:	4618      	mov	r0, r3
 800193c:	46bd      	mov	sp, r7
 800193e:	bc80      	pop	{r7}
 8001940:	4770      	bx	lr
 8001942:	bf00      	nop
 8001944:	e000ed00 	.word	0xe000ed00

08001948 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001948:	b480      	push	{r7}
 800194a:	b083      	sub	sp, #12
 800194c:	af00      	add	r7, sp, #0
 800194e:	4603      	mov	r3, r0
 8001950:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001952:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001956:	2b00      	cmp	r3, #0
 8001958:	db0b      	blt.n	8001972 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800195a:	79fb      	ldrb	r3, [r7, #7]
 800195c:	f003 021f 	and.w	r2, r3, #31
 8001960:	4906      	ldr	r1, [pc, #24]	; (800197c <__NVIC_EnableIRQ+0x34>)
 8001962:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001966:	095b      	lsrs	r3, r3, #5
 8001968:	2001      	movs	r0, #1
 800196a:	fa00 f202 	lsl.w	r2, r0, r2
 800196e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001972:	bf00      	nop
 8001974:	370c      	adds	r7, #12
 8001976:	46bd      	mov	sp, r7
 8001978:	bc80      	pop	{r7}
 800197a:	4770      	bx	lr
 800197c:	e000e100 	.word	0xe000e100

08001980 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001980:	b480      	push	{r7}
 8001982:	b083      	sub	sp, #12
 8001984:	af00      	add	r7, sp, #0
 8001986:	4603      	mov	r3, r0
 8001988:	6039      	str	r1, [r7, #0]
 800198a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800198c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001990:	2b00      	cmp	r3, #0
 8001992:	db0a      	blt.n	80019aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	b2da      	uxtb	r2, r3
 8001998:	490c      	ldr	r1, [pc, #48]	; (80019cc <__NVIC_SetPriority+0x4c>)
 800199a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800199e:	0112      	lsls	r2, r2, #4
 80019a0:	b2d2      	uxtb	r2, r2
 80019a2:	440b      	add	r3, r1
 80019a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019a8:	e00a      	b.n	80019c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	b2da      	uxtb	r2, r3
 80019ae:	4908      	ldr	r1, [pc, #32]	; (80019d0 <__NVIC_SetPriority+0x50>)
 80019b0:	79fb      	ldrb	r3, [r7, #7]
 80019b2:	f003 030f 	and.w	r3, r3, #15
 80019b6:	3b04      	subs	r3, #4
 80019b8:	0112      	lsls	r2, r2, #4
 80019ba:	b2d2      	uxtb	r2, r2
 80019bc:	440b      	add	r3, r1
 80019be:	761a      	strb	r2, [r3, #24]
}
 80019c0:	bf00      	nop
 80019c2:	370c      	adds	r7, #12
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bc80      	pop	{r7}
 80019c8:	4770      	bx	lr
 80019ca:	bf00      	nop
 80019cc:	e000e100 	.word	0xe000e100
 80019d0:	e000ed00 	.word	0xe000ed00

080019d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019d4:	b480      	push	{r7}
 80019d6:	b089      	sub	sp, #36	; 0x24
 80019d8:	af00      	add	r7, sp, #0
 80019da:	60f8      	str	r0, [r7, #12]
 80019dc:	60b9      	str	r1, [r7, #8]
 80019de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	f003 0307 	and.w	r3, r3, #7
 80019e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019e8:	69fb      	ldr	r3, [r7, #28]
 80019ea:	f1c3 0307 	rsb	r3, r3, #7
 80019ee:	2b04      	cmp	r3, #4
 80019f0:	bf28      	it	cs
 80019f2:	2304      	movcs	r3, #4
 80019f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019f6:	69fb      	ldr	r3, [r7, #28]
 80019f8:	3304      	adds	r3, #4
 80019fa:	2b06      	cmp	r3, #6
 80019fc:	d902      	bls.n	8001a04 <NVIC_EncodePriority+0x30>
 80019fe:	69fb      	ldr	r3, [r7, #28]
 8001a00:	3b03      	subs	r3, #3
 8001a02:	e000      	b.n	8001a06 <NVIC_EncodePriority+0x32>
 8001a04:	2300      	movs	r3, #0
 8001a06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a08:	f04f 32ff 	mov.w	r2, #4294967295
 8001a0c:	69bb      	ldr	r3, [r7, #24]
 8001a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a12:	43da      	mvns	r2, r3
 8001a14:	68bb      	ldr	r3, [r7, #8]
 8001a16:	401a      	ands	r2, r3
 8001a18:	697b      	ldr	r3, [r7, #20]
 8001a1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a1c:	f04f 31ff 	mov.w	r1, #4294967295
 8001a20:	697b      	ldr	r3, [r7, #20]
 8001a22:	fa01 f303 	lsl.w	r3, r1, r3
 8001a26:	43d9      	mvns	r1, r3
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a2c:	4313      	orrs	r3, r2
         );
}
 8001a2e:	4618      	mov	r0, r3
 8001a30:	3724      	adds	r7, #36	; 0x24
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bc80      	pop	{r7}
 8001a36:	4770      	bx	lr

08001a38 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b082      	sub	sp, #8
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	3b01      	subs	r3, #1
 8001a44:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a48:	d301      	bcc.n	8001a4e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	e00f      	b.n	8001a6e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a4e:	4a0a      	ldr	r2, [pc, #40]	; (8001a78 <SysTick_Config+0x40>)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	3b01      	subs	r3, #1
 8001a54:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a56:	210f      	movs	r1, #15
 8001a58:	f04f 30ff 	mov.w	r0, #4294967295
 8001a5c:	f7ff ff90 	bl	8001980 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a60:	4b05      	ldr	r3, [pc, #20]	; (8001a78 <SysTick_Config+0x40>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a66:	4b04      	ldr	r3, [pc, #16]	; (8001a78 <SysTick_Config+0x40>)
 8001a68:	2207      	movs	r2, #7
 8001a6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a6c:	2300      	movs	r3, #0
}
 8001a6e:	4618      	mov	r0, r3
 8001a70:	3708      	adds	r7, #8
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}
 8001a76:	bf00      	nop
 8001a78:	e000e010 	.word	0xe000e010

08001a7c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b082      	sub	sp, #8
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a84:	6878      	ldr	r0, [r7, #4]
 8001a86:	f7ff ff2d 	bl	80018e4 <__NVIC_SetPriorityGrouping>
}
 8001a8a:	bf00      	nop
 8001a8c:	3708      	adds	r7, #8
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}

08001a92 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a92:	b580      	push	{r7, lr}
 8001a94:	b086      	sub	sp, #24
 8001a96:	af00      	add	r7, sp, #0
 8001a98:	4603      	mov	r3, r0
 8001a9a:	60b9      	str	r1, [r7, #8]
 8001a9c:	607a      	str	r2, [r7, #4]
 8001a9e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001aa4:	f7ff ff42 	bl	800192c <__NVIC_GetPriorityGrouping>
 8001aa8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001aaa:	687a      	ldr	r2, [r7, #4]
 8001aac:	68b9      	ldr	r1, [r7, #8]
 8001aae:	6978      	ldr	r0, [r7, #20]
 8001ab0:	f7ff ff90 	bl	80019d4 <NVIC_EncodePriority>
 8001ab4:	4602      	mov	r2, r0
 8001ab6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001aba:	4611      	mov	r1, r2
 8001abc:	4618      	mov	r0, r3
 8001abe:	f7ff ff5f 	bl	8001980 <__NVIC_SetPriority>
}
 8001ac2:	bf00      	nop
 8001ac4:	3718      	adds	r7, #24
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}

08001aca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001aca:	b580      	push	{r7, lr}
 8001acc:	b082      	sub	sp, #8
 8001ace:	af00      	add	r7, sp, #0
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ad4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f7ff ff35 	bl	8001948 <__NVIC_EnableIRQ>
}
 8001ade:	bf00      	nop
 8001ae0:	3708      	adds	r7, #8
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}

08001ae6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ae6:	b580      	push	{r7, lr}
 8001ae8:	b082      	sub	sp, #8
 8001aea:	af00      	add	r7, sp, #0
 8001aec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001aee:	6878      	ldr	r0, [r7, #4]
 8001af0:	f7ff ffa2 	bl	8001a38 <SysTick_Config>
 8001af4:	4603      	mov	r3, r0
}
 8001af6:	4618      	mov	r0, r3
 8001af8:	3708      	adds	r7, #8
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}
	...

08001b00 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b00:	b480      	push	{r7}
 8001b02:	b08b      	sub	sp, #44	; 0x2c
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
 8001b08:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b12:	e161      	b.n	8001dd8 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001b14:	2201      	movs	r2, #1
 8001b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b18:	fa02 f303 	lsl.w	r3, r2, r3
 8001b1c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	69fa      	ldr	r2, [r7, #28]
 8001b24:	4013      	ands	r3, r2
 8001b26:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001b28:	69ba      	ldr	r2, [r7, #24]
 8001b2a:	69fb      	ldr	r3, [r7, #28]
 8001b2c:	429a      	cmp	r2, r3
 8001b2e:	f040 8150 	bne.w	8001dd2 <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	4a97      	ldr	r2, [pc, #604]	; (8001d94 <HAL_GPIO_Init+0x294>)
 8001b38:	4293      	cmp	r3, r2
 8001b3a:	d05e      	beq.n	8001bfa <HAL_GPIO_Init+0xfa>
 8001b3c:	4a95      	ldr	r2, [pc, #596]	; (8001d94 <HAL_GPIO_Init+0x294>)
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d875      	bhi.n	8001c2e <HAL_GPIO_Init+0x12e>
 8001b42:	4a95      	ldr	r2, [pc, #596]	; (8001d98 <HAL_GPIO_Init+0x298>)
 8001b44:	4293      	cmp	r3, r2
 8001b46:	d058      	beq.n	8001bfa <HAL_GPIO_Init+0xfa>
 8001b48:	4a93      	ldr	r2, [pc, #588]	; (8001d98 <HAL_GPIO_Init+0x298>)
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d86f      	bhi.n	8001c2e <HAL_GPIO_Init+0x12e>
 8001b4e:	4a93      	ldr	r2, [pc, #588]	; (8001d9c <HAL_GPIO_Init+0x29c>)
 8001b50:	4293      	cmp	r3, r2
 8001b52:	d052      	beq.n	8001bfa <HAL_GPIO_Init+0xfa>
 8001b54:	4a91      	ldr	r2, [pc, #580]	; (8001d9c <HAL_GPIO_Init+0x29c>)
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d869      	bhi.n	8001c2e <HAL_GPIO_Init+0x12e>
 8001b5a:	4a91      	ldr	r2, [pc, #580]	; (8001da0 <HAL_GPIO_Init+0x2a0>)
 8001b5c:	4293      	cmp	r3, r2
 8001b5e:	d04c      	beq.n	8001bfa <HAL_GPIO_Init+0xfa>
 8001b60:	4a8f      	ldr	r2, [pc, #572]	; (8001da0 <HAL_GPIO_Init+0x2a0>)
 8001b62:	4293      	cmp	r3, r2
 8001b64:	d863      	bhi.n	8001c2e <HAL_GPIO_Init+0x12e>
 8001b66:	4a8f      	ldr	r2, [pc, #572]	; (8001da4 <HAL_GPIO_Init+0x2a4>)
 8001b68:	4293      	cmp	r3, r2
 8001b6a:	d046      	beq.n	8001bfa <HAL_GPIO_Init+0xfa>
 8001b6c:	4a8d      	ldr	r2, [pc, #564]	; (8001da4 <HAL_GPIO_Init+0x2a4>)
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d85d      	bhi.n	8001c2e <HAL_GPIO_Init+0x12e>
 8001b72:	2b12      	cmp	r3, #18
 8001b74:	d82a      	bhi.n	8001bcc <HAL_GPIO_Init+0xcc>
 8001b76:	2b12      	cmp	r3, #18
 8001b78:	d859      	bhi.n	8001c2e <HAL_GPIO_Init+0x12e>
 8001b7a:	a201      	add	r2, pc, #4	; (adr r2, 8001b80 <HAL_GPIO_Init+0x80>)
 8001b7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b80:	08001bfb 	.word	0x08001bfb
 8001b84:	08001bd5 	.word	0x08001bd5
 8001b88:	08001be7 	.word	0x08001be7
 8001b8c:	08001c29 	.word	0x08001c29
 8001b90:	08001c2f 	.word	0x08001c2f
 8001b94:	08001c2f 	.word	0x08001c2f
 8001b98:	08001c2f 	.word	0x08001c2f
 8001b9c:	08001c2f 	.word	0x08001c2f
 8001ba0:	08001c2f 	.word	0x08001c2f
 8001ba4:	08001c2f 	.word	0x08001c2f
 8001ba8:	08001c2f 	.word	0x08001c2f
 8001bac:	08001c2f 	.word	0x08001c2f
 8001bb0:	08001c2f 	.word	0x08001c2f
 8001bb4:	08001c2f 	.word	0x08001c2f
 8001bb8:	08001c2f 	.word	0x08001c2f
 8001bbc:	08001c2f 	.word	0x08001c2f
 8001bc0:	08001c2f 	.word	0x08001c2f
 8001bc4:	08001bdd 	.word	0x08001bdd
 8001bc8:	08001bf1 	.word	0x08001bf1
 8001bcc:	4a76      	ldr	r2, [pc, #472]	; (8001da8 <HAL_GPIO_Init+0x2a8>)
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d013      	beq.n	8001bfa <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001bd2:	e02c      	b.n	8001c2e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	68db      	ldr	r3, [r3, #12]
 8001bd8:	623b      	str	r3, [r7, #32]
          break;
 8001bda:	e029      	b.n	8001c30 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	68db      	ldr	r3, [r3, #12]
 8001be0:	3304      	adds	r3, #4
 8001be2:	623b      	str	r3, [r7, #32]
          break;
 8001be4:	e024      	b.n	8001c30 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	68db      	ldr	r3, [r3, #12]
 8001bea:	3308      	adds	r3, #8
 8001bec:	623b      	str	r3, [r7, #32]
          break;
 8001bee:	e01f      	b.n	8001c30 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	68db      	ldr	r3, [r3, #12]
 8001bf4:	330c      	adds	r3, #12
 8001bf6:	623b      	str	r3, [r7, #32]
          break;
 8001bf8:	e01a      	b.n	8001c30 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	689b      	ldr	r3, [r3, #8]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d102      	bne.n	8001c08 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001c02:	2304      	movs	r3, #4
 8001c04:	623b      	str	r3, [r7, #32]
          break;
 8001c06:	e013      	b.n	8001c30 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	689b      	ldr	r3, [r3, #8]
 8001c0c:	2b01      	cmp	r3, #1
 8001c0e:	d105      	bne.n	8001c1c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001c10:	2308      	movs	r3, #8
 8001c12:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	69fa      	ldr	r2, [r7, #28]
 8001c18:	611a      	str	r2, [r3, #16]
          break;
 8001c1a:	e009      	b.n	8001c30 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001c1c:	2308      	movs	r3, #8
 8001c1e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	69fa      	ldr	r2, [r7, #28]
 8001c24:	615a      	str	r2, [r3, #20]
          break;
 8001c26:	e003      	b.n	8001c30 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	623b      	str	r3, [r7, #32]
          break;
 8001c2c:	e000      	b.n	8001c30 <HAL_GPIO_Init+0x130>
          break;
 8001c2e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001c30:	69bb      	ldr	r3, [r7, #24]
 8001c32:	2bff      	cmp	r3, #255	; 0xff
 8001c34:	d801      	bhi.n	8001c3a <HAL_GPIO_Init+0x13a>
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	e001      	b.n	8001c3e <HAL_GPIO_Init+0x13e>
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	3304      	adds	r3, #4
 8001c3e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001c40:	69bb      	ldr	r3, [r7, #24]
 8001c42:	2bff      	cmp	r3, #255	; 0xff
 8001c44:	d802      	bhi.n	8001c4c <HAL_GPIO_Init+0x14c>
 8001c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c48:	009b      	lsls	r3, r3, #2
 8001c4a:	e002      	b.n	8001c52 <HAL_GPIO_Init+0x152>
 8001c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c4e:	3b08      	subs	r3, #8
 8001c50:	009b      	lsls	r3, r3, #2
 8001c52:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001c54:	697b      	ldr	r3, [r7, #20]
 8001c56:	681a      	ldr	r2, [r3, #0]
 8001c58:	210f      	movs	r1, #15
 8001c5a:	693b      	ldr	r3, [r7, #16]
 8001c5c:	fa01 f303 	lsl.w	r3, r1, r3
 8001c60:	43db      	mvns	r3, r3
 8001c62:	401a      	ands	r2, r3
 8001c64:	6a39      	ldr	r1, [r7, #32]
 8001c66:	693b      	ldr	r3, [r7, #16]
 8001c68:	fa01 f303 	lsl.w	r3, r1, r3
 8001c6c:	431a      	orrs	r2, r3
 8001c6e:	697b      	ldr	r3, [r7, #20]
 8001c70:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	f000 80a9 	beq.w	8001dd2 <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001c80:	4b4a      	ldr	r3, [pc, #296]	; (8001dac <HAL_GPIO_Init+0x2ac>)
 8001c82:	699b      	ldr	r3, [r3, #24]
 8001c84:	4a49      	ldr	r2, [pc, #292]	; (8001dac <HAL_GPIO_Init+0x2ac>)
 8001c86:	f043 0301 	orr.w	r3, r3, #1
 8001c8a:	6193      	str	r3, [r2, #24]
 8001c8c:	4b47      	ldr	r3, [pc, #284]	; (8001dac <HAL_GPIO_Init+0x2ac>)
 8001c8e:	699b      	ldr	r3, [r3, #24]
 8001c90:	f003 0301 	and.w	r3, r3, #1
 8001c94:	60bb      	str	r3, [r7, #8]
 8001c96:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001c98:	4a45      	ldr	r2, [pc, #276]	; (8001db0 <HAL_GPIO_Init+0x2b0>)
 8001c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c9c:	089b      	lsrs	r3, r3, #2
 8001c9e:	3302      	adds	r3, #2
 8001ca0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ca4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ca8:	f003 0303 	and.w	r3, r3, #3
 8001cac:	009b      	lsls	r3, r3, #2
 8001cae:	220f      	movs	r2, #15
 8001cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb4:	43db      	mvns	r3, r3
 8001cb6:	68fa      	ldr	r2, [r7, #12]
 8001cb8:	4013      	ands	r3, r2
 8001cba:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	4a3d      	ldr	r2, [pc, #244]	; (8001db4 <HAL_GPIO_Init+0x2b4>)
 8001cc0:	4293      	cmp	r3, r2
 8001cc2:	d00d      	beq.n	8001ce0 <HAL_GPIO_Init+0x1e0>
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	4a3c      	ldr	r2, [pc, #240]	; (8001db8 <HAL_GPIO_Init+0x2b8>)
 8001cc8:	4293      	cmp	r3, r2
 8001cca:	d007      	beq.n	8001cdc <HAL_GPIO_Init+0x1dc>
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	4a3b      	ldr	r2, [pc, #236]	; (8001dbc <HAL_GPIO_Init+0x2bc>)
 8001cd0:	4293      	cmp	r3, r2
 8001cd2:	d101      	bne.n	8001cd8 <HAL_GPIO_Init+0x1d8>
 8001cd4:	2302      	movs	r3, #2
 8001cd6:	e004      	b.n	8001ce2 <HAL_GPIO_Init+0x1e2>
 8001cd8:	2303      	movs	r3, #3
 8001cda:	e002      	b.n	8001ce2 <HAL_GPIO_Init+0x1e2>
 8001cdc:	2301      	movs	r3, #1
 8001cde:	e000      	b.n	8001ce2 <HAL_GPIO_Init+0x1e2>
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ce4:	f002 0203 	and.w	r2, r2, #3
 8001ce8:	0092      	lsls	r2, r2, #2
 8001cea:	4093      	lsls	r3, r2
 8001cec:	68fa      	ldr	r2, [r7, #12]
 8001cee:	4313      	orrs	r3, r2
 8001cf0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001cf2:	492f      	ldr	r1, [pc, #188]	; (8001db0 <HAL_GPIO_Init+0x2b0>)
 8001cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cf6:	089b      	lsrs	r3, r3, #2
 8001cf8:	3302      	adds	r3, #2
 8001cfa:	68fa      	ldr	r2, [r7, #12]
 8001cfc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d006      	beq.n	8001d1a <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001d0c:	4b2c      	ldr	r3, [pc, #176]	; (8001dc0 <HAL_GPIO_Init+0x2c0>)
 8001d0e:	689a      	ldr	r2, [r3, #8]
 8001d10:	492b      	ldr	r1, [pc, #172]	; (8001dc0 <HAL_GPIO_Init+0x2c0>)
 8001d12:	69bb      	ldr	r3, [r7, #24]
 8001d14:	4313      	orrs	r3, r2
 8001d16:	608b      	str	r3, [r1, #8]
 8001d18:	e006      	b.n	8001d28 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001d1a:	4b29      	ldr	r3, [pc, #164]	; (8001dc0 <HAL_GPIO_Init+0x2c0>)
 8001d1c:	689a      	ldr	r2, [r3, #8]
 8001d1e:	69bb      	ldr	r3, [r7, #24]
 8001d20:	43db      	mvns	r3, r3
 8001d22:	4927      	ldr	r1, [pc, #156]	; (8001dc0 <HAL_GPIO_Init+0x2c0>)
 8001d24:	4013      	ands	r3, r2
 8001d26:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d006      	beq.n	8001d42 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001d34:	4b22      	ldr	r3, [pc, #136]	; (8001dc0 <HAL_GPIO_Init+0x2c0>)
 8001d36:	68da      	ldr	r2, [r3, #12]
 8001d38:	4921      	ldr	r1, [pc, #132]	; (8001dc0 <HAL_GPIO_Init+0x2c0>)
 8001d3a:	69bb      	ldr	r3, [r7, #24]
 8001d3c:	4313      	orrs	r3, r2
 8001d3e:	60cb      	str	r3, [r1, #12]
 8001d40:	e006      	b.n	8001d50 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001d42:	4b1f      	ldr	r3, [pc, #124]	; (8001dc0 <HAL_GPIO_Init+0x2c0>)
 8001d44:	68da      	ldr	r2, [r3, #12]
 8001d46:	69bb      	ldr	r3, [r7, #24]
 8001d48:	43db      	mvns	r3, r3
 8001d4a:	491d      	ldr	r1, [pc, #116]	; (8001dc0 <HAL_GPIO_Init+0x2c0>)
 8001d4c:	4013      	ands	r3, r2
 8001d4e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d006      	beq.n	8001d6a <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001d5c:	4b18      	ldr	r3, [pc, #96]	; (8001dc0 <HAL_GPIO_Init+0x2c0>)
 8001d5e:	685a      	ldr	r2, [r3, #4]
 8001d60:	4917      	ldr	r1, [pc, #92]	; (8001dc0 <HAL_GPIO_Init+0x2c0>)
 8001d62:	69bb      	ldr	r3, [r7, #24]
 8001d64:	4313      	orrs	r3, r2
 8001d66:	604b      	str	r3, [r1, #4]
 8001d68:	e006      	b.n	8001d78 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001d6a:	4b15      	ldr	r3, [pc, #84]	; (8001dc0 <HAL_GPIO_Init+0x2c0>)
 8001d6c:	685a      	ldr	r2, [r3, #4]
 8001d6e:	69bb      	ldr	r3, [r7, #24]
 8001d70:	43db      	mvns	r3, r3
 8001d72:	4913      	ldr	r1, [pc, #76]	; (8001dc0 <HAL_GPIO_Init+0x2c0>)
 8001d74:	4013      	ands	r3, r2
 8001d76:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d01f      	beq.n	8001dc4 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001d84:	4b0e      	ldr	r3, [pc, #56]	; (8001dc0 <HAL_GPIO_Init+0x2c0>)
 8001d86:	681a      	ldr	r2, [r3, #0]
 8001d88:	490d      	ldr	r1, [pc, #52]	; (8001dc0 <HAL_GPIO_Init+0x2c0>)
 8001d8a:	69bb      	ldr	r3, [r7, #24]
 8001d8c:	4313      	orrs	r3, r2
 8001d8e:	600b      	str	r3, [r1, #0]
 8001d90:	e01f      	b.n	8001dd2 <HAL_GPIO_Init+0x2d2>
 8001d92:	bf00      	nop
 8001d94:	10320000 	.word	0x10320000
 8001d98:	10310000 	.word	0x10310000
 8001d9c:	10220000 	.word	0x10220000
 8001da0:	10210000 	.word	0x10210000
 8001da4:	10120000 	.word	0x10120000
 8001da8:	10110000 	.word	0x10110000
 8001dac:	40021000 	.word	0x40021000
 8001db0:	40010000 	.word	0x40010000
 8001db4:	40010800 	.word	0x40010800
 8001db8:	40010c00 	.word	0x40010c00
 8001dbc:	40011000 	.word	0x40011000
 8001dc0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001dc4:	4b0b      	ldr	r3, [pc, #44]	; (8001df4 <HAL_GPIO_Init+0x2f4>)
 8001dc6:	681a      	ldr	r2, [r3, #0]
 8001dc8:	69bb      	ldr	r3, [r7, #24]
 8001dca:	43db      	mvns	r3, r3
 8001dcc:	4909      	ldr	r1, [pc, #36]	; (8001df4 <HAL_GPIO_Init+0x2f4>)
 8001dce:	4013      	ands	r3, r2
 8001dd0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dd4:	3301      	adds	r3, #1
 8001dd6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	681a      	ldr	r2, [r3, #0]
 8001ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dde:	fa22 f303 	lsr.w	r3, r2, r3
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	f47f ae96 	bne.w	8001b14 <HAL_GPIO_Init+0x14>
  }
}
 8001de8:	bf00      	nop
 8001dea:	bf00      	nop
 8001dec:	372c      	adds	r7, #44	; 0x2c
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bc80      	pop	{r7}
 8001df2:	4770      	bx	lr
 8001df4:	40010400 	.word	0x40010400

08001df8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	b085      	sub	sp, #20
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
 8001e00:	460b      	mov	r3, r1
 8001e02:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	689a      	ldr	r2, [r3, #8]
 8001e08:	887b      	ldrh	r3, [r7, #2]
 8001e0a:	4013      	ands	r3, r2
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d002      	beq.n	8001e16 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001e10:	2301      	movs	r3, #1
 8001e12:	73fb      	strb	r3, [r7, #15]
 8001e14:	e001      	b.n	8001e1a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001e16:	2300      	movs	r3, #0
 8001e18:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001e1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	3714      	adds	r7, #20
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bc80      	pop	{r7}
 8001e24:	4770      	bx	lr

08001e26 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e26:	b480      	push	{r7}
 8001e28:	b083      	sub	sp, #12
 8001e2a:	af00      	add	r7, sp, #0
 8001e2c:	6078      	str	r0, [r7, #4]
 8001e2e:	460b      	mov	r3, r1
 8001e30:	807b      	strh	r3, [r7, #2]
 8001e32:	4613      	mov	r3, r2
 8001e34:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001e36:	787b      	ldrb	r3, [r7, #1]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d003      	beq.n	8001e44 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e3c:	887a      	ldrh	r2, [r7, #2]
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001e42:	e003      	b.n	8001e4c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001e44:	887b      	ldrh	r3, [r7, #2]
 8001e46:	041a      	lsls	r2, r3, #16
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	611a      	str	r2, [r3, #16]
}
 8001e4c:	bf00      	nop
 8001e4e:	370c      	adds	r7, #12
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bc80      	pop	{r7}
 8001e54:	4770      	bx	lr
	...

08001e58 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b086      	sub	sp, #24
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d101      	bne.n	8001e6a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e66:	2301      	movs	r3, #1
 8001e68:	e272      	b.n	8002350 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f003 0301 	and.w	r3, r3, #1
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	f000 8087 	beq.w	8001f86 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001e78:	4b92      	ldr	r3, [pc, #584]	; (80020c4 <HAL_RCC_OscConfig+0x26c>)
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	f003 030c 	and.w	r3, r3, #12
 8001e80:	2b04      	cmp	r3, #4
 8001e82:	d00c      	beq.n	8001e9e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001e84:	4b8f      	ldr	r3, [pc, #572]	; (80020c4 <HAL_RCC_OscConfig+0x26c>)
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	f003 030c 	and.w	r3, r3, #12
 8001e8c:	2b08      	cmp	r3, #8
 8001e8e:	d112      	bne.n	8001eb6 <HAL_RCC_OscConfig+0x5e>
 8001e90:	4b8c      	ldr	r3, [pc, #560]	; (80020c4 <HAL_RCC_OscConfig+0x26c>)
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e9c:	d10b      	bne.n	8001eb6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e9e:	4b89      	ldr	r3, [pc, #548]	; (80020c4 <HAL_RCC_OscConfig+0x26c>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d06c      	beq.n	8001f84 <HAL_RCC_OscConfig+0x12c>
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d168      	bne.n	8001f84 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	e24c      	b.n	8002350 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ebe:	d106      	bne.n	8001ece <HAL_RCC_OscConfig+0x76>
 8001ec0:	4b80      	ldr	r3, [pc, #512]	; (80020c4 <HAL_RCC_OscConfig+0x26c>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4a7f      	ldr	r2, [pc, #508]	; (80020c4 <HAL_RCC_OscConfig+0x26c>)
 8001ec6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001eca:	6013      	str	r3, [r2, #0]
 8001ecc:	e02e      	b.n	8001f2c <HAL_RCC_OscConfig+0xd4>
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d10c      	bne.n	8001ef0 <HAL_RCC_OscConfig+0x98>
 8001ed6:	4b7b      	ldr	r3, [pc, #492]	; (80020c4 <HAL_RCC_OscConfig+0x26c>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	4a7a      	ldr	r2, [pc, #488]	; (80020c4 <HAL_RCC_OscConfig+0x26c>)
 8001edc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ee0:	6013      	str	r3, [r2, #0]
 8001ee2:	4b78      	ldr	r3, [pc, #480]	; (80020c4 <HAL_RCC_OscConfig+0x26c>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4a77      	ldr	r2, [pc, #476]	; (80020c4 <HAL_RCC_OscConfig+0x26c>)
 8001ee8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001eec:	6013      	str	r3, [r2, #0]
 8001eee:	e01d      	b.n	8001f2c <HAL_RCC_OscConfig+0xd4>
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ef8:	d10c      	bne.n	8001f14 <HAL_RCC_OscConfig+0xbc>
 8001efa:	4b72      	ldr	r3, [pc, #456]	; (80020c4 <HAL_RCC_OscConfig+0x26c>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4a71      	ldr	r2, [pc, #452]	; (80020c4 <HAL_RCC_OscConfig+0x26c>)
 8001f00:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f04:	6013      	str	r3, [r2, #0]
 8001f06:	4b6f      	ldr	r3, [pc, #444]	; (80020c4 <HAL_RCC_OscConfig+0x26c>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4a6e      	ldr	r2, [pc, #440]	; (80020c4 <HAL_RCC_OscConfig+0x26c>)
 8001f0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f10:	6013      	str	r3, [r2, #0]
 8001f12:	e00b      	b.n	8001f2c <HAL_RCC_OscConfig+0xd4>
 8001f14:	4b6b      	ldr	r3, [pc, #428]	; (80020c4 <HAL_RCC_OscConfig+0x26c>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4a6a      	ldr	r2, [pc, #424]	; (80020c4 <HAL_RCC_OscConfig+0x26c>)
 8001f1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f1e:	6013      	str	r3, [r2, #0]
 8001f20:	4b68      	ldr	r3, [pc, #416]	; (80020c4 <HAL_RCC_OscConfig+0x26c>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4a67      	ldr	r2, [pc, #412]	; (80020c4 <HAL_RCC_OscConfig+0x26c>)
 8001f26:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f2a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d013      	beq.n	8001f5c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f34:	f7ff fccc 	bl	80018d0 <HAL_GetTick>
 8001f38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f3a:	e008      	b.n	8001f4e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f3c:	f7ff fcc8 	bl	80018d0 <HAL_GetTick>
 8001f40:	4602      	mov	r2, r0
 8001f42:	693b      	ldr	r3, [r7, #16]
 8001f44:	1ad3      	subs	r3, r2, r3
 8001f46:	2b64      	cmp	r3, #100	; 0x64
 8001f48:	d901      	bls.n	8001f4e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001f4a:	2303      	movs	r3, #3
 8001f4c:	e200      	b.n	8002350 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f4e:	4b5d      	ldr	r3, [pc, #372]	; (80020c4 <HAL_RCC_OscConfig+0x26c>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d0f0      	beq.n	8001f3c <HAL_RCC_OscConfig+0xe4>
 8001f5a:	e014      	b.n	8001f86 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f5c:	f7ff fcb8 	bl	80018d0 <HAL_GetTick>
 8001f60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f62:	e008      	b.n	8001f76 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f64:	f7ff fcb4 	bl	80018d0 <HAL_GetTick>
 8001f68:	4602      	mov	r2, r0
 8001f6a:	693b      	ldr	r3, [r7, #16]
 8001f6c:	1ad3      	subs	r3, r2, r3
 8001f6e:	2b64      	cmp	r3, #100	; 0x64
 8001f70:	d901      	bls.n	8001f76 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001f72:	2303      	movs	r3, #3
 8001f74:	e1ec      	b.n	8002350 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f76:	4b53      	ldr	r3, [pc, #332]	; (80020c4 <HAL_RCC_OscConfig+0x26c>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d1f0      	bne.n	8001f64 <HAL_RCC_OscConfig+0x10c>
 8001f82:	e000      	b.n	8001f86 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f84:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f003 0302 	and.w	r3, r3, #2
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d063      	beq.n	800205a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001f92:	4b4c      	ldr	r3, [pc, #304]	; (80020c4 <HAL_RCC_OscConfig+0x26c>)
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	f003 030c 	and.w	r3, r3, #12
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d00b      	beq.n	8001fb6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001f9e:	4b49      	ldr	r3, [pc, #292]	; (80020c4 <HAL_RCC_OscConfig+0x26c>)
 8001fa0:	685b      	ldr	r3, [r3, #4]
 8001fa2:	f003 030c 	and.w	r3, r3, #12
 8001fa6:	2b08      	cmp	r3, #8
 8001fa8:	d11c      	bne.n	8001fe4 <HAL_RCC_OscConfig+0x18c>
 8001faa:	4b46      	ldr	r3, [pc, #280]	; (80020c4 <HAL_RCC_OscConfig+0x26c>)
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d116      	bne.n	8001fe4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fb6:	4b43      	ldr	r3, [pc, #268]	; (80020c4 <HAL_RCC_OscConfig+0x26c>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f003 0302 	and.w	r3, r3, #2
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d005      	beq.n	8001fce <HAL_RCC_OscConfig+0x176>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	691b      	ldr	r3, [r3, #16]
 8001fc6:	2b01      	cmp	r3, #1
 8001fc8:	d001      	beq.n	8001fce <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001fca:	2301      	movs	r3, #1
 8001fcc:	e1c0      	b.n	8002350 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fce:	4b3d      	ldr	r3, [pc, #244]	; (80020c4 <HAL_RCC_OscConfig+0x26c>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	695b      	ldr	r3, [r3, #20]
 8001fda:	00db      	lsls	r3, r3, #3
 8001fdc:	4939      	ldr	r1, [pc, #228]	; (80020c4 <HAL_RCC_OscConfig+0x26c>)
 8001fde:	4313      	orrs	r3, r2
 8001fe0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fe2:	e03a      	b.n	800205a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	691b      	ldr	r3, [r3, #16]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d020      	beq.n	800202e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001fec:	4b36      	ldr	r3, [pc, #216]	; (80020c8 <HAL_RCC_OscConfig+0x270>)
 8001fee:	2201      	movs	r2, #1
 8001ff0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ff2:	f7ff fc6d 	bl	80018d0 <HAL_GetTick>
 8001ff6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ff8:	e008      	b.n	800200c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ffa:	f7ff fc69 	bl	80018d0 <HAL_GetTick>
 8001ffe:	4602      	mov	r2, r0
 8002000:	693b      	ldr	r3, [r7, #16]
 8002002:	1ad3      	subs	r3, r2, r3
 8002004:	2b02      	cmp	r3, #2
 8002006:	d901      	bls.n	800200c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002008:	2303      	movs	r3, #3
 800200a:	e1a1      	b.n	8002350 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800200c:	4b2d      	ldr	r3, [pc, #180]	; (80020c4 <HAL_RCC_OscConfig+0x26c>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f003 0302 	and.w	r3, r3, #2
 8002014:	2b00      	cmp	r3, #0
 8002016:	d0f0      	beq.n	8001ffa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002018:	4b2a      	ldr	r3, [pc, #168]	; (80020c4 <HAL_RCC_OscConfig+0x26c>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	695b      	ldr	r3, [r3, #20]
 8002024:	00db      	lsls	r3, r3, #3
 8002026:	4927      	ldr	r1, [pc, #156]	; (80020c4 <HAL_RCC_OscConfig+0x26c>)
 8002028:	4313      	orrs	r3, r2
 800202a:	600b      	str	r3, [r1, #0]
 800202c:	e015      	b.n	800205a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800202e:	4b26      	ldr	r3, [pc, #152]	; (80020c8 <HAL_RCC_OscConfig+0x270>)
 8002030:	2200      	movs	r2, #0
 8002032:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002034:	f7ff fc4c 	bl	80018d0 <HAL_GetTick>
 8002038:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800203a:	e008      	b.n	800204e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800203c:	f7ff fc48 	bl	80018d0 <HAL_GetTick>
 8002040:	4602      	mov	r2, r0
 8002042:	693b      	ldr	r3, [r7, #16]
 8002044:	1ad3      	subs	r3, r2, r3
 8002046:	2b02      	cmp	r3, #2
 8002048:	d901      	bls.n	800204e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800204a:	2303      	movs	r3, #3
 800204c:	e180      	b.n	8002350 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800204e:	4b1d      	ldr	r3, [pc, #116]	; (80020c4 <HAL_RCC_OscConfig+0x26c>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f003 0302 	and.w	r3, r3, #2
 8002056:	2b00      	cmp	r3, #0
 8002058:	d1f0      	bne.n	800203c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f003 0308 	and.w	r3, r3, #8
 8002062:	2b00      	cmp	r3, #0
 8002064:	d03a      	beq.n	80020dc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	699b      	ldr	r3, [r3, #24]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d019      	beq.n	80020a2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800206e:	4b17      	ldr	r3, [pc, #92]	; (80020cc <HAL_RCC_OscConfig+0x274>)
 8002070:	2201      	movs	r2, #1
 8002072:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002074:	f7ff fc2c 	bl	80018d0 <HAL_GetTick>
 8002078:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800207a:	e008      	b.n	800208e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800207c:	f7ff fc28 	bl	80018d0 <HAL_GetTick>
 8002080:	4602      	mov	r2, r0
 8002082:	693b      	ldr	r3, [r7, #16]
 8002084:	1ad3      	subs	r3, r2, r3
 8002086:	2b02      	cmp	r3, #2
 8002088:	d901      	bls.n	800208e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800208a:	2303      	movs	r3, #3
 800208c:	e160      	b.n	8002350 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800208e:	4b0d      	ldr	r3, [pc, #52]	; (80020c4 <HAL_RCC_OscConfig+0x26c>)
 8002090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002092:	f003 0302 	and.w	r3, r3, #2
 8002096:	2b00      	cmp	r3, #0
 8002098:	d0f0      	beq.n	800207c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800209a:	2001      	movs	r0, #1
 800209c:	f000 fa9c 	bl	80025d8 <RCC_Delay>
 80020a0:	e01c      	b.n	80020dc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020a2:	4b0a      	ldr	r3, [pc, #40]	; (80020cc <HAL_RCC_OscConfig+0x274>)
 80020a4:	2200      	movs	r2, #0
 80020a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020a8:	f7ff fc12 	bl	80018d0 <HAL_GetTick>
 80020ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020ae:	e00f      	b.n	80020d0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020b0:	f7ff fc0e 	bl	80018d0 <HAL_GetTick>
 80020b4:	4602      	mov	r2, r0
 80020b6:	693b      	ldr	r3, [r7, #16]
 80020b8:	1ad3      	subs	r3, r2, r3
 80020ba:	2b02      	cmp	r3, #2
 80020bc:	d908      	bls.n	80020d0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80020be:	2303      	movs	r3, #3
 80020c0:	e146      	b.n	8002350 <HAL_RCC_OscConfig+0x4f8>
 80020c2:	bf00      	nop
 80020c4:	40021000 	.word	0x40021000
 80020c8:	42420000 	.word	0x42420000
 80020cc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020d0:	4b92      	ldr	r3, [pc, #584]	; (800231c <HAL_RCC_OscConfig+0x4c4>)
 80020d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020d4:	f003 0302 	and.w	r3, r3, #2
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d1e9      	bne.n	80020b0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f003 0304 	and.w	r3, r3, #4
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	f000 80a6 	beq.w	8002236 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020ea:	2300      	movs	r3, #0
 80020ec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020ee:	4b8b      	ldr	r3, [pc, #556]	; (800231c <HAL_RCC_OscConfig+0x4c4>)
 80020f0:	69db      	ldr	r3, [r3, #28]
 80020f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d10d      	bne.n	8002116 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020fa:	4b88      	ldr	r3, [pc, #544]	; (800231c <HAL_RCC_OscConfig+0x4c4>)
 80020fc:	69db      	ldr	r3, [r3, #28]
 80020fe:	4a87      	ldr	r2, [pc, #540]	; (800231c <HAL_RCC_OscConfig+0x4c4>)
 8002100:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002104:	61d3      	str	r3, [r2, #28]
 8002106:	4b85      	ldr	r3, [pc, #532]	; (800231c <HAL_RCC_OscConfig+0x4c4>)
 8002108:	69db      	ldr	r3, [r3, #28]
 800210a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800210e:	60bb      	str	r3, [r7, #8]
 8002110:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002112:	2301      	movs	r3, #1
 8002114:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002116:	4b82      	ldr	r3, [pc, #520]	; (8002320 <HAL_RCC_OscConfig+0x4c8>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800211e:	2b00      	cmp	r3, #0
 8002120:	d118      	bne.n	8002154 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002122:	4b7f      	ldr	r3, [pc, #508]	; (8002320 <HAL_RCC_OscConfig+0x4c8>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	4a7e      	ldr	r2, [pc, #504]	; (8002320 <HAL_RCC_OscConfig+0x4c8>)
 8002128:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800212c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800212e:	f7ff fbcf 	bl	80018d0 <HAL_GetTick>
 8002132:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002134:	e008      	b.n	8002148 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002136:	f7ff fbcb 	bl	80018d0 <HAL_GetTick>
 800213a:	4602      	mov	r2, r0
 800213c:	693b      	ldr	r3, [r7, #16]
 800213e:	1ad3      	subs	r3, r2, r3
 8002140:	2b64      	cmp	r3, #100	; 0x64
 8002142:	d901      	bls.n	8002148 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002144:	2303      	movs	r3, #3
 8002146:	e103      	b.n	8002350 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002148:	4b75      	ldr	r3, [pc, #468]	; (8002320 <HAL_RCC_OscConfig+0x4c8>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002150:	2b00      	cmp	r3, #0
 8002152:	d0f0      	beq.n	8002136 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	68db      	ldr	r3, [r3, #12]
 8002158:	2b01      	cmp	r3, #1
 800215a:	d106      	bne.n	800216a <HAL_RCC_OscConfig+0x312>
 800215c:	4b6f      	ldr	r3, [pc, #444]	; (800231c <HAL_RCC_OscConfig+0x4c4>)
 800215e:	6a1b      	ldr	r3, [r3, #32]
 8002160:	4a6e      	ldr	r2, [pc, #440]	; (800231c <HAL_RCC_OscConfig+0x4c4>)
 8002162:	f043 0301 	orr.w	r3, r3, #1
 8002166:	6213      	str	r3, [r2, #32]
 8002168:	e02d      	b.n	80021c6 <HAL_RCC_OscConfig+0x36e>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	68db      	ldr	r3, [r3, #12]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d10c      	bne.n	800218c <HAL_RCC_OscConfig+0x334>
 8002172:	4b6a      	ldr	r3, [pc, #424]	; (800231c <HAL_RCC_OscConfig+0x4c4>)
 8002174:	6a1b      	ldr	r3, [r3, #32]
 8002176:	4a69      	ldr	r2, [pc, #420]	; (800231c <HAL_RCC_OscConfig+0x4c4>)
 8002178:	f023 0301 	bic.w	r3, r3, #1
 800217c:	6213      	str	r3, [r2, #32]
 800217e:	4b67      	ldr	r3, [pc, #412]	; (800231c <HAL_RCC_OscConfig+0x4c4>)
 8002180:	6a1b      	ldr	r3, [r3, #32]
 8002182:	4a66      	ldr	r2, [pc, #408]	; (800231c <HAL_RCC_OscConfig+0x4c4>)
 8002184:	f023 0304 	bic.w	r3, r3, #4
 8002188:	6213      	str	r3, [r2, #32]
 800218a:	e01c      	b.n	80021c6 <HAL_RCC_OscConfig+0x36e>
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	68db      	ldr	r3, [r3, #12]
 8002190:	2b05      	cmp	r3, #5
 8002192:	d10c      	bne.n	80021ae <HAL_RCC_OscConfig+0x356>
 8002194:	4b61      	ldr	r3, [pc, #388]	; (800231c <HAL_RCC_OscConfig+0x4c4>)
 8002196:	6a1b      	ldr	r3, [r3, #32]
 8002198:	4a60      	ldr	r2, [pc, #384]	; (800231c <HAL_RCC_OscConfig+0x4c4>)
 800219a:	f043 0304 	orr.w	r3, r3, #4
 800219e:	6213      	str	r3, [r2, #32]
 80021a0:	4b5e      	ldr	r3, [pc, #376]	; (800231c <HAL_RCC_OscConfig+0x4c4>)
 80021a2:	6a1b      	ldr	r3, [r3, #32]
 80021a4:	4a5d      	ldr	r2, [pc, #372]	; (800231c <HAL_RCC_OscConfig+0x4c4>)
 80021a6:	f043 0301 	orr.w	r3, r3, #1
 80021aa:	6213      	str	r3, [r2, #32]
 80021ac:	e00b      	b.n	80021c6 <HAL_RCC_OscConfig+0x36e>
 80021ae:	4b5b      	ldr	r3, [pc, #364]	; (800231c <HAL_RCC_OscConfig+0x4c4>)
 80021b0:	6a1b      	ldr	r3, [r3, #32]
 80021b2:	4a5a      	ldr	r2, [pc, #360]	; (800231c <HAL_RCC_OscConfig+0x4c4>)
 80021b4:	f023 0301 	bic.w	r3, r3, #1
 80021b8:	6213      	str	r3, [r2, #32]
 80021ba:	4b58      	ldr	r3, [pc, #352]	; (800231c <HAL_RCC_OscConfig+0x4c4>)
 80021bc:	6a1b      	ldr	r3, [r3, #32]
 80021be:	4a57      	ldr	r2, [pc, #348]	; (800231c <HAL_RCC_OscConfig+0x4c4>)
 80021c0:	f023 0304 	bic.w	r3, r3, #4
 80021c4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	68db      	ldr	r3, [r3, #12]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d015      	beq.n	80021fa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021ce:	f7ff fb7f 	bl	80018d0 <HAL_GetTick>
 80021d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021d4:	e00a      	b.n	80021ec <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021d6:	f7ff fb7b 	bl	80018d0 <HAL_GetTick>
 80021da:	4602      	mov	r2, r0
 80021dc:	693b      	ldr	r3, [r7, #16]
 80021de:	1ad3      	subs	r3, r2, r3
 80021e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80021e4:	4293      	cmp	r3, r2
 80021e6:	d901      	bls.n	80021ec <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80021e8:	2303      	movs	r3, #3
 80021ea:	e0b1      	b.n	8002350 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021ec:	4b4b      	ldr	r3, [pc, #300]	; (800231c <HAL_RCC_OscConfig+0x4c4>)
 80021ee:	6a1b      	ldr	r3, [r3, #32]
 80021f0:	f003 0302 	and.w	r3, r3, #2
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d0ee      	beq.n	80021d6 <HAL_RCC_OscConfig+0x37e>
 80021f8:	e014      	b.n	8002224 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021fa:	f7ff fb69 	bl	80018d0 <HAL_GetTick>
 80021fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002200:	e00a      	b.n	8002218 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002202:	f7ff fb65 	bl	80018d0 <HAL_GetTick>
 8002206:	4602      	mov	r2, r0
 8002208:	693b      	ldr	r3, [r7, #16]
 800220a:	1ad3      	subs	r3, r2, r3
 800220c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002210:	4293      	cmp	r3, r2
 8002212:	d901      	bls.n	8002218 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002214:	2303      	movs	r3, #3
 8002216:	e09b      	b.n	8002350 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002218:	4b40      	ldr	r3, [pc, #256]	; (800231c <HAL_RCC_OscConfig+0x4c4>)
 800221a:	6a1b      	ldr	r3, [r3, #32]
 800221c:	f003 0302 	and.w	r3, r3, #2
 8002220:	2b00      	cmp	r3, #0
 8002222:	d1ee      	bne.n	8002202 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002224:	7dfb      	ldrb	r3, [r7, #23]
 8002226:	2b01      	cmp	r3, #1
 8002228:	d105      	bne.n	8002236 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800222a:	4b3c      	ldr	r3, [pc, #240]	; (800231c <HAL_RCC_OscConfig+0x4c4>)
 800222c:	69db      	ldr	r3, [r3, #28]
 800222e:	4a3b      	ldr	r2, [pc, #236]	; (800231c <HAL_RCC_OscConfig+0x4c4>)
 8002230:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002234:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	69db      	ldr	r3, [r3, #28]
 800223a:	2b00      	cmp	r3, #0
 800223c:	f000 8087 	beq.w	800234e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002240:	4b36      	ldr	r3, [pc, #216]	; (800231c <HAL_RCC_OscConfig+0x4c4>)
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	f003 030c 	and.w	r3, r3, #12
 8002248:	2b08      	cmp	r3, #8
 800224a:	d061      	beq.n	8002310 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	69db      	ldr	r3, [r3, #28]
 8002250:	2b02      	cmp	r3, #2
 8002252:	d146      	bne.n	80022e2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002254:	4b33      	ldr	r3, [pc, #204]	; (8002324 <HAL_RCC_OscConfig+0x4cc>)
 8002256:	2200      	movs	r2, #0
 8002258:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800225a:	f7ff fb39 	bl	80018d0 <HAL_GetTick>
 800225e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002260:	e008      	b.n	8002274 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002262:	f7ff fb35 	bl	80018d0 <HAL_GetTick>
 8002266:	4602      	mov	r2, r0
 8002268:	693b      	ldr	r3, [r7, #16]
 800226a:	1ad3      	subs	r3, r2, r3
 800226c:	2b02      	cmp	r3, #2
 800226e:	d901      	bls.n	8002274 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002270:	2303      	movs	r3, #3
 8002272:	e06d      	b.n	8002350 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002274:	4b29      	ldr	r3, [pc, #164]	; (800231c <HAL_RCC_OscConfig+0x4c4>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800227c:	2b00      	cmp	r3, #0
 800227e:	d1f0      	bne.n	8002262 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6a1b      	ldr	r3, [r3, #32]
 8002284:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002288:	d108      	bne.n	800229c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800228a:	4b24      	ldr	r3, [pc, #144]	; (800231c <HAL_RCC_OscConfig+0x4c4>)
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	689b      	ldr	r3, [r3, #8]
 8002296:	4921      	ldr	r1, [pc, #132]	; (800231c <HAL_RCC_OscConfig+0x4c4>)
 8002298:	4313      	orrs	r3, r2
 800229a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800229c:	4b1f      	ldr	r3, [pc, #124]	; (800231c <HAL_RCC_OscConfig+0x4c4>)
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6a19      	ldr	r1, [r3, #32]
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ac:	430b      	orrs	r3, r1
 80022ae:	491b      	ldr	r1, [pc, #108]	; (800231c <HAL_RCC_OscConfig+0x4c4>)
 80022b0:	4313      	orrs	r3, r2
 80022b2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80022b4:	4b1b      	ldr	r3, [pc, #108]	; (8002324 <HAL_RCC_OscConfig+0x4cc>)
 80022b6:	2201      	movs	r2, #1
 80022b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022ba:	f7ff fb09 	bl	80018d0 <HAL_GetTick>
 80022be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80022c0:	e008      	b.n	80022d4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022c2:	f7ff fb05 	bl	80018d0 <HAL_GetTick>
 80022c6:	4602      	mov	r2, r0
 80022c8:	693b      	ldr	r3, [r7, #16]
 80022ca:	1ad3      	subs	r3, r2, r3
 80022cc:	2b02      	cmp	r3, #2
 80022ce:	d901      	bls.n	80022d4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80022d0:	2303      	movs	r3, #3
 80022d2:	e03d      	b.n	8002350 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80022d4:	4b11      	ldr	r3, [pc, #68]	; (800231c <HAL_RCC_OscConfig+0x4c4>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d0f0      	beq.n	80022c2 <HAL_RCC_OscConfig+0x46a>
 80022e0:	e035      	b.n	800234e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022e2:	4b10      	ldr	r3, [pc, #64]	; (8002324 <HAL_RCC_OscConfig+0x4cc>)
 80022e4:	2200      	movs	r2, #0
 80022e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022e8:	f7ff faf2 	bl	80018d0 <HAL_GetTick>
 80022ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022ee:	e008      	b.n	8002302 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022f0:	f7ff faee 	bl	80018d0 <HAL_GetTick>
 80022f4:	4602      	mov	r2, r0
 80022f6:	693b      	ldr	r3, [r7, #16]
 80022f8:	1ad3      	subs	r3, r2, r3
 80022fa:	2b02      	cmp	r3, #2
 80022fc:	d901      	bls.n	8002302 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80022fe:	2303      	movs	r3, #3
 8002300:	e026      	b.n	8002350 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002302:	4b06      	ldr	r3, [pc, #24]	; (800231c <HAL_RCC_OscConfig+0x4c4>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800230a:	2b00      	cmp	r3, #0
 800230c:	d1f0      	bne.n	80022f0 <HAL_RCC_OscConfig+0x498>
 800230e:	e01e      	b.n	800234e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	69db      	ldr	r3, [r3, #28]
 8002314:	2b01      	cmp	r3, #1
 8002316:	d107      	bne.n	8002328 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002318:	2301      	movs	r3, #1
 800231a:	e019      	b.n	8002350 <HAL_RCC_OscConfig+0x4f8>
 800231c:	40021000 	.word	0x40021000
 8002320:	40007000 	.word	0x40007000
 8002324:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002328:	4b0b      	ldr	r3, [pc, #44]	; (8002358 <HAL_RCC_OscConfig+0x500>)
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6a1b      	ldr	r3, [r3, #32]
 8002338:	429a      	cmp	r2, r3
 800233a:	d106      	bne.n	800234a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002346:	429a      	cmp	r2, r3
 8002348:	d001      	beq.n	800234e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800234a:	2301      	movs	r3, #1
 800234c:	e000      	b.n	8002350 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800234e:	2300      	movs	r3, #0
}
 8002350:	4618      	mov	r0, r3
 8002352:	3718      	adds	r7, #24
 8002354:	46bd      	mov	sp, r7
 8002356:	bd80      	pop	{r7, pc}
 8002358:	40021000 	.word	0x40021000

0800235c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b084      	sub	sp, #16
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
 8002364:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2b00      	cmp	r3, #0
 800236a:	d101      	bne.n	8002370 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800236c:	2301      	movs	r3, #1
 800236e:	e0d0      	b.n	8002512 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002370:	4b6a      	ldr	r3, [pc, #424]	; (800251c <HAL_RCC_ClockConfig+0x1c0>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f003 0307 	and.w	r3, r3, #7
 8002378:	683a      	ldr	r2, [r7, #0]
 800237a:	429a      	cmp	r2, r3
 800237c:	d910      	bls.n	80023a0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800237e:	4b67      	ldr	r3, [pc, #412]	; (800251c <HAL_RCC_ClockConfig+0x1c0>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f023 0207 	bic.w	r2, r3, #7
 8002386:	4965      	ldr	r1, [pc, #404]	; (800251c <HAL_RCC_ClockConfig+0x1c0>)
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	4313      	orrs	r3, r2
 800238c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800238e:	4b63      	ldr	r3, [pc, #396]	; (800251c <HAL_RCC_ClockConfig+0x1c0>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f003 0307 	and.w	r3, r3, #7
 8002396:	683a      	ldr	r2, [r7, #0]
 8002398:	429a      	cmp	r2, r3
 800239a:	d001      	beq.n	80023a0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800239c:	2301      	movs	r3, #1
 800239e:	e0b8      	b.n	8002512 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f003 0302 	and.w	r3, r3, #2
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d020      	beq.n	80023ee <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f003 0304 	and.w	r3, r3, #4
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d005      	beq.n	80023c4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80023b8:	4b59      	ldr	r3, [pc, #356]	; (8002520 <HAL_RCC_ClockConfig+0x1c4>)
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	4a58      	ldr	r2, [pc, #352]	; (8002520 <HAL_RCC_ClockConfig+0x1c4>)
 80023be:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80023c2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f003 0308 	and.w	r3, r3, #8
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d005      	beq.n	80023dc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80023d0:	4b53      	ldr	r3, [pc, #332]	; (8002520 <HAL_RCC_ClockConfig+0x1c4>)
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	4a52      	ldr	r2, [pc, #328]	; (8002520 <HAL_RCC_ClockConfig+0x1c4>)
 80023d6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80023da:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023dc:	4b50      	ldr	r3, [pc, #320]	; (8002520 <HAL_RCC_ClockConfig+0x1c4>)
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	689b      	ldr	r3, [r3, #8]
 80023e8:	494d      	ldr	r1, [pc, #308]	; (8002520 <HAL_RCC_ClockConfig+0x1c4>)
 80023ea:	4313      	orrs	r3, r2
 80023ec:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f003 0301 	and.w	r3, r3, #1
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d040      	beq.n	800247c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	2b01      	cmp	r3, #1
 8002400:	d107      	bne.n	8002412 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002402:	4b47      	ldr	r3, [pc, #284]	; (8002520 <HAL_RCC_ClockConfig+0x1c4>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800240a:	2b00      	cmp	r3, #0
 800240c:	d115      	bne.n	800243a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800240e:	2301      	movs	r3, #1
 8002410:	e07f      	b.n	8002512 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	2b02      	cmp	r3, #2
 8002418:	d107      	bne.n	800242a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800241a:	4b41      	ldr	r3, [pc, #260]	; (8002520 <HAL_RCC_ClockConfig+0x1c4>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002422:	2b00      	cmp	r3, #0
 8002424:	d109      	bne.n	800243a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002426:	2301      	movs	r3, #1
 8002428:	e073      	b.n	8002512 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800242a:	4b3d      	ldr	r3, [pc, #244]	; (8002520 <HAL_RCC_ClockConfig+0x1c4>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f003 0302 	and.w	r3, r3, #2
 8002432:	2b00      	cmp	r3, #0
 8002434:	d101      	bne.n	800243a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002436:	2301      	movs	r3, #1
 8002438:	e06b      	b.n	8002512 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800243a:	4b39      	ldr	r3, [pc, #228]	; (8002520 <HAL_RCC_ClockConfig+0x1c4>)
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	f023 0203 	bic.w	r2, r3, #3
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	4936      	ldr	r1, [pc, #216]	; (8002520 <HAL_RCC_ClockConfig+0x1c4>)
 8002448:	4313      	orrs	r3, r2
 800244a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800244c:	f7ff fa40 	bl	80018d0 <HAL_GetTick>
 8002450:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002452:	e00a      	b.n	800246a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002454:	f7ff fa3c 	bl	80018d0 <HAL_GetTick>
 8002458:	4602      	mov	r2, r0
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	1ad3      	subs	r3, r2, r3
 800245e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002462:	4293      	cmp	r3, r2
 8002464:	d901      	bls.n	800246a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002466:	2303      	movs	r3, #3
 8002468:	e053      	b.n	8002512 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800246a:	4b2d      	ldr	r3, [pc, #180]	; (8002520 <HAL_RCC_ClockConfig+0x1c4>)
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	f003 020c 	and.w	r2, r3, #12
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	685b      	ldr	r3, [r3, #4]
 8002476:	009b      	lsls	r3, r3, #2
 8002478:	429a      	cmp	r2, r3
 800247a:	d1eb      	bne.n	8002454 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800247c:	4b27      	ldr	r3, [pc, #156]	; (800251c <HAL_RCC_ClockConfig+0x1c0>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f003 0307 	and.w	r3, r3, #7
 8002484:	683a      	ldr	r2, [r7, #0]
 8002486:	429a      	cmp	r2, r3
 8002488:	d210      	bcs.n	80024ac <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800248a:	4b24      	ldr	r3, [pc, #144]	; (800251c <HAL_RCC_ClockConfig+0x1c0>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f023 0207 	bic.w	r2, r3, #7
 8002492:	4922      	ldr	r1, [pc, #136]	; (800251c <HAL_RCC_ClockConfig+0x1c0>)
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	4313      	orrs	r3, r2
 8002498:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800249a:	4b20      	ldr	r3, [pc, #128]	; (800251c <HAL_RCC_ClockConfig+0x1c0>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f003 0307 	and.w	r3, r3, #7
 80024a2:	683a      	ldr	r2, [r7, #0]
 80024a4:	429a      	cmp	r2, r3
 80024a6:	d001      	beq.n	80024ac <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80024a8:	2301      	movs	r3, #1
 80024aa:	e032      	b.n	8002512 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f003 0304 	and.w	r3, r3, #4
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d008      	beq.n	80024ca <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024b8:	4b19      	ldr	r3, [pc, #100]	; (8002520 <HAL_RCC_ClockConfig+0x1c4>)
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	68db      	ldr	r3, [r3, #12]
 80024c4:	4916      	ldr	r1, [pc, #88]	; (8002520 <HAL_RCC_ClockConfig+0x1c4>)
 80024c6:	4313      	orrs	r3, r2
 80024c8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f003 0308 	and.w	r3, r3, #8
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d009      	beq.n	80024ea <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80024d6:	4b12      	ldr	r3, [pc, #72]	; (8002520 <HAL_RCC_ClockConfig+0x1c4>)
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	691b      	ldr	r3, [r3, #16]
 80024e2:	00db      	lsls	r3, r3, #3
 80024e4:	490e      	ldr	r1, [pc, #56]	; (8002520 <HAL_RCC_ClockConfig+0x1c4>)
 80024e6:	4313      	orrs	r3, r2
 80024e8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80024ea:	f000 f821 	bl	8002530 <HAL_RCC_GetSysClockFreq>
 80024ee:	4602      	mov	r2, r0
 80024f0:	4b0b      	ldr	r3, [pc, #44]	; (8002520 <HAL_RCC_ClockConfig+0x1c4>)
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	091b      	lsrs	r3, r3, #4
 80024f6:	f003 030f 	and.w	r3, r3, #15
 80024fa:	490a      	ldr	r1, [pc, #40]	; (8002524 <HAL_RCC_ClockConfig+0x1c8>)
 80024fc:	5ccb      	ldrb	r3, [r1, r3]
 80024fe:	fa22 f303 	lsr.w	r3, r2, r3
 8002502:	4a09      	ldr	r2, [pc, #36]	; (8002528 <HAL_RCC_ClockConfig+0x1cc>)
 8002504:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002506:	4b09      	ldr	r3, [pc, #36]	; (800252c <HAL_RCC_ClockConfig+0x1d0>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4618      	mov	r0, r3
 800250c:	f7ff f99e 	bl	800184c <HAL_InitTick>

  return HAL_OK;
 8002510:	2300      	movs	r3, #0
}
 8002512:	4618      	mov	r0, r3
 8002514:	3710      	adds	r7, #16
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}
 800251a:	bf00      	nop
 800251c:	40022000 	.word	0x40022000
 8002520:	40021000 	.word	0x40021000
 8002524:	08002e54 	.word	0x08002e54
 8002528:	2000000c 	.word	0x2000000c
 800252c:	20000010 	.word	0x20000010

08002530 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002530:	b480      	push	{r7}
 8002532:	b087      	sub	sp, #28
 8002534:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002536:	2300      	movs	r3, #0
 8002538:	60fb      	str	r3, [r7, #12]
 800253a:	2300      	movs	r3, #0
 800253c:	60bb      	str	r3, [r7, #8]
 800253e:	2300      	movs	r3, #0
 8002540:	617b      	str	r3, [r7, #20]
 8002542:	2300      	movs	r3, #0
 8002544:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002546:	2300      	movs	r3, #0
 8002548:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800254a:	4b1e      	ldr	r3, [pc, #120]	; (80025c4 <HAL_RCC_GetSysClockFreq+0x94>)
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	f003 030c 	and.w	r3, r3, #12
 8002556:	2b04      	cmp	r3, #4
 8002558:	d002      	beq.n	8002560 <HAL_RCC_GetSysClockFreq+0x30>
 800255a:	2b08      	cmp	r3, #8
 800255c:	d003      	beq.n	8002566 <HAL_RCC_GetSysClockFreq+0x36>
 800255e:	e027      	b.n	80025b0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002560:	4b19      	ldr	r3, [pc, #100]	; (80025c8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002562:	613b      	str	r3, [r7, #16]
      break;
 8002564:	e027      	b.n	80025b6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	0c9b      	lsrs	r3, r3, #18
 800256a:	f003 030f 	and.w	r3, r3, #15
 800256e:	4a17      	ldr	r2, [pc, #92]	; (80025cc <HAL_RCC_GetSysClockFreq+0x9c>)
 8002570:	5cd3      	ldrb	r3, [r2, r3]
 8002572:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800257a:	2b00      	cmp	r3, #0
 800257c:	d010      	beq.n	80025a0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800257e:	4b11      	ldr	r3, [pc, #68]	; (80025c4 <HAL_RCC_GetSysClockFreq+0x94>)
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	0c5b      	lsrs	r3, r3, #17
 8002584:	f003 0301 	and.w	r3, r3, #1
 8002588:	4a11      	ldr	r2, [pc, #68]	; (80025d0 <HAL_RCC_GetSysClockFreq+0xa0>)
 800258a:	5cd3      	ldrb	r3, [r2, r3]
 800258c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	4a0d      	ldr	r2, [pc, #52]	; (80025c8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002592:	fb03 f202 	mul.w	r2, r3, r2
 8002596:	68bb      	ldr	r3, [r7, #8]
 8002598:	fbb2 f3f3 	udiv	r3, r2, r3
 800259c:	617b      	str	r3, [r7, #20]
 800259e:	e004      	b.n	80025aa <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	4a0c      	ldr	r2, [pc, #48]	; (80025d4 <HAL_RCC_GetSysClockFreq+0xa4>)
 80025a4:	fb02 f303 	mul.w	r3, r2, r3
 80025a8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80025aa:	697b      	ldr	r3, [r7, #20]
 80025ac:	613b      	str	r3, [r7, #16]
      break;
 80025ae:	e002      	b.n	80025b6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80025b0:	4b05      	ldr	r3, [pc, #20]	; (80025c8 <HAL_RCC_GetSysClockFreq+0x98>)
 80025b2:	613b      	str	r3, [r7, #16]
      break;
 80025b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80025b6:	693b      	ldr	r3, [r7, #16]
}
 80025b8:	4618      	mov	r0, r3
 80025ba:	371c      	adds	r7, #28
 80025bc:	46bd      	mov	sp, r7
 80025be:	bc80      	pop	{r7}
 80025c0:	4770      	bx	lr
 80025c2:	bf00      	nop
 80025c4:	40021000 	.word	0x40021000
 80025c8:	007a1200 	.word	0x007a1200
 80025cc:	08002e64 	.word	0x08002e64
 80025d0:	08002e74 	.word	0x08002e74
 80025d4:	003d0900 	.word	0x003d0900

080025d8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80025d8:	b480      	push	{r7}
 80025da:	b085      	sub	sp, #20
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80025e0:	4b0a      	ldr	r3, [pc, #40]	; (800260c <RCC_Delay+0x34>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4a0a      	ldr	r2, [pc, #40]	; (8002610 <RCC_Delay+0x38>)
 80025e6:	fba2 2303 	umull	r2, r3, r2, r3
 80025ea:	0a5b      	lsrs	r3, r3, #9
 80025ec:	687a      	ldr	r2, [r7, #4]
 80025ee:	fb02 f303 	mul.w	r3, r2, r3
 80025f2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80025f4:	bf00      	nop
  }
  while (Delay --);
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	1e5a      	subs	r2, r3, #1
 80025fa:	60fa      	str	r2, [r7, #12]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d1f9      	bne.n	80025f4 <RCC_Delay+0x1c>
}
 8002600:	bf00      	nop
 8002602:	bf00      	nop
 8002604:	3714      	adds	r7, #20
 8002606:	46bd      	mov	sp, r7
 8002608:	bc80      	pop	{r7}
 800260a:	4770      	bx	lr
 800260c:	2000000c 	.word	0x2000000c
 8002610:	10624dd3 	.word	0x10624dd3

08002614 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b082      	sub	sp, #8
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d101      	bne.n	8002626 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002622:	2301      	movs	r3, #1
 8002624:	e041      	b.n	80026aa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800262c:	b2db      	uxtb	r3, r3
 800262e:	2b00      	cmp	r3, #0
 8002630:	d106      	bne.n	8002640 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2200      	movs	r2, #0
 8002636:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800263a:	6878      	ldr	r0, [r7, #4]
 800263c:	f7fe fdf2 	bl	8001224 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2202      	movs	r2, #2
 8002644:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681a      	ldr	r2, [r3, #0]
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	3304      	adds	r3, #4
 8002650:	4619      	mov	r1, r3
 8002652:	4610      	mov	r0, r2
 8002654:	f000 fa6e 	bl	8002b34 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2201      	movs	r2, #1
 800265c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2201      	movs	r2, #1
 8002664:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2201      	movs	r2, #1
 800266c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2201      	movs	r2, #1
 8002674:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2201      	movs	r2, #1
 800267c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2201      	movs	r2, #1
 8002684:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2201      	movs	r2, #1
 800268c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2201      	movs	r2, #1
 8002694:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2201      	movs	r2, #1
 800269c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2201      	movs	r2, #1
 80026a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80026a8:	2300      	movs	r3, #0
}
 80026aa:	4618      	mov	r0, r3
 80026ac:	3708      	adds	r7, #8
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bd80      	pop	{r7, pc}
	...

080026b4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80026b4:	b480      	push	{r7}
 80026b6:	b085      	sub	sp, #20
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026c2:	b2db      	uxtb	r3, r3
 80026c4:	2b01      	cmp	r3, #1
 80026c6:	d001      	beq.n	80026cc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80026c8:	2301      	movs	r3, #1
 80026ca:	e035      	b.n	8002738 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2202      	movs	r2, #2
 80026d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	68da      	ldr	r2, [r3, #12]
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f042 0201 	orr.w	r2, r2, #1
 80026e2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4a16      	ldr	r2, [pc, #88]	; (8002744 <HAL_TIM_Base_Start_IT+0x90>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d009      	beq.n	8002702 <HAL_TIM_Base_Start_IT+0x4e>
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026f6:	d004      	beq.n	8002702 <HAL_TIM_Base_Start_IT+0x4e>
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4a12      	ldr	r2, [pc, #72]	; (8002748 <HAL_TIM_Base_Start_IT+0x94>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d111      	bne.n	8002726 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	689b      	ldr	r3, [r3, #8]
 8002708:	f003 0307 	and.w	r3, r3, #7
 800270c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	2b06      	cmp	r3, #6
 8002712:	d010      	beq.n	8002736 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	681a      	ldr	r2, [r3, #0]
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f042 0201 	orr.w	r2, r2, #1
 8002722:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002724:	e007      	b.n	8002736 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	681a      	ldr	r2, [r3, #0]
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f042 0201 	orr.w	r2, r2, #1
 8002734:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002736:	2300      	movs	r3, #0
}
 8002738:	4618      	mov	r0, r3
 800273a:	3714      	adds	r7, #20
 800273c:	46bd      	mov	sp, r7
 800273e:	bc80      	pop	{r7}
 8002740:	4770      	bx	lr
 8002742:	bf00      	nop
 8002744:	40012c00 	.word	0x40012c00
 8002748:	40000400 	.word	0x40000400

0800274c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b082      	sub	sp, #8
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	691b      	ldr	r3, [r3, #16]
 800275a:	f003 0302 	and.w	r3, r3, #2
 800275e:	2b02      	cmp	r3, #2
 8002760:	d122      	bne.n	80027a8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	68db      	ldr	r3, [r3, #12]
 8002768:	f003 0302 	and.w	r3, r3, #2
 800276c:	2b02      	cmp	r3, #2
 800276e:	d11b      	bne.n	80027a8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f06f 0202 	mvn.w	r2, #2
 8002778:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	2201      	movs	r2, #1
 800277e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	699b      	ldr	r3, [r3, #24]
 8002786:	f003 0303 	and.w	r3, r3, #3
 800278a:	2b00      	cmp	r3, #0
 800278c:	d003      	beq.n	8002796 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800278e:	6878      	ldr	r0, [r7, #4]
 8002790:	f000 f9b4 	bl	8002afc <HAL_TIM_IC_CaptureCallback>
 8002794:	e005      	b.n	80027a2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002796:	6878      	ldr	r0, [r7, #4]
 8002798:	f000 f9a7 	bl	8002aea <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800279c:	6878      	ldr	r0, [r7, #4]
 800279e:	f000 f9b6 	bl	8002b0e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	2200      	movs	r2, #0
 80027a6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	691b      	ldr	r3, [r3, #16]
 80027ae:	f003 0304 	and.w	r3, r3, #4
 80027b2:	2b04      	cmp	r3, #4
 80027b4:	d122      	bne.n	80027fc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	68db      	ldr	r3, [r3, #12]
 80027bc:	f003 0304 	and.w	r3, r3, #4
 80027c0:	2b04      	cmp	r3, #4
 80027c2:	d11b      	bne.n	80027fc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f06f 0204 	mvn.w	r2, #4
 80027cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2202      	movs	r2, #2
 80027d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	699b      	ldr	r3, [r3, #24]
 80027da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d003      	beq.n	80027ea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80027e2:	6878      	ldr	r0, [r7, #4]
 80027e4:	f000 f98a 	bl	8002afc <HAL_TIM_IC_CaptureCallback>
 80027e8:	e005      	b.n	80027f6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80027ea:	6878      	ldr	r0, [r7, #4]
 80027ec:	f000 f97d 	bl	8002aea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027f0:	6878      	ldr	r0, [r7, #4]
 80027f2:	f000 f98c 	bl	8002b0e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2200      	movs	r2, #0
 80027fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	691b      	ldr	r3, [r3, #16]
 8002802:	f003 0308 	and.w	r3, r3, #8
 8002806:	2b08      	cmp	r3, #8
 8002808:	d122      	bne.n	8002850 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	68db      	ldr	r3, [r3, #12]
 8002810:	f003 0308 	and.w	r3, r3, #8
 8002814:	2b08      	cmp	r3, #8
 8002816:	d11b      	bne.n	8002850 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f06f 0208 	mvn.w	r2, #8
 8002820:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2204      	movs	r2, #4
 8002826:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	69db      	ldr	r3, [r3, #28]
 800282e:	f003 0303 	and.w	r3, r3, #3
 8002832:	2b00      	cmp	r3, #0
 8002834:	d003      	beq.n	800283e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002836:	6878      	ldr	r0, [r7, #4]
 8002838:	f000 f960 	bl	8002afc <HAL_TIM_IC_CaptureCallback>
 800283c:	e005      	b.n	800284a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800283e:	6878      	ldr	r0, [r7, #4]
 8002840:	f000 f953 	bl	8002aea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002844:	6878      	ldr	r0, [r7, #4]
 8002846:	f000 f962 	bl	8002b0e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2200      	movs	r2, #0
 800284e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	691b      	ldr	r3, [r3, #16]
 8002856:	f003 0310 	and.w	r3, r3, #16
 800285a:	2b10      	cmp	r3, #16
 800285c:	d122      	bne.n	80028a4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	68db      	ldr	r3, [r3, #12]
 8002864:	f003 0310 	and.w	r3, r3, #16
 8002868:	2b10      	cmp	r3, #16
 800286a:	d11b      	bne.n	80028a4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f06f 0210 	mvn.w	r2, #16
 8002874:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	2208      	movs	r2, #8
 800287a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	69db      	ldr	r3, [r3, #28]
 8002882:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002886:	2b00      	cmp	r3, #0
 8002888:	d003      	beq.n	8002892 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800288a:	6878      	ldr	r0, [r7, #4]
 800288c:	f000 f936 	bl	8002afc <HAL_TIM_IC_CaptureCallback>
 8002890:	e005      	b.n	800289e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002892:	6878      	ldr	r0, [r7, #4]
 8002894:	f000 f929 	bl	8002aea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002898:	6878      	ldr	r0, [r7, #4]
 800289a:	f000 f938 	bl	8002b0e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	2200      	movs	r2, #0
 80028a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	691b      	ldr	r3, [r3, #16]
 80028aa:	f003 0301 	and.w	r3, r3, #1
 80028ae:	2b01      	cmp	r3, #1
 80028b0:	d10e      	bne.n	80028d0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	68db      	ldr	r3, [r3, #12]
 80028b8:	f003 0301 	and.w	r3, r3, #1
 80028bc:	2b01      	cmp	r3, #1
 80028be:	d107      	bne.n	80028d0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f06f 0201 	mvn.w	r2, #1
 80028c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80028ca:	6878      	ldr	r0, [r7, #4]
 80028cc:	f7fe fb80 	bl	8000fd0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	691b      	ldr	r3, [r3, #16]
 80028d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028da:	2b80      	cmp	r3, #128	; 0x80
 80028dc:	d10e      	bne.n	80028fc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	68db      	ldr	r3, [r3, #12]
 80028e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028e8:	2b80      	cmp	r3, #128	; 0x80
 80028ea:	d107      	bne.n	80028fc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80028f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80028f6:	6878      	ldr	r0, [r7, #4]
 80028f8:	f000 fa6b 	bl	8002dd2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	691b      	ldr	r3, [r3, #16]
 8002902:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002906:	2b40      	cmp	r3, #64	; 0x40
 8002908:	d10e      	bne.n	8002928 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	68db      	ldr	r3, [r3, #12]
 8002910:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002914:	2b40      	cmp	r3, #64	; 0x40
 8002916:	d107      	bne.n	8002928 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002920:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002922:	6878      	ldr	r0, [r7, #4]
 8002924:	f000 f8fc 	bl	8002b20 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	691b      	ldr	r3, [r3, #16]
 800292e:	f003 0320 	and.w	r3, r3, #32
 8002932:	2b20      	cmp	r3, #32
 8002934:	d10e      	bne.n	8002954 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	68db      	ldr	r3, [r3, #12]
 800293c:	f003 0320 	and.w	r3, r3, #32
 8002940:	2b20      	cmp	r3, #32
 8002942:	d107      	bne.n	8002954 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f06f 0220 	mvn.w	r2, #32
 800294c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800294e:	6878      	ldr	r0, [r7, #4]
 8002950:	f000 fa36 	bl	8002dc0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002954:	bf00      	nop
 8002956:	3708      	adds	r7, #8
 8002958:	46bd      	mov	sp, r7
 800295a:	bd80      	pop	{r7, pc}

0800295c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b084      	sub	sp, #16
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
 8002964:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002966:	2300      	movs	r3, #0
 8002968:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002970:	2b01      	cmp	r3, #1
 8002972:	d101      	bne.n	8002978 <HAL_TIM_ConfigClockSource+0x1c>
 8002974:	2302      	movs	r3, #2
 8002976:	e0b4      	b.n	8002ae2 <HAL_TIM_ConfigClockSource+0x186>
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2201      	movs	r2, #1
 800297c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2202      	movs	r2, #2
 8002984:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	689b      	ldr	r3, [r3, #8]
 800298e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002990:	68bb      	ldr	r3, [r7, #8]
 8002992:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002996:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002998:	68bb      	ldr	r3, [r7, #8]
 800299a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800299e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	68ba      	ldr	r2, [r7, #8]
 80029a6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80029b0:	d03e      	beq.n	8002a30 <HAL_TIM_ConfigClockSource+0xd4>
 80029b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80029b6:	f200 8087 	bhi.w	8002ac8 <HAL_TIM_ConfigClockSource+0x16c>
 80029ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029be:	f000 8086 	beq.w	8002ace <HAL_TIM_ConfigClockSource+0x172>
 80029c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029c6:	d87f      	bhi.n	8002ac8 <HAL_TIM_ConfigClockSource+0x16c>
 80029c8:	2b70      	cmp	r3, #112	; 0x70
 80029ca:	d01a      	beq.n	8002a02 <HAL_TIM_ConfigClockSource+0xa6>
 80029cc:	2b70      	cmp	r3, #112	; 0x70
 80029ce:	d87b      	bhi.n	8002ac8 <HAL_TIM_ConfigClockSource+0x16c>
 80029d0:	2b60      	cmp	r3, #96	; 0x60
 80029d2:	d050      	beq.n	8002a76 <HAL_TIM_ConfigClockSource+0x11a>
 80029d4:	2b60      	cmp	r3, #96	; 0x60
 80029d6:	d877      	bhi.n	8002ac8 <HAL_TIM_ConfigClockSource+0x16c>
 80029d8:	2b50      	cmp	r3, #80	; 0x50
 80029da:	d03c      	beq.n	8002a56 <HAL_TIM_ConfigClockSource+0xfa>
 80029dc:	2b50      	cmp	r3, #80	; 0x50
 80029de:	d873      	bhi.n	8002ac8 <HAL_TIM_ConfigClockSource+0x16c>
 80029e0:	2b40      	cmp	r3, #64	; 0x40
 80029e2:	d058      	beq.n	8002a96 <HAL_TIM_ConfigClockSource+0x13a>
 80029e4:	2b40      	cmp	r3, #64	; 0x40
 80029e6:	d86f      	bhi.n	8002ac8 <HAL_TIM_ConfigClockSource+0x16c>
 80029e8:	2b30      	cmp	r3, #48	; 0x30
 80029ea:	d064      	beq.n	8002ab6 <HAL_TIM_ConfigClockSource+0x15a>
 80029ec:	2b30      	cmp	r3, #48	; 0x30
 80029ee:	d86b      	bhi.n	8002ac8 <HAL_TIM_ConfigClockSource+0x16c>
 80029f0:	2b20      	cmp	r3, #32
 80029f2:	d060      	beq.n	8002ab6 <HAL_TIM_ConfigClockSource+0x15a>
 80029f4:	2b20      	cmp	r3, #32
 80029f6:	d867      	bhi.n	8002ac8 <HAL_TIM_ConfigClockSource+0x16c>
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d05c      	beq.n	8002ab6 <HAL_TIM_ConfigClockSource+0x15a>
 80029fc:	2b10      	cmp	r3, #16
 80029fe:	d05a      	beq.n	8002ab6 <HAL_TIM_ConfigClockSource+0x15a>
 8002a00:	e062      	b.n	8002ac8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002a12:	f000 f95e 	bl	8002cd2 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	689b      	ldr	r3, [r3, #8]
 8002a1c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002a1e:	68bb      	ldr	r3, [r7, #8]
 8002a20:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002a24:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	68ba      	ldr	r2, [r7, #8]
 8002a2c:	609a      	str	r2, [r3, #8]
      break;
 8002a2e:	e04f      	b.n	8002ad0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002a40:	f000 f947 	bl	8002cd2 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	689a      	ldr	r2, [r3, #8]
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002a52:	609a      	str	r2, [r3, #8]
      break;
 8002a54:	e03c      	b.n	8002ad0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a62:	461a      	mov	r2, r3
 8002a64:	f000 f8be 	bl	8002be4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	2150      	movs	r1, #80	; 0x50
 8002a6e:	4618      	mov	r0, r3
 8002a70:	f000 f915 	bl	8002c9e <TIM_ITRx_SetConfig>
      break;
 8002a74:	e02c      	b.n	8002ad0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002a82:	461a      	mov	r2, r3
 8002a84:	f000 f8dc 	bl	8002c40 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	2160      	movs	r1, #96	; 0x60
 8002a8e:	4618      	mov	r0, r3
 8002a90:	f000 f905 	bl	8002c9e <TIM_ITRx_SetConfig>
      break;
 8002a94:	e01c      	b.n	8002ad0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002aa2:	461a      	mov	r2, r3
 8002aa4:	f000 f89e 	bl	8002be4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	2140      	movs	r1, #64	; 0x40
 8002aae:	4618      	mov	r0, r3
 8002ab0:	f000 f8f5 	bl	8002c9e <TIM_ITRx_SetConfig>
      break;
 8002ab4:	e00c      	b.n	8002ad0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681a      	ldr	r2, [r3, #0]
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	4619      	mov	r1, r3
 8002ac0:	4610      	mov	r0, r2
 8002ac2:	f000 f8ec 	bl	8002c9e <TIM_ITRx_SetConfig>
      break;
 8002ac6:	e003      	b.n	8002ad0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002ac8:	2301      	movs	r3, #1
 8002aca:	73fb      	strb	r3, [r7, #15]
      break;
 8002acc:	e000      	b.n	8002ad0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002ace:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2201      	movs	r2, #1
 8002ad4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2200      	movs	r2, #0
 8002adc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002ae0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	3710      	adds	r7, #16
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bd80      	pop	{r7, pc}

08002aea <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002aea:	b480      	push	{r7}
 8002aec:	b083      	sub	sp, #12
 8002aee:	af00      	add	r7, sp, #0
 8002af0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002af2:	bf00      	nop
 8002af4:	370c      	adds	r7, #12
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bc80      	pop	{r7}
 8002afa:	4770      	bx	lr

08002afc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002afc:	b480      	push	{r7}
 8002afe:	b083      	sub	sp, #12
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002b04:	bf00      	nop
 8002b06:	370c      	adds	r7, #12
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	bc80      	pop	{r7}
 8002b0c:	4770      	bx	lr

08002b0e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002b0e:	b480      	push	{r7}
 8002b10:	b083      	sub	sp, #12
 8002b12:	af00      	add	r7, sp, #0
 8002b14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002b16:	bf00      	nop
 8002b18:	370c      	adds	r7, #12
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bc80      	pop	{r7}
 8002b1e:	4770      	bx	lr

08002b20 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002b20:	b480      	push	{r7}
 8002b22:	b083      	sub	sp, #12
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002b28:	bf00      	nop
 8002b2a:	370c      	adds	r7, #12
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	bc80      	pop	{r7}
 8002b30:	4770      	bx	lr
	...

08002b34 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002b34:	b480      	push	{r7}
 8002b36:	b085      	sub	sp, #20
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
 8002b3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	4a25      	ldr	r2, [pc, #148]	; (8002bdc <TIM_Base_SetConfig+0xa8>)
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	d007      	beq.n	8002b5c <TIM_Base_SetConfig+0x28>
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b52:	d003      	beq.n	8002b5c <TIM_Base_SetConfig+0x28>
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	4a22      	ldr	r2, [pc, #136]	; (8002be0 <TIM_Base_SetConfig+0xac>)
 8002b58:	4293      	cmp	r3, r2
 8002b5a:	d108      	bne.n	8002b6e <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b62:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	68fa      	ldr	r2, [r7, #12]
 8002b6a:	4313      	orrs	r3, r2
 8002b6c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	4a1a      	ldr	r2, [pc, #104]	; (8002bdc <TIM_Base_SetConfig+0xa8>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d007      	beq.n	8002b86 <TIM_Base_SetConfig+0x52>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b7c:	d003      	beq.n	8002b86 <TIM_Base_SetConfig+0x52>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	4a17      	ldr	r2, [pc, #92]	; (8002be0 <TIM_Base_SetConfig+0xac>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d108      	bne.n	8002b98 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b8c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	68db      	ldr	r3, [r3, #12]
 8002b92:	68fa      	ldr	r2, [r7, #12]
 8002b94:	4313      	orrs	r3, r2
 8002b96:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	695b      	ldr	r3, [r3, #20]
 8002ba2:	4313      	orrs	r3, r2
 8002ba4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	68fa      	ldr	r2, [r7, #12]
 8002baa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	689a      	ldr	r2, [r3, #8]
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	681a      	ldr	r2, [r3, #0]
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	4a07      	ldr	r2, [pc, #28]	; (8002bdc <TIM_Base_SetConfig+0xa8>)
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	d103      	bne.n	8002bcc <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	691a      	ldr	r2, [r3, #16]
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2201      	movs	r2, #1
 8002bd0:	615a      	str	r2, [r3, #20]
}
 8002bd2:	bf00      	nop
 8002bd4:	3714      	adds	r7, #20
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	bc80      	pop	{r7}
 8002bda:	4770      	bx	lr
 8002bdc:	40012c00 	.word	0x40012c00
 8002be0:	40000400 	.word	0x40000400

08002be4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002be4:	b480      	push	{r7}
 8002be6:	b087      	sub	sp, #28
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	60f8      	str	r0, [r7, #12]
 8002bec:	60b9      	str	r1, [r7, #8]
 8002bee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	6a1b      	ldr	r3, [r3, #32]
 8002bf4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	6a1b      	ldr	r3, [r3, #32]
 8002bfa:	f023 0201 	bic.w	r2, r3, #1
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	699b      	ldr	r3, [r3, #24]
 8002c06:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002c08:	693b      	ldr	r3, [r7, #16]
 8002c0a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002c0e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	011b      	lsls	r3, r3, #4
 8002c14:	693a      	ldr	r2, [r7, #16]
 8002c16:	4313      	orrs	r3, r2
 8002c18:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002c1a:	697b      	ldr	r3, [r7, #20]
 8002c1c:	f023 030a 	bic.w	r3, r3, #10
 8002c20:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002c22:	697a      	ldr	r2, [r7, #20]
 8002c24:	68bb      	ldr	r3, [r7, #8]
 8002c26:	4313      	orrs	r3, r2
 8002c28:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	693a      	ldr	r2, [r7, #16]
 8002c2e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	697a      	ldr	r2, [r7, #20]
 8002c34:	621a      	str	r2, [r3, #32]
}
 8002c36:	bf00      	nop
 8002c38:	371c      	adds	r7, #28
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bc80      	pop	{r7}
 8002c3e:	4770      	bx	lr

08002c40 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002c40:	b480      	push	{r7}
 8002c42:	b087      	sub	sp, #28
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	60f8      	str	r0, [r7, #12]
 8002c48:	60b9      	str	r1, [r7, #8]
 8002c4a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	6a1b      	ldr	r3, [r3, #32]
 8002c50:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	6a1b      	ldr	r3, [r3, #32]
 8002c56:	f023 0210 	bic.w	r2, r3, #16
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	699b      	ldr	r3, [r3, #24]
 8002c62:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002c64:	693b      	ldr	r3, [r7, #16]
 8002c66:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002c6a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	031b      	lsls	r3, r3, #12
 8002c70:	693a      	ldr	r2, [r7, #16]
 8002c72:	4313      	orrs	r3, r2
 8002c74:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002c76:	697b      	ldr	r3, [r7, #20]
 8002c78:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002c7c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002c7e:	68bb      	ldr	r3, [r7, #8]
 8002c80:	011b      	lsls	r3, r3, #4
 8002c82:	697a      	ldr	r2, [r7, #20]
 8002c84:	4313      	orrs	r3, r2
 8002c86:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	693a      	ldr	r2, [r7, #16]
 8002c8c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	697a      	ldr	r2, [r7, #20]
 8002c92:	621a      	str	r2, [r3, #32]
}
 8002c94:	bf00      	nop
 8002c96:	371c      	adds	r7, #28
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	bc80      	pop	{r7}
 8002c9c:	4770      	bx	lr

08002c9e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002c9e:	b480      	push	{r7}
 8002ca0:	b085      	sub	sp, #20
 8002ca2:	af00      	add	r7, sp, #0
 8002ca4:	6078      	str	r0, [r7, #4]
 8002ca6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	689b      	ldr	r3, [r3, #8]
 8002cac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cb4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002cb6:	683a      	ldr	r2, [r7, #0]
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	4313      	orrs	r3, r2
 8002cbc:	f043 0307 	orr.w	r3, r3, #7
 8002cc0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	68fa      	ldr	r2, [r7, #12]
 8002cc6:	609a      	str	r2, [r3, #8]
}
 8002cc8:	bf00      	nop
 8002cca:	3714      	adds	r7, #20
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	bc80      	pop	{r7}
 8002cd0:	4770      	bx	lr

08002cd2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002cd2:	b480      	push	{r7}
 8002cd4:	b087      	sub	sp, #28
 8002cd6:	af00      	add	r7, sp, #0
 8002cd8:	60f8      	str	r0, [r7, #12]
 8002cda:	60b9      	str	r1, [r7, #8]
 8002cdc:	607a      	str	r2, [r7, #4]
 8002cde:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	689b      	ldr	r3, [r3, #8]
 8002ce4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002ce6:	697b      	ldr	r3, [r7, #20]
 8002ce8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002cec:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	021a      	lsls	r2, r3, #8
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	431a      	orrs	r2, r3
 8002cf6:	68bb      	ldr	r3, [r7, #8]
 8002cf8:	4313      	orrs	r3, r2
 8002cfa:	697a      	ldr	r2, [r7, #20]
 8002cfc:	4313      	orrs	r3, r2
 8002cfe:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	697a      	ldr	r2, [r7, #20]
 8002d04:	609a      	str	r2, [r3, #8]
}
 8002d06:	bf00      	nop
 8002d08:	371c      	adds	r7, #28
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bc80      	pop	{r7}
 8002d0e:	4770      	bx	lr

08002d10 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002d10:	b480      	push	{r7}
 8002d12:	b085      	sub	sp, #20
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
 8002d18:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d20:	2b01      	cmp	r3, #1
 8002d22:	d101      	bne.n	8002d28 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002d24:	2302      	movs	r3, #2
 8002d26:	e041      	b.n	8002dac <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2201      	movs	r2, #1
 8002d2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2202      	movs	r2, #2
 8002d34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	685b      	ldr	r3, [r3, #4]
 8002d3e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	689b      	ldr	r3, [r3, #8]
 8002d46:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d4e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	68fa      	ldr	r2, [r7, #12]
 8002d56:	4313      	orrs	r3, r2
 8002d58:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	68fa      	ldr	r2, [r7, #12]
 8002d60:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4a14      	ldr	r2, [pc, #80]	; (8002db8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d009      	beq.n	8002d80 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d74:	d004      	beq.n	8002d80 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4a10      	ldr	r2, [pc, #64]	; (8002dbc <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d10c      	bne.n	8002d9a <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002d80:	68bb      	ldr	r3, [r7, #8]
 8002d82:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002d86:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	685b      	ldr	r3, [r3, #4]
 8002d8c:	68ba      	ldr	r2, [r7, #8]
 8002d8e:	4313      	orrs	r3, r2
 8002d90:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	68ba      	ldr	r2, [r7, #8]
 8002d98:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2201      	movs	r2, #1
 8002d9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	2200      	movs	r2, #0
 8002da6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002daa:	2300      	movs	r3, #0
}
 8002dac:	4618      	mov	r0, r3
 8002dae:	3714      	adds	r7, #20
 8002db0:	46bd      	mov	sp, r7
 8002db2:	bc80      	pop	{r7}
 8002db4:	4770      	bx	lr
 8002db6:	bf00      	nop
 8002db8:	40012c00 	.word	0x40012c00
 8002dbc:	40000400 	.word	0x40000400

08002dc0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	b083      	sub	sp, #12
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002dc8:	bf00      	nop
 8002dca:	370c      	adds	r7, #12
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	bc80      	pop	{r7}
 8002dd0:	4770      	bx	lr

08002dd2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002dd2:	b480      	push	{r7}
 8002dd4:	b083      	sub	sp, #12
 8002dd6:	af00      	add	r7, sp, #0
 8002dd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002dda:	bf00      	nop
 8002ddc:	370c      	adds	r7, #12
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bc80      	pop	{r7}
 8002de2:	4770      	bx	lr

08002de4 <memset>:
 8002de4:	4603      	mov	r3, r0
 8002de6:	4402      	add	r2, r0
 8002de8:	4293      	cmp	r3, r2
 8002dea:	d100      	bne.n	8002dee <memset+0xa>
 8002dec:	4770      	bx	lr
 8002dee:	f803 1b01 	strb.w	r1, [r3], #1
 8002df2:	e7f9      	b.n	8002de8 <memset+0x4>

08002df4 <__libc_init_array>:
 8002df4:	b570      	push	{r4, r5, r6, lr}
 8002df6:	2600      	movs	r6, #0
 8002df8:	4d0c      	ldr	r5, [pc, #48]	; (8002e2c <__libc_init_array+0x38>)
 8002dfa:	4c0d      	ldr	r4, [pc, #52]	; (8002e30 <__libc_init_array+0x3c>)
 8002dfc:	1b64      	subs	r4, r4, r5
 8002dfe:	10a4      	asrs	r4, r4, #2
 8002e00:	42a6      	cmp	r6, r4
 8002e02:	d109      	bne.n	8002e18 <__libc_init_array+0x24>
 8002e04:	f000 f81a 	bl	8002e3c <_init>
 8002e08:	2600      	movs	r6, #0
 8002e0a:	4d0a      	ldr	r5, [pc, #40]	; (8002e34 <__libc_init_array+0x40>)
 8002e0c:	4c0a      	ldr	r4, [pc, #40]	; (8002e38 <__libc_init_array+0x44>)
 8002e0e:	1b64      	subs	r4, r4, r5
 8002e10:	10a4      	asrs	r4, r4, #2
 8002e12:	42a6      	cmp	r6, r4
 8002e14:	d105      	bne.n	8002e22 <__libc_init_array+0x2e>
 8002e16:	bd70      	pop	{r4, r5, r6, pc}
 8002e18:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e1c:	4798      	blx	r3
 8002e1e:	3601      	adds	r6, #1
 8002e20:	e7ee      	b.n	8002e00 <__libc_init_array+0xc>
 8002e22:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e26:	4798      	blx	r3
 8002e28:	3601      	adds	r6, #1
 8002e2a:	e7f2      	b.n	8002e12 <__libc_init_array+0x1e>
 8002e2c:	08002e78 	.word	0x08002e78
 8002e30:	08002e78 	.word	0x08002e78
 8002e34:	08002e78 	.word	0x08002e78
 8002e38:	08002e7c 	.word	0x08002e7c

08002e3c <_init>:
 8002e3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e3e:	bf00      	nop
 8002e40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e42:	bc08      	pop	{r3}
 8002e44:	469e      	mov	lr, r3
 8002e46:	4770      	bx	lr

08002e48 <_fini>:
 8002e48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e4a:	bf00      	nop
 8002e4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e4e:	bc08      	pop	{r3}
 8002e50:	469e      	mov	lr, r3
 8002e52:	4770      	bx	lr
