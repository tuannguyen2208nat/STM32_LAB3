
STM32_LAB3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003170  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  0800327c  0800327c  0001327c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080032a0  080032a0  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  080032a0  080032a0  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  080032a0  080032a0  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080032a0  080032a0  000132a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080032a4  080032a4  000132a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  080032a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000e4  20000064  0800330c  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000148  0800330c  00020148  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008d  2**0
                  CONTENTS, READONLY
 13 .debug_info   00008f18  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000020de  00000000  00000000  00028fe8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b68  00000000  00000000  0002b0c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000892  00000000  00000000  0002bc30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017957  00000000  00000000  0002c4c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f213  00000000  00000000  00043e19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00082768  00000000  00000000  0005302c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002b28  00000000  00000000  000d5794  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  000d82bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000064 	.word	0x20000064
 8000128:	00000000 	.word	0x00000000
 800012c:	08003264 	.word	0x08003264

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000068 	.word	0x20000068
 8000148:	08003264 	.word	0x08003264

0800014c <CHECKCO>:
#include "button.h"

int checkco=0;

int CHECKCO()
{
 800014c:	b480      	push	{r7}
 800014e:	af00      	add	r7, sp, #0
	return checkco;
 8000150:	4b02      	ldr	r3, [pc, #8]	; (800015c <CHECKCO+0x10>)
 8000152:	681b      	ldr	r3, [r3, #0]
}
 8000154:	4618      	mov	r0, r3
 8000156:	46bd      	mov	sp, r7
 8000158:	bc80      	pop	{r7}
 800015a:	4770      	bx	lr
 800015c:	20000080 	.word	0x20000080

08000160 <getkeyinput>:

void getkeyinput()
{
 8000160:	b580      	push	{r7, lr}
 8000162:	af00      	add	r7, sp, #0
	getkeyinput1();
 8000164:	f000 f8d2 	bl	800030c <getkeyinput1>
	getkeyinput3();
 8000168:	f000 fa3c 	bl	80005e4 <getkeyinput3>
	if(is_button3_press()==1)
 800016c:	f000 fa28 	bl	80005c0 <is_button3_press>
 8000170:	4603      	mov	r3, r0
 8000172:	2b01      	cmp	r3, #1
 8000174:	d111      	bne.n	800019a <getkeyinput+0x3a>
	{
		  if(checkco==0)
 8000176:	4b3d      	ldr	r3, [pc, #244]	; (800026c <getkeyinput+0x10c>)
 8000178:	681b      	ldr	r3, [r3, #0]
 800017a:	2b00      	cmp	r3, #0
 800017c:	d103      	bne.n	8000186 <getkeyinput+0x26>
		  {checkco=1;}
 800017e:	4b3b      	ldr	r3, [pc, #236]	; (800026c <getkeyinput+0x10c>)
 8000180:	2201      	movs	r2, #1
 8000182:	601a      	str	r2, [r3, #0]
 8000184:	e009      	b.n	800019a <getkeyinput+0x3a>
		  else if(checkco==1)
 8000186:	4b39      	ldr	r3, [pc, #228]	; (800026c <getkeyinput+0x10c>)
 8000188:	681b      	ldr	r3, [r3, #0]
 800018a:	2b01      	cmp	r3, #1
 800018c:	d105      	bne.n	800019a <getkeyinput+0x3a>
		  {
		  checkco=0;
 800018e:	4b37      	ldr	r3, [pc, #220]	; (800026c <getkeyinput+0x10c>)
 8000190:	2200      	movs	r2, #0
 8000192:	601a      	str	r2, [r3, #0]
		  timerupdate=1;
 8000194:	4b36      	ldr	r3, [pc, #216]	; (8000270 <getkeyinput+0x110>)
 8000196:	2201      	movs	r2, #1
 8000198:	601a      	str	r2, [r3, #0]
		  }
	}
	switch (mode)
 800019a:	4b36      	ldr	r3, [pc, #216]	; (8000274 <getkeyinput+0x114>)
 800019c:	681b      	ldr	r3, [r3, #0]
 800019e:	3b01      	subs	r3, #1
 80001a0:	2b03      	cmp	r3, #3
 80001a2:	d858      	bhi.n	8000256 <getkeyinput+0xf6>
 80001a4:	a201      	add	r2, pc, #4	; (adr r2, 80001ac <getkeyinput+0x4c>)
 80001a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80001aa:	bf00      	nop
 80001ac:	080001bd 	.word	0x080001bd
 80001b0:	080001df 	.word	0x080001df
 80001b4:	08000207 	.word	0x08000207
 80001b8:	0800022f 	.word	0x0800022f
	{
	case 1 :
		if(checkco==1)
 80001bc:	4b2b      	ldr	r3, [pc, #172]	; (800026c <getkeyinput+0x10c>)
 80001be:	681b      	ldr	r3, [r3, #0]
 80001c0:	2b01      	cmp	r3, #1
 80001c2:	d105      	bne.n	80001d0 <getkeyinput+0x70>
	    {
			fsm_run();
 80001c4:	f000 fefc 	bl	8000fc0 <fsm_run>
		    display_traffic1();
 80001c8:	f001 fab0 	bl	800172c <display_traffic1>
			display_traffic2();
 80001cc:	f001 fbec 	bl	80019a8 <display_traffic2>
	    }
	    if(checkco==0)
 80001d0:	4b26      	ldr	r3, [pc, #152]	; (800026c <getkeyinput+0x10c>)
 80001d2:	681b      	ldr	r3, [r3, #0]
 80001d4:	2b00      	cmp	r3, #0
 80001d6:	d140      	bne.n	800025a <getkeyinput+0xfa>
		{
			turn_off();
 80001d8:	f000 fefa 	bl	8000fd0 <turn_off>
	    }
		break;
 80001dc:	e03d      	b.n	800025a <getkeyinput+0xfa>
	case 2 :
		if(checkco==1)
 80001de:	4b23      	ldr	r3, [pc, #140]	; (800026c <getkeyinput+0x10c>)
 80001e0:	681b      	ldr	r3, [r3, #0]
 80001e2:	2b01      	cmp	r3, #1
 80001e4:	d108      	bne.n	80001f8 <getkeyinput+0x98>
	    {
			if(timerforled==0)
 80001e6:	4b24      	ldr	r3, [pc, #144]	; (8000278 <getkeyinput+0x118>)
 80001e8:	681b      	ldr	r3, [r3, #0]
 80001ea:	2b00      	cmp	r3, #0
 80001ec:	d102      	bne.n	80001f4 <getkeyinput+0x94>
			{
				timerforled=50;
 80001ee:	4b22      	ldr	r3, [pc, #136]	; (8000278 <getkeyinput+0x118>)
 80001f0:	2232      	movs	r2, #50	; 0x32
 80001f2:	601a      	str	r2, [r3, #0]
			}
			getkeyinput2();
 80001f4:	f000 f95e 	bl	80004b4 <getkeyinput2>
	    }
	    if(checkco==0)
 80001f8:	4b1c      	ldr	r3, [pc, #112]	; (800026c <getkeyinput+0x10c>)
 80001fa:	681b      	ldr	r3, [r3, #0]
 80001fc:	2b00      	cmp	r3, #0
 80001fe:	d12e      	bne.n	800025e <getkeyinput+0xfe>
		{
			turn_off();
 8000200:	f000 fee6 	bl	8000fd0 <turn_off>
	    }
		break;
 8000204:	e02b      	b.n	800025e <getkeyinput+0xfe>
	case 3 :
		if(checkco==1)
 8000206:	4b19      	ldr	r3, [pc, #100]	; (800026c <getkeyinput+0x10c>)
 8000208:	681b      	ldr	r3, [r3, #0]
 800020a:	2b01      	cmp	r3, #1
 800020c:	d108      	bne.n	8000220 <getkeyinput+0xc0>
	    {
			if(timerforled==0)
 800020e:	4b1a      	ldr	r3, [pc, #104]	; (8000278 <getkeyinput+0x118>)
 8000210:	681b      	ldr	r3, [r3, #0]
 8000212:	2b00      	cmp	r3, #0
 8000214:	d102      	bne.n	800021c <getkeyinput+0xbc>
			{
				timerforled=50;
 8000216:	4b18      	ldr	r3, [pc, #96]	; (8000278 <getkeyinput+0x118>)
 8000218:	2232      	movs	r2, #50	; 0x32
 800021a:	601a      	str	r2, [r3, #0]
			}
			getkeyinput2();
 800021c:	f000 f94a 	bl	80004b4 <getkeyinput2>
	    }
	    if(checkco==0)
 8000220:	4b12      	ldr	r3, [pc, #72]	; (800026c <getkeyinput+0x10c>)
 8000222:	681b      	ldr	r3, [r3, #0]
 8000224:	2b00      	cmp	r3, #0
 8000226:	d11c      	bne.n	8000262 <getkeyinput+0x102>
		{
			turn_off();
 8000228:	f000 fed2 	bl	8000fd0 <turn_off>
	    }
		break;
 800022c:	e019      	b.n	8000262 <getkeyinput+0x102>
	case 4 :
		if(checkco==1)
 800022e:	4b0f      	ldr	r3, [pc, #60]	; (800026c <getkeyinput+0x10c>)
 8000230:	681b      	ldr	r3, [r3, #0]
 8000232:	2b01      	cmp	r3, #1
 8000234:	d108      	bne.n	8000248 <getkeyinput+0xe8>
	    {
			if(timerforled==0)
 8000236:	4b10      	ldr	r3, [pc, #64]	; (8000278 <getkeyinput+0x118>)
 8000238:	681b      	ldr	r3, [r3, #0]
 800023a:	2b00      	cmp	r3, #0
 800023c:	d102      	bne.n	8000244 <getkeyinput+0xe4>
			{
			   timerforled=50;
 800023e:	4b0e      	ldr	r3, [pc, #56]	; (8000278 <getkeyinput+0x118>)
 8000240:	2232      	movs	r2, #50	; 0x32
 8000242:	601a      	str	r2, [r3, #0]
			}
			getkeyinput2();
 8000244:	f000 f936 	bl	80004b4 <getkeyinput2>
	    }
	    if(checkco==0)
 8000248:	4b08      	ldr	r3, [pc, #32]	; (800026c <getkeyinput+0x10c>)
 800024a:	681b      	ldr	r3, [r3, #0]
 800024c:	2b00      	cmp	r3, #0
 800024e:	d10a      	bne.n	8000266 <getkeyinput+0x106>
		{
			turn_off();
 8000250:	f000 febe 	bl	8000fd0 <turn_off>
	    }
		 break;
 8000254:	e007      	b.n	8000266 <getkeyinput+0x106>
	default : break;
 8000256:	bf00      	nop
 8000258:	e006      	b.n	8000268 <getkeyinput+0x108>
		break;
 800025a:	bf00      	nop
 800025c:	e004      	b.n	8000268 <getkeyinput+0x108>
		break;
 800025e:	bf00      	nop
 8000260:	e002      	b.n	8000268 <getkeyinput+0x108>
		break;
 8000262:	bf00      	nop
 8000264:	e000      	b.n	8000268 <getkeyinput+0x108>
		 break;
 8000266:	bf00      	nop
	}

}
 8000268:	bf00      	nop
 800026a:	bd80      	pop	{r7, pc}
 800026c:	20000080 	.word	0x20000080
 8000270:	2000001c 	.word	0x2000001c
 8000274:	20000018 	.word	0x20000018
 8000278:	20000020 	.word	0x20000020

0800027c <checkchedo>:
int timercountdown = 200;

int mode = 1;

void checkchedo()
{
 800027c:	b580      	push	{r7, lr}
 800027e:	af00      	add	r7, sp, #0
	if(CHECKCO()==0)
 8000280:	f7ff ff64 	bl	800014c <CHECKCO>
 8000284:	4603      	mov	r3, r0
 8000286:	2b00      	cmp	r3, #0
 8000288:	d135      	bne.n	80002f6 <checkchedo+0x7a>
	{
	switch (count)
 800028a:	4b1e      	ldr	r3, [pc, #120]	; (8000304 <checkchedo+0x88>)
 800028c:	681b      	ldr	r3, [r3, #0]
 800028e:	3b01      	subs	r3, #1
 8000290:	2b03      	cmp	r3, #3
 8000292:	d82f      	bhi.n	80002f4 <checkchedo+0x78>
 8000294:	a201      	add	r2, pc, #4	; (adr r2, 800029c <checkchedo+0x20>)
 8000296:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800029a:	bf00      	nop
 800029c:	080002ad 	.word	0x080002ad
 80002a0:	080002bf 	.word	0x080002bf
 80002a4:	080002d1 	.word	0x080002d1
 80002a8:	080002e3 	.word	0x080002e3
	{
	case 1 :
		update7SEGa(1);
 80002ac:	2001      	movs	r0, #1
 80002ae:	f000 f9e9 	bl	8000684 <update7SEGa>
		display7SEGa(count);
 80002b2:	4b14      	ldr	r3, [pc, #80]	; (8000304 <checkchedo+0x88>)
 80002b4:	681b      	ldr	r3, [r3, #0]
 80002b6:	4618      	mov	r0, r3
 80002b8:	f000 fa0e 	bl	80006d8 <display7SEGa>
		break;
 80002bc:	e01b      	b.n	80002f6 <checkchedo+0x7a>
	case 2 :
		update7SEGa(1);
 80002be:	2001      	movs	r0, #1
 80002c0:	f000 f9e0 	bl	8000684 <update7SEGa>
		display7SEGa(count);
 80002c4:	4b0f      	ldr	r3, [pc, #60]	; (8000304 <checkchedo+0x88>)
 80002c6:	681b      	ldr	r3, [r3, #0]
 80002c8:	4618      	mov	r0, r3
 80002ca:	f000 fa05 	bl	80006d8 <display7SEGa>
		break;
 80002ce:	e012      	b.n	80002f6 <checkchedo+0x7a>
	case 3 :
		update7SEGa(1);
 80002d0:	2001      	movs	r0, #1
 80002d2:	f000 f9d7 	bl	8000684 <update7SEGa>
		display7SEGa(count);
 80002d6:	4b0b      	ldr	r3, [pc, #44]	; (8000304 <checkchedo+0x88>)
 80002d8:	681b      	ldr	r3, [r3, #0]
 80002da:	4618      	mov	r0, r3
 80002dc:	f000 f9fc 	bl	80006d8 <display7SEGa>
		break;
 80002e0:	e009      	b.n	80002f6 <checkchedo+0x7a>
	case 4 :
		update7SEGa(1);
 80002e2:	2001      	movs	r0, #1
 80002e4:	f000 f9ce 	bl	8000684 <update7SEGa>
		display7SEGa(count);
 80002e8:	4b06      	ldr	r3, [pc, #24]	; (8000304 <checkchedo+0x88>)
 80002ea:	681b      	ldr	r3, [r3, #0]
 80002ec:	4618      	mov	r0, r3
 80002ee:	f000 f9f3 	bl	80006d8 <display7SEGa>
		break;
 80002f2:	e000      	b.n	80002f6 <checkchedo+0x7a>
	default : break;
 80002f4:	bf00      	nop
	}
	}
	mode=count;
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <checkchedo+0x88>)
 80002f8:	681b      	ldr	r3, [r3, #0]
 80002fa:	4a03      	ldr	r2, [pc, #12]	; (8000308 <checkchedo+0x8c>)
 80002fc:	6013      	str	r3, [r2, #0]

}
 80002fe:	bf00      	nop
 8000300:	bd80      	pop	{r7, pc}
 8000302:	bf00      	nop
 8000304:	20000000 	.word	0x20000000
 8000308:	20000018 	.word	0x20000018

0800030c <getkeyinput1>:

void getkeyinput1()
{
 800030c:	b580      	push	{r7, lr}
 800030e:	af00      	add	r7, sp, #0
	keyreg0=keyreg1;
 8000310:	4b25      	ldr	r3, [pc, #148]	; (80003a8 <getkeyinput1+0x9c>)
 8000312:	681b      	ldr	r3, [r3, #0]
 8000314:	4a25      	ldr	r2, [pc, #148]	; (80003ac <getkeyinput1+0xa0>)
 8000316:	6013      	str	r3, [r2, #0]
	keyreg1=keyreg2;
 8000318:	4b25      	ldr	r3, [pc, #148]	; (80003b0 <getkeyinput1+0xa4>)
 800031a:	681b      	ldr	r3, [r3, #0]
 800031c:	4a22      	ldr	r2, [pc, #136]	; (80003a8 <getkeyinput1+0x9c>)
 800031e:	6013      	str	r3, [r2, #0]
	keyreg2=HAL_GPIO_ReadPin(button1_GPIO_Port, button1_Pin);
 8000320:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000324:	4823      	ldr	r0, [pc, #140]	; (80003b4 <getkeyinput1+0xa8>)
 8000326:	f001 ff63 	bl	80021f0 <HAL_GPIO_ReadPin>
 800032a:	4603      	mov	r3, r0
 800032c:	461a      	mov	r2, r3
 800032e:	4b20      	ldr	r3, [pc, #128]	; (80003b0 <getkeyinput1+0xa4>)
 8000330:	601a      	str	r2, [r3, #0]
	if((keyreg0==keyreg1)&&(keyreg1==keyreg2))
 8000332:	4b1e      	ldr	r3, [pc, #120]	; (80003ac <getkeyinput1+0xa0>)
 8000334:	681a      	ldr	r2, [r3, #0]
 8000336:	4b1c      	ldr	r3, [pc, #112]	; (80003a8 <getkeyinput1+0x9c>)
 8000338:	681b      	ldr	r3, [r3, #0]
 800033a:	429a      	cmp	r2, r3
 800033c:	d12f      	bne.n	800039e <getkeyinput1+0x92>
 800033e:	4b1a      	ldr	r3, [pc, #104]	; (80003a8 <getkeyinput1+0x9c>)
 8000340:	681a      	ldr	r2, [r3, #0]
 8000342:	4b1b      	ldr	r3, [pc, #108]	; (80003b0 <getkeyinput1+0xa4>)
 8000344:	681b      	ldr	r3, [r3, #0]
 8000346:	429a      	cmp	r2, r3
 8000348:	d129      	bne.n	800039e <getkeyinput1+0x92>
	{
		if(keyreg3!=keyreg2)
 800034a:	4b1b      	ldr	r3, [pc, #108]	; (80003b8 <getkeyinput1+0xac>)
 800034c:	681a      	ldr	r2, [r3, #0]
 800034e:	4b18      	ldr	r3, [pc, #96]	; (80003b0 <getkeyinput1+0xa4>)
 8000350:	681b      	ldr	r3, [r3, #0]
 8000352:	429a      	cmp	r2, r3
 8000354:	d017      	beq.n	8000386 <getkeyinput1+0x7a>
		{
			keyreg3=keyreg2;
 8000356:	4b16      	ldr	r3, [pc, #88]	; (80003b0 <getkeyinput1+0xa4>)
 8000358:	681b      	ldr	r3, [r3, #0]
 800035a:	4a17      	ldr	r2, [pc, #92]	; (80003b8 <getkeyinput1+0xac>)
 800035c:	6013      	str	r3, [r2, #0]
			if(keyreg2==pressed_state)
 800035e:	4b14      	ldr	r3, [pc, #80]	; (80003b0 <getkeyinput1+0xa4>)
 8000360:	681b      	ldr	r3, [r3, #0]
 8000362:	2b00      	cmp	r3, #0
 8000364:	d11b      	bne.n	800039e <getkeyinput1+0x92>
			{
				///TO DO
				count++;
 8000366:	4b15      	ldr	r3, [pc, #84]	; (80003bc <getkeyinput1+0xb0>)
 8000368:	681b      	ldr	r3, [r3, #0]
 800036a:	3301      	adds	r3, #1
 800036c:	4a13      	ldr	r2, [pc, #76]	; (80003bc <getkeyinput1+0xb0>)
 800036e:	6013      	str	r3, [r2, #0]
				if(count>4){count=1;}
 8000370:	4b12      	ldr	r3, [pc, #72]	; (80003bc <getkeyinput1+0xb0>)
 8000372:	681b      	ldr	r3, [r3, #0]
 8000374:	2b04      	cmp	r3, #4
 8000376:	dd02      	ble.n	800037e <getkeyinput1+0x72>
 8000378:	4b10      	ldr	r3, [pc, #64]	; (80003bc <getkeyinput1+0xb0>)
 800037a:	2201      	movs	r2, #1
 800037c:	601a      	str	r2, [r3, #0]
				timercountdown=200;
 800037e:	4b10      	ldr	r3, [pc, #64]	; (80003c0 <getkeyinput1+0xb4>)
 8000380:	22c8      	movs	r2, #200	; 0xc8
 8000382:	601a      	str	r2, [r3, #0]
 8000384:	e00b      	b.n	800039e <getkeyinput1+0x92>
			}
		}
		else
		{
			timercountdown--;
 8000386:	4b0e      	ldr	r3, [pc, #56]	; (80003c0 <getkeyinput1+0xb4>)
 8000388:	681b      	ldr	r3, [r3, #0]
 800038a:	3b01      	subs	r3, #1
 800038c:	4a0c      	ldr	r2, [pc, #48]	; (80003c0 <getkeyinput1+0xb4>)
 800038e:	6013      	str	r3, [r2, #0]
			if(timercountdown==0)
 8000390:	4b0b      	ldr	r3, [pc, #44]	; (80003c0 <getkeyinput1+0xb4>)
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	2b00      	cmp	r3, #0
 8000396:	d102      	bne.n	800039e <getkeyinput1+0x92>
			{
				keyreg3=normal_state;
 8000398:	4b07      	ldr	r3, [pc, #28]	; (80003b8 <getkeyinput1+0xac>)
 800039a:	2201      	movs	r2, #1
 800039c:	601a      	str	r2, [r3, #0]
			}
		}
	}
	checkchedo();
 800039e:	f7ff ff6d 	bl	800027c <checkchedo>
}
 80003a2:	bf00      	nop
 80003a4:	bd80      	pop	{r7, pc}
 80003a6:	bf00      	nop
 80003a8:	20000008 	.word	0x20000008
 80003ac:	20000004 	.word	0x20000004
 80003b0:	2000000c 	.word	0x2000000c
 80003b4:	40011000 	.word	0x40011000
 80003b8:	20000010 	.word	0x20000010
 80003bc:	20000000 	.word	0x20000000
 80003c0:	20000014 	.word	0x20000014

080003c4 <settimerforchedo>:

int keyreg23=normal_state;
int timercountdown2 = 200;

void settimerforchedo()
{
 80003c4:	b580      	push	{r7, lr}
 80003c6:	af00      	add	r7, sp, #0
	switch (mode)
 80003c8:	4b13      	ldr	r3, [pc, #76]	; (8000418 <settimerforchedo+0x54>)
 80003ca:	681b      	ldr	r3, [r3, #0]
 80003cc:	2b04      	cmp	r3, #4
 80003ce:	d018      	beq.n	8000402 <settimerforchedo+0x3e>
 80003d0:	2b04      	cmp	r3, #4
 80003d2:	dc1e      	bgt.n	8000412 <settimerforchedo+0x4e>
 80003d4:	2b02      	cmp	r3, #2
 80003d6:	d002      	beq.n	80003de <settimerforchedo+0x1a>
 80003d8:	2b03      	cmp	r3, #3
 80003da:	d009      	beq.n	80003f0 <settimerforchedo+0x2c>
	case 3 :
		changetimer2(timerupdate*100);
		break;
	case 4 :
		changetimer3(timerupdate*100);
	default : break;
 80003dc:	e019      	b.n	8000412 <settimerforchedo+0x4e>
		changetimer1(timerupdate*100);
 80003de:	4b0f      	ldr	r3, [pc, #60]	; (800041c <settimerforchedo+0x58>)
 80003e0:	681b      	ldr	r3, [r3, #0]
 80003e2:	2264      	movs	r2, #100	; 0x64
 80003e4:	fb02 f303 	mul.w	r3, r2, r3
 80003e8:	4618      	mov	r0, r3
 80003ea:	f000 fea5 	bl	8001138 <changetimer1>
		break;
 80003ee:	e011      	b.n	8000414 <settimerforchedo+0x50>
		changetimer2(timerupdate*100);
 80003f0:	4b0a      	ldr	r3, [pc, #40]	; (800041c <settimerforchedo+0x58>)
 80003f2:	681b      	ldr	r3, [r3, #0]
 80003f4:	2264      	movs	r2, #100	; 0x64
 80003f6:	fb02 f303 	mul.w	r3, r2, r3
 80003fa:	4618      	mov	r0, r3
 80003fc:	f000 feaa 	bl	8001154 <changetimer2>
		break;
 8000400:	e008      	b.n	8000414 <settimerforchedo+0x50>
		changetimer3(timerupdate*100);
 8000402:	4b06      	ldr	r3, [pc, #24]	; (800041c <settimerforchedo+0x58>)
 8000404:	681b      	ldr	r3, [r3, #0]
 8000406:	2264      	movs	r2, #100	; 0x64
 8000408:	fb02 f303 	mul.w	r3, r2, r3
 800040c:	4618      	mov	r0, r3
 800040e:	f000 feaf 	bl	8001170 <changetimer3>
	default : break;
 8000412:	bf00      	nop
	}
}
 8000414:	bf00      	nop
 8000416:	bd80      	pop	{r7, pc}
 8000418:	20000018 	.word	0x20000018
 800041c:	2000001c 	.word	0x2000001c

08000420 <display_chedo>:

void display_chedo()
{
 8000420:	b580      	push	{r7, lr}
 8000422:	af00      	add	r7, sp, #0
	update7SEGb(counter);
 8000424:	4b0e      	ldr	r3, [pc, #56]	; (8000460 <display_chedo+0x40>)
 8000426:	681b      	ldr	r3, [r3, #0]
 8000428:	4618      	mov	r0, r3
 800042a:	f000 fae5 	bl	80009f8 <update7SEGb>
	display7SEGb(led[counter]);
 800042e:	4b0c      	ldr	r3, [pc, #48]	; (8000460 <display_chedo+0x40>)
 8000430:	681b      	ldr	r3, [r3, #0]
 8000432:	4a0c      	ldr	r2, [pc, #48]	; (8000464 <display_chedo+0x44>)
 8000434:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000438:	4618      	mov	r0, r3
 800043a:	f000 fb09 	bl	8000a50 <display7SEGb>
	if(counter==0)
 800043e:	4b08      	ldr	r3, [pc, #32]	; (8000460 <display_chedo+0x40>)
 8000440:	681b      	ldr	r3, [r3, #0]
 8000442:	2b00      	cmp	r3, #0
 8000444:	d103      	bne.n	800044e <display_chedo+0x2e>
	{
		counter=1;
 8000446:	4b06      	ldr	r3, [pc, #24]	; (8000460 <display_chedo+0x40>)
 8000448:	2201      	movs	r2, #1
 800044a:	601a      	str	r2, [r3, #0]
	}
	else if(counter==1)
	{
		counter=0;
	}
}
 800044c:	e006      	b.n	800045c <display_chedo+0x3c>
	else if(counter==1)
 800044e:	4b04      	ldr	r3, [pc, #16]	; (8000460 <display_chedo+0x40>)
 8000450:	681b      	ldr	r3, [r3, #0]
 8000452:	2b01      	cmp	r3, #1
 8000454:	d102      	bne.n	800045c <display_chedo+0x3c>
		counter=0;
 8000456:	4b02      	ldr	r3, [pc, #8]	; (8000460 <display_chedo+0x40>)
 8000458:	2200      	movs	r2, #0
 800045a:	601a      	str	r2, [r3, #0]
}
 800045c:	bf00      	nop
 800045e:	bd80      	pop	{r7, pc}
 8000460:	20000084 	.word	0x20000084
 8000464:	20000088 	.word	0x20000088

08000468 <updateclockbuffer>:

void updateclockbuffer()
{
 8000468:	b480      	push	{r7}
 800046a:	af00      	add	r7, sp, #0
	led[0]=timerupdate/10;
 800046c:	4b0e      	ldr	r3, [pc, #56]	; (80004a8 <updateclockbuffer+0x40>)
 800046e:	681b      	ldr	r3, [r3, #0]
 8000470:	4a0e      	ldr	r2, [pc, #56]	; (80004ac <updateclockbuffer+0x44>)
 8000472:	fb82 1203 	smull	r1, r2, r2, r3
 8000476:	1092      	asrs	r2, r2, #2
 8000478:	17db      	asrs	r3, r3, #31
 800047a:	1ad3      	subs	r3, r2, r3
 800047c:	4a0c      	ldr	r2, [pc, #48]	; (80004b0 <updateclockbuffer+0x48>)
 800047e:	6013      	str	r3, [r2, #0]
	led[1]=timerupdate%10;
 8000480:	4b09      	ldr	r3, [pc, #36]	; (80004a8 <updateclockbuffer+0x40>)
 8000482:	6819      	ldr	r1, [r3, #0]
 8000484:	4b09      	ldr	r3, [pc, #36]	; (80004ac <updateclockbuffer+0x44>)
 8000486:	fb83 2301 	smull	r2, r3, r3, r1
 800048a:	109a      	asrs	r2, r3, #2
 800048c:	17cb      	asrs	r3, r1, #31
 800048e:	1ad2      	subs	r2, r2, r3
 8000490:	4613      	mov	r3, r2
 8000492:	009b      	lsls	r3, r3, #2
 8000494:	4413      	add	r3, r2
 8000496:	005b      	lsls	r3, r3, #1
 8000498:	1aca      	subs	r2, r1, r3
 800049a:	4b05      	ldr	r3, [pc, #20]	; (80004b0 <updateclockbuffer+0x48>)
 800049c:	605a      	str	r2, [r3, #4]
}
 800049e:	bf00      	nop
 80004a0:	46bd      	mov	sp, r7
 80004a2:	bc80      	pop	{r7}
 80004a4:	4770      	bx	lr
 80004a6:	bf00      	nop
 80004a8:	2000001c 	.word	0x2000001c
 80004ac:	66666667 	.word	0x66666667
 80004b0:	20000088 	.word	0x20000088

080004b4 <getkeyinput2>:


void getkeyinput2()
{
 80004b4:	b580      	push	{r7, lr}
 80004b6:	af00      	add	r7, sp, #0
	keyreg20=keyreg21;
 80004b8:	4b37      	ldr	r3, [pc, #220]	; (8000598 <getkeyinput2+0xe4>)
 80004ba:	681b      	ldr	r3, [r3, #0]
 80004bc:	4a37      	ldr	r2, [pc, #220]	; (800059c <getkeyinput2+0xe8>)
 80004be:	6013      	str	r3, [r2, #0]
	keyreg21=keyreg22;
 80004c0:	4b37      	ldr	r3, [pc, #220]	; (80005a0 <getkeyinput2+0xec>)
 80004c2:	681b      	ldr	r3, [r3, #0]
 80004c4:	4a34      	ldr	r2, [pc, #208]	; (8000598 <getkeyinput2+0xe4>)
 80004c6:	6013      	str	r3, [r2, #0]
	keyreg22=HAL_GPIO_ReadPin(button2_GPIO_Port, button2_Pin);
 80004c8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80004cc:	4835      	ldr	r0, [pc, #212]	; (80005a4 <getkeyinput2+0xf0>)
 80004ce:	f001 fe8f 	bl	80021f0 <HAL_GPIO_ReadPin>
 80004d2:	4603      	mov	r3, r0
 80004d4:	461a      	mov	r2, r3
 80004d6:	4b32      	ldr	r3, [pc, #200]	; (80005a0 <getkeyinput2+0xec>)
 80004d8:	601a      	str	r2, [r3, #0]
	if((keyreg20==keyreg21)&&(keyreg21==keyreg22))
 80004da:	4b30      	ldr	r3, [pc, #192]	; (800059c <getkeyinput2+0xe8>)
 80004dc:	681a      	ldr	r2, [r3, #0]
 80004de:	4b2e      	ldr	r3, [pc, #184]	; (8000598 <getkeyinput2+0xe4>)
 80004e0:	681b      	ldr	r3, [r3, #0]
 80004e2:	429a      	cmp	r2, r3
 80004e4:	d12f      	bne.n	8000546 <getkeyinput2+0x92>
 80004e6:	4b2c      	ldr	r3, [pc, #176]	; (8000598 <getkeyinput2+0xe4>)
 80004e8:	681a      	ldr	r2, [r3, #0]
 80004ea:	4b2d      	ldr	r3, [pc, #180]	; (80005a0 <getkeyinput2+0xec>)
 80004ec:	681b      	ldr	r3, [r3, #0]
 80004ee:	429a      	cmp	r2, r3
 80004f0:	d129      	bne.n	8000546 <getkeyinput2+0x92>
	{
		if(keyreg23!=keyreg22)
 80004f2:	4b2d      	ldr	r3, [pc, #180]	; (80005a8 <getkeyinput2+0xf4>)
 80004f4:	681a      	ldr	r2, [r3, #0]
 80004f6:	4b2a      	ldr	r3, [pc, #168]	; (80005a0 <getkeyinput2+0xec>)
 80004f8:	681b      	ldr	r3, [r3, #0]
 80004fa:	429a      	cmp	r2, r3
 80004fc:	d017      	beq.n	800052e <getkeyinput2+0x7a>
		{
			keyreg23=keyreg22;
 80004fe:	4b28      	ldr	r3, [pc, #160]	; (80005a0 <getkeyinput2+0xec>)
 8000500:	681b      	ldr	r3, [r3, #0]
 8000502:	4a29      	ldr	r2, [pc, #164]	; (80005a8 <getkeyinput2+0xf4>)
 8000504:	6013      	str	r3, [r2, #0]
			if(keyreg22==pressed_state)
 8000506:	4b26      	ldr	r3, [pc, #152]	; (80005a0 <getkeyinput2+0xec>)
 8000508:	681b      	ldr	r3, [r3, #0]
 800050a:	2b00      	cmp	r3, #0
 800050c:	d11b      	bne.n	8000546 <getkeyinput2+0x92>
			{
				///TO DO
				timerupdate++;
 800050e:	4b27      	ldr	r3, [pc, #156]	; (80005ac <getkeyinput2+0xf8>)
 8000510:	681b      	ldr	r3, [r3, #0]
 8000512:	3301      	adds	r3, #1
 8000514:	4a25      	ldr	r2, [pc, #148]	; (80005ac <getkeyinput2+0xf8>)
 8000516:	6013      	str	r3, [r2, #0]
				if(timerupdate>99){timerupdate=1;}
 8000518:	4b24      	ldr	r3, [pc, #144]	; (80005ac <getkeyinput2+0xf8>)
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	2b63      	cmp	r3, #99	; 0x63
 800051e:	dd02      	ble.n	8000526 <getkeyinput2+0x72>
 8000520:	4b22      	ldr	r3, [pc, #136]	; (80005ac <getkeyinput2+0xf8>)
 8000522:	2201      	movs	r2, #1
 8000524:	601a      	str	r2, [r3, #0]
				timercountdown2=200;
 8000526:	4b22      	ldr	r3, [pc, #136]	; (80005b0 <getkeyinput2+0xfc>)
 8000528:	22c8      	movs	r2, #200	; 0xc8
 800052a:	601a      	str	r2, [r3, #0]
 800052c:	e00b      	b.n	8000546 <getkeyinput2+0x92>
			}
		}
		else
		{
			timercountdown2--;
 800052e:	4b20      	ldr	r3, [pc, #128]	; (80005b0 <getkeyinput2+0xfc>)
 8000530:	681b      	ldr	r3, [r3, #0]
 8000532:	3b01      	subs	r3, #1
 8000534:	4a1e      	ldr	r2, [pc, #120]	; (80005b0 <getkeyinput2+0xfc>)
 8000536:	6013      	str	r3, [r2, #0]
			if(timercountdown2==0)
 8000538:	4b1d      	ldr	r3, [pc, #116]	; (80005b0 <getkeyinput2+0xfc>)
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	2b00      	cmp	r3, #0
 800053e:	d102      	bne.n	8000546 <getkeyinput2+0x92>
			{
				keyreg23=normal_state;
 8000540:	4b19      	ldr	r3, [pc, #100]	; (80005a8 <getkeyinput2+0xf4>)
 8000542:	2201      	movs	r2, #1
 8000544:	601a      	str	r2, [r3, #0]
			}
		}
	}
	timerforled--;
 8000546:	4b1b      	ldr	r3, [pc, #108]	; (80005b4 <getkeyinput2+0x100>)
 8000548:	681b      	ldr	r3, [r3, #0]
 800054a:	3b01      	subs	r3, #1
 800054c:	4a19      	ldr	r2, [pc, #100]	; (80005b4 <getkeyinput2+0x100>)
 800054e:	6013      	str	r3, [r2, #0]
	updateclockbuffer();
 8000550:	f7ff ff8a 	bl	8000468 <updateclockbuffer>
	settimerforchedo();
 8000554:	f7ff ff36 	bl	80003c4 <settimerforchedo>
	if(timerforled==0)
 8000558:	4b16      	ldr	r3, [pc, #88]	; (80005b4 <getkeyinput2+0x100>)
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	2b00      	cmp	r3, #0
 800055e:	d119      	bne.n	8000594 <getkeyinput2+0xe0>
	{
		if(mode==2){HAL_GPIO_TogglePin(led_red2_GPIO_Port, led_red2_Pin);}
 8000560:	4b15      	ldr	r3, [pc, #84]	; (80005b8 <getkeyinput2+0x104>)
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	2b02      	cmp	r3, #2
 8000566:	d103      	bne.n	8000570 <getkeyinput2+0xbc>
 8000568:	2108      	movs	r1, #8
 800056a:	4814      	ldr	r0, [pc, #80]	; (80005bc <getkeyinput2+0x108>)
 800056c:	f001 fe6f 	bl	800224e <HAL_GPIO_TogglePin>
		if(mode==3){HAL_GPIO_TogglePin(led_green2_GPIO_Port, led_green2_Pin);}
 8000570:	4b11      	ldr	r3, [pc, #68]	; (80005b8 <getkeyinput2+0x104>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	2b03      	cmp	r3, #3
 8000576:	d103      	bne.n	8000580 <getkeyinput2+0xcc>
 8000578:	2110      	movs	r1, #16
 800057a:	4810      	ldr	r0, [pc, #64]	; (80005bc <getkeyinput2+0x108>)
 800057c:	f001 fe67 	bl	800224e <HAL_GPIO_TogglePin>
		if(mode==4){HAL_GPIO_TogglePin(led_yellow2_GPIO_Port, led_yellow2_Pin);}
 8000580:	4b0d      	ldr	r3, [pc, #52]	; (80005b8 <getkeyinput2+0x104>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	2b04      	cmp	r3, #4
 8000586:	d103      	bne.n	8000590 <getkeyinput2+0xdc>
 8000588:	2120      	movs	r1, #32
 800058a:	480c      	ldr	r0, [pc, #48]	; (80005bc <getkeyinput2+0x108>)
 800058c:	f001 fe5f 	bl	800224e <HAL_GPIO_TogglePin>
		display_chedo();
 8000590:	f7ff ff46 	bl	8000420 <display_chedo>
	}

}
 8000594:	bf00      	nop
 8000596:	bd80      	pop	{r7, pc}
 8000598:	20000028 	.word	0x20000028
 800059c:	20000024 	.word	0x20000024
 80005a0:	2000002c 	.word	0x2000002c
 80005a4:	40011000 	.word	0x40011000
 80005a8:	20000030 	.word	0x20000030
 80005ac:	2000001c 	.word	0x2000001c
 80005b0:	20000034 	.word	0x20000034
 80005b4:	20000020 	.word	0x20000020
 80005b8:	20000018 	.word	0x20000018
 80005bc:	40010800 	.word	0x40010800

080005c0 <is_button3_press>:
int timercountdown3 = 200;

int button3_flag=0;

int is_button3_press()
{
 80005c0:	b480      	push	{r7}
 80005c2:	af00      	add	r7, sp, #0
	if(button3_flag==1)
 80005c4:	4b06      	ldr	r3, [pc, #24]	; (80005e0 <is_button3_press+0x20>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	2b01      	cmp	r3, #1
 80005ca:	d104      	bne.n	80005d6 <is_button3_press+0x16>
	{
		button3_flag=0;
 80005cc:	4b04      	ldr	r3, [pc, #16]	; (80005e0 <is_button3_press+0x20>)
 80005ce:	2200      	movs	r2, #0
 80005d0:	601a      	str	r2, [r3, #0]
		return 1;
 80005d2:	2301      	movs	r3, #1
 80005d4:	e000      	b.n	80005d8 <is_button3_press+0x18>
	}
	return 0;
 80005d6:	2300      	movs	r3, #0
}
 80005d8:	4618      	mov	r0, r3
 80005da:	46bd      	mov	sp, r7
 80005dc:	bc80      	pop	{r7}
 80005de:	4770      	bx	lr
 80005e0:	20000090 	.word	0x20000090

080005e4 <getkeyinput3>:

void getkeyinput3()
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	af00      	add	r7, sp, #0
	keyreg30=keyreg31;
 80005e8:	4b1f      	ldr	r3, [pc, #124]	; (8000668 <getkeyinput3+0x84>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	4a1f      	ldr	r2, [pc, #124]	; (800066c <getkeyinput3+0x88>)
 80005ee:	6013      	str	r3, [r2, #0]
	keyreg31=keyreg32;
 80005f0:	4b1f      	ldr	r3, [pc, #124]	; (8000670 <getkeyinput3+0x8c>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	4a1c      	ldr	r2, [pc, #112]	; (8000668 <getkeyinput3+0x84>)
 80005f6:	6013      	str	r3, [r2, #0]
	keyreg32=HAL_GPIO_ReadPin(button3_GPIO_Port, button3_Pin);
 80005f8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80005fc:	481d      	ldr	r0, [pc, #116]	; (8000674 <getkeyinput3+0x90>)
 80005fe:	f001 fdf7 	bl	80021f0 <HAL_GPIO_ReadPin>
 8000602:	4603      	mov	r3, r0
 8000604:	461a      	mov	r2, r3
 8000606:	4b1a      	ldr	r3, [pc, #104]	; (8000670 <getkeyinput3+0x8c>)
 8000608:	601a      	str	r2, [r3, #0]
	if((keyreg30==keyreg31)&&(keyreg31==keyreg32))
 800060a:	4b18      	ldr	r3, [pc, #96]	; (800066c <getkeyinput3+0x88>)
 800060c:	681a      	ldr	r2, [r3, #0]
 800060e:	4b16      	ldr	r3, [pc, #88]	; (8000668 <getkeyinput3+0x84>)
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	429a      	cmp	r2, r3
 8000614:	d126      	bne.n	8000664 <getkeyinput3+0x80>
 8000616:	4b14      	ldr	r3, [pc, #80]	; (8000668 <getkeyinput3+0x84>)
 8000618:	681a      	ldr	r2, [r3, #0]
 800061a:	4b15      	ldr	r3, [pc, #84]	; (8000670 <getkeyinput3+0x8c>)
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	429a      	cmp	r2, r3
 8000620:	d120      	bne.n	8000664 <getkeyinput3+0x80>
	{
		if(keyreg33!=keyreg32)
 8000622:	4b15      	ldr	r3, [pc, #84]	; (8000678 <getkeyinput3+0x94>)
 8000624:	681a      	ldr	r2, [r3, #0]
 8000626:	4b12      	ldr	r3, [pc, #72]	; (8000670 <getkeyinput3+0x8c>)
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	429a      	cmp	r2, r3
 800062c:	d00e      	beq.n	800064c <getkeyinput3+0x68>
		{
			keyreg33=keyreg32;
 800062e:	4b10      	ldr	r3, [pc, #64]	; (8000670 <getkeyinput3+0x8c>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	4a11      	ldr	r2, [pc, #68]	; (8000678 <getkeyinput3+0x94>)
 8000634:	6013      	str	r3, [r2, #0]
			if(keyreg32==pressed_state)
 8000636:	4b0e      	ldr	r3, [pc, #56]	; (8000670 <getkeyinput3+0x8c>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	2b00      	cmp	r3, #0
 800063c:	d112      	bne.n	8000664 <getkeyinput3+0x80>
			{
				///TO DO
				button3_flag=1;
 800063e:	4b0f      	ldr	r3, [pc, #60]	; (800067c <getkeyinput3+0x98>)
 8000640:	2201      	movs	r2, #1
 8000642:	601a      	str	r2, [r3, #0]
				timercountdown3=200;
 8000644:	4b0e      	ldr	r3, [pc, #56]	; (8000680 <getkeyinput3+0x9c>)
 8000646:	22c8      	movs	r2, #200	; 0xc8
 8000648:	601a      	str	r2, [r3, #0]
			{
				keyreg33=normal_state;
			}
		}
	}
}
 800064a:	e00b      	b.n	8000664 <getkeyinput3+0x80>
			timercountdown3--;
 800064c:	4b0c      	ldr	r3, [pc, #48]	; (8000680 <getkeyinput3+0x9c>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	3b01      	subs	r3, #1
 8000652:	4a0b      	ldr	r2, [pc, #44]	; (8000680 <getkeyinput3+0x9c>)
 8000654:	6013      	str	r3, [r2, #0]
			if(timercountdown3==0)
 8000656:	4b0a      	ldr	r3, [pc, #40]	; (8000680 <getkeyinput3+0x9c>)
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	2b00      	cmp	r3, #0
 800065c:	d102      	bne.n	8000664 <getkeyinput3+0x80>
				keyreg33=normal_state;
 800065e:	4b06      	ldr	r3, [pc, #24]	; (8000678 <getkeyinput3+0x94>)
 8000660:	2201      	movs	r2, #1
 8000662:	601a      	str	r2, [r3, #0]
}
 8000664:	bf00      	nop
 8000666:	bd80      	pop	{r7, pc}
 8000668:	2000003c 	.word	0x2000003c
 800066c:	20000038 	.word	0x20000038
 8000670:	20000040 	.word	0x20000040
 8000674:	40011000 	.word	0x40011000
 8000678:	20000044 	.word	0x20000044
 800067c:	20000090 	.word	0x20000090
 8000680:	20000048 	.word	0x20000048

08000684 <update7SEGa>:
 *      Author: tuann
 */
#include "display1.h"

 void update7SEGa ( int index )
  {
 8000684:	b580      	push	{r7, lr}
 8000686:	b082      	sub	sp, #8
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
    switch ( index )
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	2b00      	cmp	r3, #0
 8000690:	d003      	beq.n	800069a <update7SEGa+0x16>
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	2b01      	cmp	r3, #1
 8000696:	d00c      	beq.n	80006b2 <update7SEGa+0x2e>
        break ;
    case 1:
	    HAL_GPIO_WritePin(en0_GPIO_Port,en0_Pin, SET);
	    HAL_GPIO_WritePin(en1_GPIO_Port,en1_Pin, RESET);
        break ;
    default : break ;
 8000698:	e017      	b.n	80006ca <update7SEGa+0x46>
	    HAL_GPIO_WritePin(en0_GPIO_Port,en0_Pin, RESET);
 800069a:	2200      	movs	r2, #0
 800069c:	2180      	movs	r1, #128	; 0x80
 800069e:	480d      	ldr	r0, [pc, #52]	; (80006d4 <update7SEGa+0x50>)
 80006a0:	f001 fdbd 	bl	800221e <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(en1_GPIO_Port,en1_Pin, SET);
 80006a4:	2201      	movs	r2, #1
 80006a6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006aa:	480a      	ldr	r0, [pc, #40]	; (80006d4 <update7SEGa+0x50>)
 80006ac:	f001 fdb7 	bl	800221e <HAL_GPIO_WritePin>
        break ;
 80006b0:	e00b      	b.n	80006ca <update7SEGa+0x46>
	    HAL_GPIO_WritePin(en0_GPIO_Port,en0_Pin, SET);
 80006b2:	2201      	movs	r2, #1
 80006b4:	2180      	movs	r1, #128	; 0x80
 80006b6:	4807      	ldr	r0, [pc, #28]	; (80006d4 <update7SEGa+0x50>)
 80006b8:	f001 fdb1 	bl	800221e <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(en1_GPIO_Port,en1_Pin, RESET);
 80006bc:	2200      	movs	r2, #0
 80006be:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006c2:	4804      	ldr	r0, [pc, #16]	; (80006d4 <update7SEGa+0x50>)
 80006c4:	f001 fdab 	bl	800221e <HAL_GPIO_WritePin>
        break ;
 80006c8:	bf00      	nop
    }
  }
 80006ca:	bf00      	nop
 80006cc:	3708      	adds	r7, #8
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	bf00      	nop
 80006d4:	40010800 	.word	0x40010800

080006d8 <display7SEGa>:

 void display7SEGa(int index)
  {
 80006d8:	b580      	push	{r7, lr}
 80006da:	b082      	sub	sp, #8
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
  	switch (index)
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	2b09      	cmp	r3, #9
 80006e4:	f200 8180 	bhi.w	80009e8 <display7SEGa+0x310>
 80006e8:	a201      	add	r2, pc, #4	; (adr r2, 80006f0 <display7SEGa+0x18>)
 80006ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006ee:	bf00      	nop
 80006f0:	08000719 	.word	0x08000719
 80006f4:	08000761 	.word	0x08000761
 80006f8:	080007a9 	.word	0x080007a9
 80006fc:	080007f1 	.word	0x080007f1
 8000700:	08000839 	.word	0x08000839
 8000704:	08000881 	.word	0x08000881
 8000708:	080008c9 	.word	0x080008c9
 800070c:	08000911 	.word	0x08000911
 8000710:	08000959 	.word	0x08000959
 8000714:	080009a1 	.word	0x080009a1
  	{
  	case 0 :
  		HAL_GPIO_WritePin(chan1a_GPIO_Port,chan1a_Pin, RESET);
 8000718:	2200      	movs	r2, #0
 800071a:	2101      	movs	r1, #1
 800071c:	48b5      	ldr	r0, [pc, #724]	; (80009f4 <display7SEGa+0x31c>)
 800071e:	f001 fd7e 	bl	800221e <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(chan1b_GPIO_Port,chan1b_Pin, RESET);
 8000722:	2200      	movs	r2, #0
 8000724:	2102      	movs	r1, #2
 8000726:	48b3      	ldr	r0, [pc, #716]	; (80009f4 <display7SEGa+0x31c>)
 8000728:	f001 fd79 	bl	800221e <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(chan1c_GPIO_Port,chan1c_Pin, RESET);
 800072c:	2200      	movs	r2, #0
 800072e:	2104      	movs	r1, #4
 8000730:	48b0      	ldr	r0, [pc, #704]	; (80009f4 <display7SEGa+0x31c>)
 8000732:	f001 fd74 	bl	800221e <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(chan1d_GPIO_Port,chan1d_Pin, RESET);
 8000736:	2200      	movs	r2, #0
 8000738:	2108      	movs	r1, #8
 800073a:	48ae      	ldr	r0, [pc, #696]	; (80009f4 <display7SEGa+0x31c>)
 800073c:	f001 fd6f 	bl	800221e <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(chan1e_GPIO_Port,chan1e_Pin, RESET);
 8000740:	2200      	movs	r2, #0
 8000742:	2110      	movs	r1, #16
 8000744:	48ab      	ldr	r0, [pc, #684]	; (80009f4 <display7SEGa+0x31c>)
 8000746:	f001 fd6a 	bl	800221e <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(chan1f_GPIO_Port,chan1f_Pin, RESET);
 800074a:	2200      	movs	r2, #0
 800074c:	2120      	movs	r1, #32
 800074e:	48a9      	ldr	r0, [pc, #676]	; (80009f4 <display7SEGa+0x31c>)
 8000750:	f001 fd65 	bl	800221e <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(chan1g_GPIO_Port,chan1g_Pin, SET);
 8000754:	2201      	movs	r2, #1
 8000756:	2140      	movs	r1, #64	; 0x40
 8000758:	48a6      	ldr	r0, [pc, #664]	; (80009f4 <display7SEGa+0x31c>)
 800075a:	f001 fd60 	bl	800221e <HAL_GPIO_WritePin>
  	    break ;
 800075e:	e144      	b.n	80009ea <display7SEGa+0x312>
  	case 1 :
  		HAL_GPIO_WritePin(chan1a_GPIO_Port,chan1a_Pin, SET);
 8000760:	2201      	movs	r2, #1
 8000762:	2101      	movs	r1, #1
 8000764:	48a3      	ldr	r0, [pc, #652]	; (80009f4 <display7SEGa+0x31c>)
 8000766:	f001 fd5a 	bl	800221e <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(chan1b_GPIO_Port,chan1b_Pin, RESET);
 800076a:	2200      	movs	r2, #0
 800076c:	2102      	movs	r1, #2
 800076e:	48a1      	ldr	r0, [pc, #644]	; (80009f4 <display7SEGa+0x31c>)
 8000770:	f001 fd55 	bl	800221e <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(chan1c_GPIO_Port,chan1c_Pin, RESET);
 8000774:	2200      	movs	r2, #0
 8000776:	2104      	movs	r1, #4
 8000778:	489e      	ldr	r0, [pc, #632]	; (80009f4 <display7SEGa+0x31c>)
 800077a:	f001 fd50 	bl	800221e <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(chan1d_GPIO_Port,chan1d_Pin, SET);
 800077e:	2201      	movs	r2, #1
 8000780:	2108      	movs	r1, #8
 8000782:	489c      	ldr	r0, [pc, #624]	; (80009f4 <display7SEGa+0x31c>)
 8000784:	f001 fd4b 	bl	800221e <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(chan1e_GPIO_Port,chan1e_Pin, SET);
 8000788:	2201      	movs	r2, #1
 800078a:	2110      	movs	r1, #16
 800078c:	4899      	ldr	r0, [pc, #612]	; (80009f4 <display7SEGa+0x31c>)
 800078e:	f001 fd46 	bl	800221e <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(chan1f_GPIO_Port,chan1f_Pin, SET);
 8000792:	2201      	movs	r2, #1
 8000794:	2120      	movs	r1, #32
 8000796:	4897      	ldr	r0, [pc, #604]	; (80009f4 <display7SEGa+0x31c>)
 8000798:	f001 fd41 	bl	800221e <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(chan1g_GPIO_Port,chan1g_Pin, SET);
 800079c:	2201      	movs	r2, #1
 800079e:	2140      	movs	r1, #64	; 0x40
 80007a0:	4894      	ldr	r0, [pc, #592]	; (80009f4 <display7SEGa+0x31c>)
 80007a2:	f001 fd3c 	bl	800221e <HAL_GPIO_WritePin>
  	    break;
 80007a6:	e120      	b.n	80009ea <display7SEGa+0x312>
  	case 2 :
  		HAL_GPIO_WritePin(chan1a_GPIO_Port,chan1a_Pin, RESET);
 80007a8:	2200      	movs	r2, #0
 80007aa:	2101      	movs	r1, #1
 80007ac:	4891      	ldr	r0, [pc, #580]	; (80009f4 <display7SEGa+0x31c>)
 80007ae:	f001 fd36 	bl	800221e <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(chan1b_GPIO_Port,chan1b_Pin, RESET);
 80007b2:	2200      	movs	r2, #0
 80007b4:	2102      	movs	r1, #2
 80007b6:	488f      	ldr	r0, [pc, #572]	; (80009f4 <display7SEGa+0x31c>)
 80007b8:	f001 fd31 	bl	800221e <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(chan1c_GPIO_Port,chan1c_Pin, SET);
 80007bc:	2201      	movs	r2, #1
 80007be:	2104      	movs	r1, #4
 80007c0:	488c      	ldr	r0, [pc, #560]	; (80009f4 <display7SEGa+0x31c>)
 80007c2:	f001 fd2c 	bl	800221e <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(chan1d_GPIO_Port,chan1d_Pin, RESET);
 80007c6:	2200      	movs	r2, #0
 80007c8:	2108      	movs	r1, #8
 80007ca:	488a      	ldr	r0, [pc, #552]	; (80009f4 <display7SEGa+0x31c>)
 80007cc:	f001 fd27 	bl	800221e <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(chan1e_GPIO_Port,chan1e_Pin, RESET);
 80007d0:	2200      	movs	r2, #0
 80007d2:	2110      	movs	r1, #16
 80007d4:	4887      	ldr	r0, [pc, #540]	; (80009f4 <display7SEGa+0x31c>)
 80007d6:	f001 fd22 	bl	800221e <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(chan1f_GPIO_Port,chan1f_Pin, SET);
 80007da:	2201      	movs	r2, #1
 80007dc:	2120      	movs	r1, #32
 80007de:	4885      	ldr	r0, [pc, #532]	; (80009f4 <display7SEGa+0x31c>)
 80007e0:	f001 fd1d 	bl	800221e <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(chan1g_GPIO_Port,chan1g_Pin, RESET);
 80007e4:	2200      	movs	r2, #0
 80007e6:	2140      	movs	r1, #64	; 0x40
 80007e8:	4882      	ldr	r0, [pc, #520]	; (80009f4 <display7SEGa+0x31c>)
 80007ea:	f001 fd18 	bl	800221e <HAL_GPIO_WritePin>
  	    break ;
 80007ee:	e0fc      	b.n	80009ea <display7SEGa+0x312>
  	case 3 :
  		HAL_GPIO_WritePin(chan1a_GPIO_Port,chan1a_Pin, RESET);
 80007f0:	2200      	movs	r2, #0
 80007f2:	2101      	movs	r1, #1
 80007f4:	487f      	ldr	r0, [pc, #508]	; (80009f4 <display7SEGa+0x31c>)
 80007f6:	f001 fd12 	bl	800221e <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(chan1b_GPIO_Port,chan1b_Pin, RESET);
 80007fa:	2200      	movs	r2, #0
 80007fc:	2102      	movs	r1, #2
 80007fe:	487d      	ldr	r0, [pc, #500]	; (80009f4 <display7SEGa+0x31c>)
 8000800:	f001 fd0d 	bl	800221e <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(chan1c_GPIO_Port,chan1c_Pin, RESET);
 8000804:	2200      	movs	r2, #0
 8000806:	2104      	movs	r1, #4
 8000808:	487a      	ldr	r0, [pc, #488]	; (80009f4 <display7SEGa+0x31c>)
 800080a:	f001 fd08 	bl	800221e <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(chan1d_GPIO_Port,chan1d_Pin, RESET);
 800080e:	2200      	movs	r2, #0
 8000810:	2108      	movs	r1, #8
 8000812:	4878      	ldr	r0, [pc, #480]	; (80009f4 <display7SEGa+0x31c>)
 8000814:	f001 fd03 	bl	800221e <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(chan1e_GPIO_Port,chan1e_Pin, SET);
 8000818:	2201      	movs	r2, #1
 800081a:	2110      	movs	r1, #16
 800081c:	4875      	ldr	r0, [pc, #468]	; (80009f4 <display7SEGa+0x31c>)
 800081e:	f001 fcfe 	bl	800221e <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(chan1f_GPIO_Port,chan1f_Pin, SET);
 8000822:	2201      	movs	r2, #1
 8000824:	2120      	movs	r1, #32
 8000826:	4873      	ldr	r0, [pc, #460]	; (80009f4 <display7SEGa+0x31c>)
 8000828:	f001 fcf9 	bl	800221e <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(chan1g_GPIO_Port,chan1g_Pin, RESET);
 800082c:	2200      	movs	r2, #0
 800082e:	2140      	movs	r1, #64	; 0x40
 8000830:	4870      	ldr	r0, [pc, #448]	; (80009f4 <display7SEGa+0x31c>)
 8000832:	f001 fcf4 	bl	800221e <HAL_GPIO_WritePin>
  	    break ;
 8000836:	e0d8      	b.n	80009ea <display7SEGa+0x312>
  	case 4 :
  		HAL_GPIO_WritePin(chan1a_GPIO_Port,chan1a_Pin, SET);
 8000838:	2201      	movs	r2, #1
 800083a:	2101      	movs	r1, #1
 800083c:	486d      	ldr	r0, [pc, #436]	; (80009f4 <display7SEGa+0x31c>)
 800083e:	f001 fcee 	bl	800221e <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(chan1b_GPIO_Port,chan1b_Pin, RESET);
 8000842:	2200      	movs	r2, #0
 8000844:	2102      	movs	r1, #2
 8000846:	486b      	ldr	r0, [pc, #428]	; (80009f4 <display7SEGa+0x31c>)
 8000848:	f001 fce9 	bl	800221e <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(chan1c_GPIO_Port,chan1c_Pin, RESET);
 800084c:	2200      	movs	r2, #0
 800084e:	2104      	movs	r1, #4
 8000850:	4868      	ldr	r0, [pc, #416]	; (80009f4 <display7SEGa+0x31c>)
 8000852:	f001 fce4 	bl	800221e <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(chan1d_GPIO_Port,chan1d_Pin, SET);
 8000856:	2201      	movs	r2, #1
 8000858:	2108      	movs	r1, #8
 800085a:	4866      	ldr	r0, [pc, #408]	; (80009f4 <display7SEGa+0x31c>)
 800085c:	f001 fcdf 	bl	800221e <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(chan1e_GPIO_Port,chan1e_Pin, SET);
 8000860:	2201      	movs	r2, #1
 8000862:	2110      	movs	r1, #16
 8000864:	4863      	ldr	r0, [pc, #396]	; (80009f4 <display7SEGa+0x31c>)
 8000866:	f001 fcda 	bl	800221e <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(chan1f_GPIO_Port,chan1f_Pin, RESET);
 800086a:	2200      	movs	r2, #0
 800086c:	2120      	movs	r1, #32
 800086e:	4861      	ldr	r0, [pc, #388]	; (80009f4 <display7SEGa+0x31c>)
 8000870:	f001 fcd5 	bl	800221e <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(chan1g_GPIO_Port,chan1g_Pin, RESET);
 8000874:	2200      	movs	r2, #0
 8000876:	2140      	movs	r1, #64	; 0x40
 8000878:	485e      	ldr	r0, [pc, #376]	; (80009f4 <display7SEGa+0x31c>)
 800087a:	f001 fcd0 	bl	800221e <HAL_GPIO_WritePin>
  		break ;
 800087e:	e0b4      	b.n	80009ea <display7SEGa+0x312>
  	case 5 :
  		HAL_GPIO_WritePin(chan1a_GPIO_Port,chan1a_Pin, RESET);
 8000880:	2200      	movs	r2, #0
 8000882:	2101      	movs	r1, #1
 8000884:	485b      	ldr	r0, [pc, #364]	; (80009f4 <display7SEGa+0x31c>)
 8000886:	f001 fcca 	bl	800221e <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(chan1b_GPIO_Port,chan1b_Pin, SET);
 800088a:	2201      	movs	r2, #1
 800088c:	2102      	movs	r1, #2
 800088e:	4859      	ldr	r0, [pc, #356]	; (80009f4 <display7SEGa+0x31c>)
 8000890:	f001 fcc5 	bl	800221e <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(chan1c_GPIO_Port,chan1c_Pin, RESET);
 8000894:	2200      	movs	r2, #0
 8000896:	2104      	movs	r1, #4
 8000898:	4856      	ldr	r0, [pc, #344]	; (80009f4 <display7SEGa+0x31c>)
 800089a:	f001 fcc0 	bl	800221e <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(chan1d_GPIO_Port,chan1d_Pin, RESET);
 800089e:	2200      	movs	r2, #0
 80008a0:	2108      	movs	r1, #8
 80008a2:	4854      	ldr	r0, [pc, #336]	; (80009f4 <display7SEGa+0x31c>)
 80008a4:	f001 fcbb 	bl	800221e <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(chan1e_GPIO_Port,chan1e_Pin, SET);
 80008a8:	2201      	movs	r2, #1
 80008aa:	2110      	movs	r1, #16
 80008ac:	4851      	ldr	r0, [pc, #324]	; (80009f4 <display7SEGa+0x31c>)
 80008ae:	f001 fcb6 	bl	800221e <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(chan1f_GPIO_Port,chan1f_Pin, RESET);
 80008b2:	2200      	movs	r2, #0
 80008b4:	2120      	movs	r1, #32
 80008b6:	484f      	ldr	r0, [pc, #316]	; (80009f4 <display7SEGa+0x31c>)
 80008b8:	f001 fcb1 	bl	800221e <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(chan1g_GPIO_Port,chan1g_Pin, RESET);
 80008bc:	2200      	movs	r2, #0
 80008be:	2140      	movs	r1, #64	; 0x40
 80008c0:	484c      	ldr	r0, [pc, #304]	; (80009f4 <display7SEGa+0x31c>)
 80008c2:	f001 fcac 	bl	800221e <HAL_GPIO_WritePin>
  		break ;
 80008c6:	e090      	b.n	80009ea <display7SEGa+0x312>
  	case 6 :
  	  	HAL_GPIO_WritePin(chan1a_GPIO_Port,chan1a_Pin, RESET);
 80008c8:	2200      	movs	r2, #0
 80008ca:	2101      	movs	r1, #1
 80008cc:	4849      	ldr	r0, [pc, #292]	; (80009f4 <display7SEGa+0x31c>)
 80008ce:	f001 fca6 	bl	800221e <HAL_GPIO_WritePin>
  	  	HAL_GPIO_WritePin(chan1b_GPIO_Port,chan1b_Pin, SET);
 80008d2:	2201      	movs	r2, #1
 80008d4:	2102      	movs	r1, #2
 80008d6:	4847      	ldr	r0, [pc, #284]	; (80009f4 <display7SEGa+0x31c>)
 80008d8:	f001 fca1 	bl	800221e <HAL_GPIO_WritePin>
  	  	HAL_GPIO_WritePin(chan1c_GPIO_Port,chan1c_Pin, RESET);
 80008dc:	2200      	movs	r2, #0
 80008de:	2104      	movs	r1, #4
 80008e0:	4844      	ldr	r0, [pc, #272]	; (80009f4 <display7SEGa+0x31c>)
 80008e2:	f001 fc9c 	bl	800221e <HAL_GPIO_WritePin>
  	  	HAL_GPIO_WritePin(chan1d_GPIO_Port,chan1d_Pin, RESET);
 80008e6:	2200      	movs	r2, #0
 80008e8:	2108      	movs	r1, #8
 80008ea:	4842      	ldr	r0, [pc, #264]	; (80009f4 <display7SEGa+0x31c>)
 80008ec:	f001 fc97 	bl	800221e <HAL_GPIO_WritePin>
  	  	HAL_GPIO_WritePin(chan1e_GPIO_Port,chan1e_Pin, RESET);
 80008f0:	2200      	movs	r2, #0
 80008f2:	2110      	movs	r1, #16
 80008f4:	483f      	ldr	r0, [pc, #252]	; (80009f4 <display7SEGa+0x31c>)
 80008f6:	f001 fc92 	bl	800221e <HAL_GPIO_WritePin>
  	  	HAL_GPIO_WritePin(chan1f_GPIO_Port,chan1f_Pin, RESET);
 80008fa:	2200      	movs	r2, #0
 80008fc:	2120      	movs	r1, #32
 80008fe:	483d      	ldr	r0, [pc, #244]	; (80009f4 <display7SEGa+0x31c>)
 8000900:	f001 fc8d 	bl	800221e <HAL_GPIO_WritePin>
  	  	HAL_GPIO_WritePin(chan1g_GPIO_Port,chan1g_Pin, RESET);
 8000904:	2200      	movs	r2, #0
 8000906:	2140      	movs	r1, #64	; 0x40
 8000908:	483a      	ldr	r0, [pc, #232]	; (80009f4 <display7SEGa+0x31c>)
 800090a:	f001 fc88 	bl	800221e <HAL_GPIO_WritePin>
  	  	break ;
 800090e:	e06c      	b.n	80009ea <display7SEGa+0x312>
  	case 7 :
  	  	HAL_GPIO_WritePin(chan1a_GPIO_Port,chan1a_Pin, RESET);
 8000910:	2200      	movs	r2, #0
 8000912:	2101      	movs	r1, #1
 8000914:	4837      	ldr	r0, [pc, #220]	; (80009f4 <display7SEGa+0x31c>)
 8000916:	f001 fc82 	bl	800221e <HAL_GPIO_WritePin>
  	  	HAL_GPIO_WritePin(chan1b_GPIO_Port,chan1b_Pin, RESET);
 800091a:	2200      	movs	r2, #0
 800091c:	2102      	movs	r1, #2
 800091e:	4835      	ldr	r0, [pc, #212]	; (80009f4 <display7SEGa+0x31c>)
 8000920:	f001 fc7d 	bl	800221e <HAL_GPIO_WritePin>
  	  	HAL_GPIO_WritePin(chan1c_GPIO_Port,chan1c_Pin, RESET);
 8000924:	2200      	movs	r2, #0
 8000926:	2104      	movs	r1, #4
 8000928:	4832      	ldr	r0, [pc, #200]	; (80009f4 <display7SEGa+0x31c>)
 800092a:	f001 fc78 	bl	800221e <HAL_GPIO_WritePin>
  	  	HAL_GPIO_WritePin(chan1d_GPIO_Port,chan1d_Pin, SET);
 800092e:	2201      	movs	r2, #1
 8000930:	2108      	movs	r1, #8
 8000932:	4830      	ldr	r0, [pc, #192]	; (80009f4 <display7SEGa+0x31c>)
 8000934:	f001 fc73 	bl	800221e <HAL_GPIO_WritePin>
  	  	HAL_GPIO_WritePin(chan1e_GPIO_Port,chan1e_Pin, SET);
 8000938:	2201      	movs	r2, #1
 800093a:	2110      	movs	r1, #16
 800093c:	482d      	ldr	r0, [pc, #180]	; (80009f4 <display7SEGa+0x31c>)
 800093e:	f001 fc6e 	bl	800221e <HAL_GPIO_WritePin>
  	  	HAL_GPIO_WritePin(chan1f_GPIO_Port,chan1f_Pin, SET);
 8000942:	2201      	movs	r2, #1
 8000944:	2120      	movs	r1, #32
 8000946:	482b      	ldr	r0, [pc, #172]	; (80009f4 <display7SEGa+0x31c>)
 8000948:	f001 fc69 	bl	800221e <HAL_GPIO_WritePin>
  	  	HAL_GPIO_WritePin(chan1g_GPIO_Port,chan1g_Pin, SET);
 800094c:	2201      	movs	r2, #1
 800094e:	2140      	movs	r1, #64	; 0x40
 8000950:	4828      	ldr	r0, [pc, #160]	; (80009f4 <display7SEGa+0x31c>)
 8000952:	f001 fc64 	bl	800221e <HAL_GPIO_WritePin>
  	  	break ;
 8000956:	e048      	b.n	80009ea <display7SEGa+0x312>
  	case 8 :
  	  	HAL_GPIO_WritePin(chan1a_GPIO_Port,chan1a_Pin, RESET);
 8000958:	2200      	movs	r2, #0
 800095a:	2101      	movs	r1, #1
 800095c:	4825      	ldr	r0, [pc, #148]	; (80009f4 <display7SEGa+0x31c>)
 800095e:	f001 fc5e 	bl	800221e <HAL_GPIO_WritePin>
  	  	HAL_GPIO_WritePin(chan1b_GPIO_Port,chan1b_Pin, RESET);
 8000962:	2200      	movs	r2, #0
 8000964:	2102      	movs	r1, #2
 8000966:	4823      	ldr	r0, [pc, #140]	; (80009f4 <display7SEGa+0x31c>)
 8000968:	f001 fc59 	bl	800221e <HAL_GPIO_WritePin>
  	  	HAL_GPIO_WritePin(chan1c_GPIO_Port,chan1c_Pin, RESET);
 800096c:	2200      	movs	r2, #0
 800096e:	2104      	movs	r1, #4
 8000970:	4820      	ldr	r0, [pc, #128]	; (80009f4 <display7SEGa+0x31c>)
 8000972:	f001 fc54 	bl	800221e <HAL_GPIO_WritePin>
  	  	HAL_GPIO_WritePin(chan1d_GPIO_Port,chan1d_Pin, RESET);
 8000976:	2200      	movs	r2, #0
 8000978:	2108      	movs	r1, #8
 800097a:	481e      	ldr	r0, [pc, #120]	; (80009f4 <display7SEGa+0x31c>)
 800097c:	f001 fc4f 	bl	800221e <HAL_GPIO_WritePin>
  	  	HAL_GPIO_WritePin(chan1e_GPIO_Port,chan1e_Pin, RESET);
 8000980:	2200      	movs	r2, #0
 8000982:	2110      	movs	r1, #16
 8000984:	481b      	ldr	r0, [pc, #108]	; (80009f4 <display7SEGa+0x31c>)
 8000986:	f001 fc4a 	bl	800221e <HAL_GPIO_WritePin>
  	  	HAL_GPIO_WritePin(chan1f_GPIO_Port,chan1f_Pin, RESET);
 800098a:	2200      	movs	r2, #0
 800098c:	2120      	movs	r1, #32
 800098e:	4819      	ldr	r0, [pc, #100]	; (80009f4 <display7SEGa+0x31c>)
 8000990:	f001 fc45 	bl	800221e <HAL_GPIO_WritePin>
  	  	HAL_GPIO_WritePin(chan1g_GPIO_Port,chan1g_Pin, RESET);
 8000994:	2200      	movs	r2, #0
 8000996:	2140      	movs	r1, #64	; 0x40
 8000998:	4816      	ldr	r0, [pc, #88]	; (80009f4 <display7SEGa+0x31c>)
 800099a:	f001 fc40 	bl	800221e <HAL_GPIO_WritePin>
  	  	break ;
 800099e:	e024      	b.n	80009ea <display7SEGa+0x312>
  	case 9 :
  	  	HAL_GPIO_WritePin(chan1a_GPIO_Port,chan1a_Pin, RESET);
 80009a0:	2200      	movs	r2, #0
 80009a2:	2101      	movs	r1, #1
 80009a4:	4813      	ldr	r0, [pc, #76]	; (80009f4 <display7SEGa+0x31c>)
 80009a6:	f001 fc3a 	bl	800221e <HAL_GPIO_WritePin>
  	  	HAL_GPIO_WritePin(chan1b_GPIO_Port,chan1b_Pin, RESET);
 80009aa:	2200      	movs	r2, #0
 80009ac:	2102      	movs	r1, #2
 80009ae:	4811      	ldr	r0, [pc, #68]	; (80009f4 <display7SEGa+0x31c>)
 80009b0:	f001 fc35 	bl	800221e <HAL_GPIO_WritePin>
  	  	HAL_GPIO_WritePin(chan1c_GPIO_Port,chan1c_Pin, RESET);
 80009b4:	2200      	movs	r2, #0
 80009b6:	2104      	movs	r1, #4
 80009b8:	480e      	ldr	r0, [pc, #56]	; (80009f4 <display7SEGa+0x31c>)
 80009ba:	f001 fc30 	bl	800221e <HAL_GPIO_WritePin>
  	  	HAL_GPIO_WritePin(chan1d_GPIO_Port,chan1d_Pin, RESET);
 80009be:	2200      	movs	r2, #0
 80009c0:	2108      	movs	r1, #8
 80009c2:	480c      	ldr	r0, [pc, #48]	; (80009f4 <display7SEGa+0x31c>)
 80009c4:	f001 fc2b 	bl	800221e <HAL_GPIO_WritePin>
  	  	HAL_GPIO_WritePin(chan1e_GPIO_Port,chan1e_Pin, SET);
 80009c8:	2201      	movs	r2, #1
 80009ca:	2110      	movs	r1, #16
 80009cc:	4809      	ldr	r0, [pc, #36]	; (80009f4 <display7SEGa+0x31c>)
 80009ce:	f001 fc26 	bl	800221e <HAL_GPIO_WritePin>
  	  	HAL_GPIO_WritePin(chan1f_GPIO_Port,chan1f_Pin, RESET);
 80009d2:	2200      	movs	r2, #0
 80009d4:	2120      	movs	r1, #32
 80009d6:	4807      	ldr	r0, [pc, #28]	; (80009f4 <display7SEGa+0x31c>)
 80009d8:	f001 fc21 	bl	800221e <HAL_GPIO_WritePin>
  	  	HAL_GPIO_WritePin(chan1g_GPIO_Port,chan1g_Pin, RESET);
 80009dc:	2200      	movs	r2, #0
 80009de:	2140      	movs	r1, #64	; 0x40
 80009e0:	4804      	ldr	r0, [pc, #16]	; (80009f4 <display7SEGa+0x31c>)
 80009e2:	f001 fc1c 	bl	800221e <HAL_GPIO_WritePin>
  	  	break ;
 80009e6:	e000      	b.n	80009ea <display7SEGa+0x312>
  	default : break;
 80009e8:	bf00      	nop
  	}
  }
 80009ea:	bf00      	nop
 80009ec:	3708      	adds	r7, #8
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	bf00      	nop
 80009f4:	40010c00 	.word	0x40010c00

080009f8 <update7SEGb>:
 */

#include "display2.h"

 void update7SEGb ( int index )
  {
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b082      	sub	sp, #8
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
    switch ( index )
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d003      	beq.n	8000a0e <update7SEGb+0x16>
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	2b01      	cmp	r3, #1
 8000a0a:	d00d      	beq.n	8000a28 <update7SEGb+0x30>
        break ;
    case 1:
	    HAL_GPIO_WritePin(en2_GPIO_Port,en2_Pin, SET);
	    HAL_GPIO_WritePin(en3_GPIO_Port,en3_Pin, RESET);
        break ;
    default : break ;
 8000a0c:	e019      	b.n	8000a42 <update7SEGb+0x4a>
	    HAL_GPIO_WritePin(en2_GPIO_Port,en2_Pin, RESET);
 8000a0e:	2200      	movs	r2, #0
 8000a10:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a14:	480d      	ldr	r0, [pc, #52]	; (8000a4c <update7SEGb+0x54>)
 8000a16:	f001 fc02 	bl	800221e <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(en3_GPIO_Port,en3_Pin, SET);
 8000a1a:	2201      	movs	r2, #1
 8000a1c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a20:	480a      	ldr	r0, [pc, #40]	; (8000a4c <update7SEGb+0x54>)
 8000a22:	f001 fbfc 	bl	800221e <HAL_GPIO_WritePin>
        break ;
 8000a26:	e00c      	b.n	8000a42 <update7SEGb+0x4a>
	    HAL_GPIO_WritePin(en2_GPIO_Port,en2_Pin, SET);
 8000a28:	2201      	movs	r2, #1
 8000a2a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a2e:	4807      	ldr	r0, [pc, #28]	; (8000a4c <update7SEGb+0x54>)
 8000a30:	f001 fbf5 	bl	800221e <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(en3_GPIO_Port,en3_Pin, RESET);
 8000a34:	2200      	movs	r2, #0
 8000a36:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a3a:	4804      	ldr	r0, [pc, #16]	; (8000a4c <update7SEGb+0x54>)
 8000a3c:	f001 fbef 	bl	800221e <HAL_GPIO_WritePin>
        break ;
 8000a40:	bf00      	nop
    }
  }
 8000a42:	bf00      	nop
 8000a44:	3708      	adds	r7, #8
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	40010800 	.word	0x40010800

08000a50 <display7SEGb>:


void display7SEGb(int index)
   {
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b082      	sub	sp, #8
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
   	switch (index)
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	2b09      	cmp	r3, #9
 8000a5c:	f200 81bc 	bhi.w	8000dd8 <display7SEGb+0x388>
 8000a60:	a201      	add	r2, pc, #4	; (adr r2, 8000a68 <display7SEGb+0x18>)
 8000a62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a66:	bf00      	nop
 8000a68:	08000a91 	.word	0x08000a91
 8000a6c:	08000ae5 	.word	0x08000ae5
 8000a70:	08000b39 	.word	0x08000b39
 8000a74:	08000b8d 	.word	0x08000b8d
 8000a78:	08000be1 	.word	0x08000be1
 8000a7c:	08000c35 	.word	0x08000c35
 8000a80:	08000c89 	.word	0x08000c89
 8000a84:	08000cdd 	.word	0x08000cdd
 8000a88:	08000d31 	.word	0x08000d31
 8000a8c:	08000d85 	.word	0x08000d85
   	{
   	case 0 :
   		HAL_GPIO_WritePin(chan2a_GPIO_Port,chan2a_Pin, RESET);
 8000a90:	2200      	movs	r2, #0
 8000a92:	2180      	movs	r1, #128	; 0x80
 8000a94:	48d3      	ldr	r0, [pc, #844]	; (8000de4 <display7SEGb+0x394>)
 8000a96:	f001 fbc2 	bl	800221e <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(chan2b_GPIO_Port,chan2b_Pin, RESET);
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000aa0:	48d0      	ldr	r0, [pc, #832]	; (8000de4 <display7SEGb+0x394>)
 8000aa2:	f001 fbbc 	bl	800221e <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(chan2c_GPIO_Port,chan2c_Pin, RESET);
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000aac:	48cd      	ldr	r0, [pc, #820]	; (8000de4 <display7SEGb+0x394>)
 8000aae:	f001 fbb6 	bl	800221e <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(chan2d_GPIO_Port,chan2d_Pin, RESET);
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ab8:	48ca      	ldr	r0, [pc, #808]	; (8000de4 <display7SEGb+0x394>)
 8000aba:	f001 fbb0 	bl	800221e <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(chan2e_GPIO_Port,chan2e_Pin, RESET);
 8000abe:	2200      	movs	r2, #0
 8000ac0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ac4:	48c7      	ldr	r0, [pc, #796]	; (8000de4 <display7SEGb+0x394>)
 8000ac6:	f001 fbaa 	bl	800221e <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(chan2f_GPIO_Port,chan2f_Pin, RESET);
 8000aca:	2200      	movs	r2, #0
 8000acc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ad0:	48c4      	ldr	r0, [pc, #784]	; (8000de4 <display7SEGb+0x394>)
 8000ad2:	f001 fba4 	bl	800221e <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(chan2g_GPIO_Port,chan2g_Pin, SET);
 8000ad6:	2201      	movs	r2, #1
 8000ad8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000adc:	48c1      	ldr	r0, [pc, #772]	; (8000de4 <display7SEGb+0x394>)
 8000ade:	f001 fb9e 	bl	800221e <HAL_GPIO_WritePin>
   	    break ;
 8000ae2:	e17a      	b.n	8000dda <display7SEGb+0x38a>
   	case 1 :
   		HAL_GPIO_WritePin(chan2a_GPIO_Port,chan2a_Pin, SET);
 8000ae4:	2201      	movs	r2, #1
 8000ae6:	2180      	movs	r1, #128	; 0x80
 8000ae8:	48be      	ldr	r0, [pc, #760]	; (8000de4 <display7SEGb+0x394>)
 8000aea:	f001 fb98 	bl	800221e <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(chan2b_GPIO_Port,chan2b_Pin, RESET);
 8000aee:	2200      	movs	r2, #0
 8000af0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000af4:	48bb      	ldr	r0, [pc, #748]	; (8000de4 <display7SEGb+0x394>)
 8000af6:	f001 fb92 	bl	800221e <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(chan2c_GPIO_Port,chan2c_Pin, RESET);
 8000afa:	2200      	movs	r2, #0
 8000afc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b00:	48b8      	ldr	r0, [pc, #736]	; (8000de4 <display7SEGb+0x394>)
 8000b02:	f001 fb8c 	bl	800221e <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(chan2d_GPIO_Port,chan2d_Pin, SET);
 8000b06:	2201      	movs	r2, #1
 8000b08:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b0c:	48b5      	ldr	r0, [pc, #724]	; (8000de4 <display7SEGb+0x394>)
 8000b0e:	f001 fb86 	bl	800221e <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(chan2e_GPIO_Port,chan2e_Pin, SET);
 8000b12:	2201      	movs	r2, #1
 8000b14:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b18:	48b2      	ldr	r0, [pc, #712]	; (8000de4 <display7SEGb+0x394>)
 8000b1a:	f001 fb80 	bl	800221e <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(chan2f_GPIO_Port,chan2f_Pin, SET);
 8000b1e:	2201      	movs	r2, #1
 8000b20:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b24:	48af      	ldr	r0, [pc, #700]	; (8000de4 <display7SEGb+0x394>)
 8000b26:	f001 fb7a 	bl	800221e <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(chan2g_GPIO_Port,chan2g_Pin, SET);
 8000b2a:	2201      	movs	r2, #1
 8000b2c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b30:	48ac      	ldr	r0, [pc, #688]	; (8000de4 <display7SEGb+0x394>)
 8000b32:	f001 fb74 	bl	800221e <HAL_GPIO_WritePin>
   	    break;
 8000b36:	e150      	b.n	8000dda <display7SEGb+0x38a>
   	case 2 :
   		HAL_GPIO_WritePin(chan2a_GPIO_Port,chan2a_Pin, RESET);
 8000b38:	2200      	movs	r2, #0
 8000b3a:	2180      	movs	r1, #128	; 0x80
 8000b3c:	48a9      	ldr	r0, [pc, #676]	; (8000de4 <display7SEGb+0x394>)
 8000b3e:	f001 fb6e 	bl	800221e <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(chan2b_GPIO_Port,chan2b_Pin, RESET);
 8000b42:	2200      	movs	r2, #0
 8000b44:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b48:	48a6      	ldr	r0, [pc, #664]	; (8000de4 <display7SEGb+0x394>)
 8000b4a:	f001 fb68 	bl	800221e <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(chan2c_GPIO_Port,chan2c_Pin, SET);
 8000b4e:	2201      	movs	r2, #1
 8000b50:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b54:	48a3      	ldr	r0, [pc, #652]	; (8000de4 <display7SEGb+0x394>)
 8000b56:	f001 fb62 	bl	800221e <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(chan2d_GPIO_Port,chan2d_Pin, RESET);
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b60:	48a0      	ldr	r0, [pc, #640]	; (8000de4 <display7SEGb+0x394>)
 8000b62:	f001 fb5c 	bl	800221e <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(chan2e_GPIO_Port,chan2e_Pin, RESET);
 8000b66:	2200      	movs	r2, #0
 8000b68:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b6c:	489d      	ldr	r0, [pc, #628]	; (8000de4 <display7SEGb+0x394>)
 8000b6e:	f001 fb56 	bl	800221e <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(chan2f_GPIO_Port,chan2f_Pin, SET);
 8000b72:	2201      	movs	r2, #1
 8000b74:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b78:	489a      	ldr	r0, [pc, #616]	; (8000de4 <display7SEGb+0x394>)
 8000b7a:	f001 fb50 	bl	800221e <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(chan2g_GPIO_Port,chan2g_Pin, RESET);
 8000b7e:	2200      	movs	r2, #0
 8000b80:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b84:	4897      	ldr	r0, [pc, #604]	; (8000de4 <display7SEGb+0x394>)
 8000b86:	f001 fb4a 	bl	800221e <HAL_GPIO_WritePin>
   	    break ;
 8000b8a:	e126      	b.n	8000dda <display7SEGb+0x38a>
   	case 3 :
   		HAL_GPIO_WritePin(chan2a_GPIO_Port,chan2a_Pin, RESET);
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	2180      	movs	r1, #128	; 0x80
 8000b90:	4894      	ldr	r0, [pc, #592]	; (8000de4 <display7SEGb+0x394>)
 8000b92:	f001 fb44 	bl	800221e <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(chan2b_GPIO_Port,chan2b_Pin, RESET);
 8000b96:	2200      	movs	r2, #0
 8000b98:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b9c:	4891      	ldr	r0, [pc, #580]	; (8000de4 <display7SEGb+0x394>)
 8000b9e:	f001 fb3e 	bl	800221e <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(chan2c_GPIO_Port,chan2c_Pin, RESET);
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ba8:	488e      	ldr	r0, [pc, #568]	; (8000de4 <display7SEGb+0x394>)
 8000baa:	f001 fb38 	bl	800221e <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(chan2d_GPIO_Port,chan2d_Pin, RESET);
 8000bae:	2200      	movs	r2, #0
 8000bb0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000bb4:	488b      	ldr	r0, [pc, #556]	; (8000de4 <display7SEGb+0x394>)
 8000bb6:	f001 fb32 	bl	800221e <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(chan2e_GPIO_Port,chan2e_Pin, SET);
 8000bba:	2201      	movs	r2, #1
 8000bbc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000bc0:	4888      	ldr	r0, [pc, #544]	; (8000de4 <display7SEGb+0x394>)
 8000bc2:	f001 fb2c 	bl	800221e <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(chan2f_GPIO_Port,chan2f_Pin, SET);
 8000bc6:	2201      	movs	r2, #1
 8000bc8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000bcc:	4885      	ldr	r0, [pc, #532]	; (8000de4 <display7SEGb+0x394>)
 8000bce:	f001 fb26 	bl	800221e <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(chan2g_GPIO_Port,chan2g_Pin, RESET);
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000bd8:	4882      	ldr	r0, [pc, #520]	; (8000de4 <display7SEGb+0x394>)
 8000bda:	f001 fb20 	bl	800221e <HAL_GPIO_WritePin>
   	    break ;
 8000bde:	e0fc      	b.n	8000dda <display7SEGb+0x38a>
   	case 4 :
   		HAL_GPIO_WritePin(chan2a_GPIO_Port,chan2a_Pin, SET);
 8000be0:	2201      	movs	r2, #1
 8000be2:	2180      	movs	r1, #128	; 0x80
 8000be4:	487f      	ldr	r0, [pc, #508]	; (8000de4 <display7SEGb+0x394>)
 8000be6:	f001 fb1a 	bl	800221e <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(chan2b_GPIO_Port,chan2b_Pin, RESET);
 8000bea:	2200      	movs	r2, #0
 8000bec:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000bf0:	487c      	ldr	r0, [pc, #496]	; (8000de4 <display7SEGb+0x394>)
 8000bf2:	f001 fb14 	bl	800221e <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(chan2c_GPIO_Port,chan2c_Pin, RESET);
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000bfc:	4879      	ldr	r0, [pc, #484]	; (8000de4 <display7SEGb+0x394>)
 8000bfe:	f001 fb0e 	bl	800221e <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(chan2d_GPIO_Port,chan2d_Pin, SET);
 8000c02:	2201      	movs	r2, #1
 8000c04:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c08:	4876      	ldr	r0, [pc, #472]	; (8000de4 <display7SEGb+0x394>)
 8000c0a:	f001 fb08 	bl	800221e <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(chan2e_GPIO_Port,chan2e_Pin, SET);
 8000c0e:	2201      	movs	r2, #1
 8000c10:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c14:	4873      	ldr	r0, [pc, #460]	; (8000de4 <display7SEGb+0x394>)
 8000c16:	f001 fb02 	bl	800221e <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(chan2f_GPIO_Port,chan2f_Pin, RESET);
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c20:	4870      	ldr	r0, [pc, #448]	; (8000de4 <display7SEGb+0x394>)
 8000c22:	f001 fafc 	bl	800221e <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(chan2g_GPIO_Port,chan2g_Pin, RESET);
 8000c26:	2200      	movs	r2, #0
 8000c28:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c2c:	486d      	ldr	r0, [pc, #436]	; (8000de4 <display7SEGb+0x394>)
 8000c2e:	f001 faf6 	bl	800221e <HAL_GPIO_WritePin>
   		break ;
 8000c32:	e0d2      	b.n	8000dda <display7SEGb+0x38a>
   	case 5 :
   		HAL_GPIO_WritePin(chan2a_GPIO_Port,chan2a_Pin, RESET);
 8000c34:	2200      	movs	r2, #0
 8000c36:	2180      	movs	r1, #128	; 0x80
 8000c38:	486a      	ldr	r0, [pc, #424]	; (8000de4 <display7SEGb+0x394>)
 8000c3a:	f001 faf0 	bl	800221e <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(chan2b_GPIO_Port,chan2b_Pin, SET);
 8000c3e:	2201      	movs	r2, #1
 8000c40:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c44:	4867      	ldr	r0, [pc, #412]	; (8000de4 <display7SEGb+0x394>)
 8000c46:	f001 faea 	bl	800221e <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(chan2c_GPIO_Port,chan2c_Pin, RESET);
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c50:	4864      	ldr	r0, [pc, #400]	; (8000de4 <display7SEGb+0x394>)
 8000c52:	f001 fae4 	bl	800221e <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(chan2d_GPIO_Port,chan2d_Pin, RESET);
 8000c56:	2200      	movs	r2, #0
 8000c58:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c5c:	4861      	ldr	r0, [pc, #388]	; (8000de4 <display7SEGb+0x394>)
 8000c5e:	f001 fade 	bl	800221e <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(chan2e_GPIO_Port,chan2e_Pin, SET);
 8000c62:	2201      	movs	r2, #1
 8000c64:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c68:	485e      	ldr	r0, [pc, #376]	; (8000de4 <display7SEGb+0x394>)
 8000c6a:	f001 fad8 	bl	800221e <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(chan2f_GPIO_Port,chan2f_Pin, RESET);
 8000c6e:	2200      	movs	r2, #0
 8000c70:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c74:	485b      	ldr	r0, [pc, #364]	; (8000de4 <display7SEGb+0x394>)
 8000c76:	f001 fad2 	bl	800221e <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(chan2g_GPIO_Port,chan2g_Pin, RESET);
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c80:	4858      	ldr	r0, [pc, #352]	; (8000de4 <display7SEGb+0x394>)
 8000c82:	f001 facc 	bl	800221e <HAL_GPIO_WritePin>
   		break ;
 8000c86:	e0a8      	b.n	8000dda <display7SEGb+0x38a>
   	case 6 :
   	   	HAL_GPIO_WritePin(chan2a_GPIO_Port,chan2a_Pin, RESET);
 8000c88:	2200      	movs	r2, #0
 8000c8a:	2180      	movs	r1, #128	; 0x80
 8000c8c:	4855      	ldr	r0, [pc, #340]	; (8000de4 <display7SEGb+0x394>)
 8000c8e:	f001 fac6 	bl	800221e <HAL_GPIO_WritePin>
   	   	HAL_GPIO_WritePin(chan2b_GPIO_Port,chan2b_Pin, SET);
 8000c92:	2201      	movs	r2, #1
 8000c94:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c98:	4852      	ldr	r0, [pc, #328]	; (8000de4 <display7SEGb+0x394>)
 8000c9a:	f001 fac0 	bl	800221e <HAL_GPIO_WritePin>
   	   	HAL_GPIO_WritePin(chan2c_GPIO_Port,chan2c_Pin, RESET);
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ca4:	484f      	ldr	r0, [pc, #316]	; (8000de4 <display7SEGb+0x394>)
 8000ca6:	f001 faba 	bl	800221e <HAL_GPIO_WritePin>
   	   	HAL_GPIO_WritePin(chan2d_GPIO_Port,chan2d_Pin, RESET);
 8000caa:	2200      	movs	r2, #0
 8000cac:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000cb0:	484c      	ldr	r0, [pc, #304]	; (8000de4 <display7SEGb+0x394>)
 8000cb2:	f001 fab4 	bl	800221e <HAL_GPIO_WritePin>
   	   	HAL_GPIO_WritePin(chan2e_GPIO_Port,chan2e_Pin, RESET);
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000cbc:	4849      	ldr	r0, [pc, #292]	; (8000de4 <display7SEGb+0x394>)
 8000cbe:	f001 faae 	bl	800221e <HAL_GPIO_WritePin>
   	   	HAL_GPIO_WritePin(chan2f_GPIO_Port,chan2f_Pin, RESET);
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000cc8:	4846      	ldr	r0, [pc, #280]	; (8000de4 <display7SEGb+0x394>)
 8000cca:	f001 faa8 	bl	800221e <HAL_GPIO_WritePin>
   	   	HAL_GPIO_WritePin(chan2g_GPIO_Port,chan2g_Pin, RESET);
 8000cce:	2200      	movs	r2, #0
 8000cd0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000cd4:	4843      	ldr	r0, [pc, #268]	; (8000de4 <display7SEGb+0x394>)
 8000cd6:	f001 faa2 	bl	800221e <HAL_GPIO_WritePin>
   	   	break;
 8000cda:	e07e      	b.n	8000dda <display7SEGb+0x38a>
   	case 7 :
   	   	HAL_GPIO_WritePin(chan2a_GPIO_Port,chan2a_Pin, RESET);
 8000cdc:	2200      	movs	r2, #0
 8000cde:	2180      	movs	r1, #128	; 0x80
 8000ce0:	4840      	ldr	r0, [pc, #256]	; (8000de4 <display7SEGb+0x394>)
 8000ce2:	f001 fa9c 	bl	800221e <HAL_GPIO_WritePin>
   	   	HAL_GPIO_WritePin(chan2b_GPIO_Port,chan2b_Pin, RESET);
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000cec:	483d      	ldr	r0, [pc, #244]	; (8000de4 <display7SEGb+0x394>)
 8000cee:	f001 fa96 	bl	800221e <HAL_GPIO_WritePin>
   	   	HAL_GPIO_WritePin(chan2c_GPIO_Port,chan2c_Pin, RESET);
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000cf8:	483a      	ldr	r0, [pc, #232]	; (8000de4 <display7SEGb+0x394>)
 8000cfa:	f001 fa90 	bl	800221e <HAL_GPIO_WritePin>
   	   	HAL_GPIO_WritePin(chan2d_GPIO_Port,chan2d_Pin, SET);
 8000cfe:	2201      	movs	r2, #1
 8000d00:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d04:	4837      	ldr	r0, [pc, #220]	; (8000de4 <display7SEGb+0x394>)
 8000d06:	f001 fa8a 	bl	800221e <HAL_GPIO_WritePin>
   	   	HAL_GPIO_WritePin(chan2e_GPIO_Port,chan2e_Pin, SET);
 8000d0a:	2201      	movs	r2, #1
 8000d0c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d10:	4834      	ldr	r0, [pc, #208]	; (8000de4 <display7SEGb+0x394>)
 8000d12:	f001 fa84 	bl	800221e <HAL_GPIO_WritePin>
   	   	HAL_GPIO_WritePin(chan2f_GPIO_Port,chan2f_Pin, SET);
 8000d16:	2201      	movs	r2, #1
 8000d18:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d1c:	4831      	ldr	r0, [pc, #196]	; (8000de4 <display7SEGb+0x394>)
 8000d1e:	f001 fa7e 	bl	800221e <HAL_GPIO_WritePin>
   	   	HAL_GPIO_WritePin(chan2g_GPIO_Port,chan2g_Pin, SET);
 8000d22:	2201      	movs	r2, #1
 8000d24:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d28:	482e      	ldr	r0, [pc, #184]	; (8000de4 <display7SEGb+0x394>)
 8000d2a:	f001 fa78 	bl	800221e <HAL_GPIO_WritePin>
   	   	break;
 8000d2e:	e054      	b.n	8000dda <display7SEGb+0x38a>
   	case 8 :
   	   	HAL_GPIO_WritePin(chan2a_GPIO_Port,chan2a_Pin, RESET);
 8000d30:	2200      	movs	r2, #0
 8000d32:	2180      	movs	r1, #128	; 0x80
 8000d34:	482b      	ldr	r0, [pc, #172]	; (8000de4 <display7SEGb+0x394>)
 8000d36:	f001 fa72 	bl	800221e <HAL_GPIO_WritePin>
   	   	HAL_GPIO_WritePin(chan2b_GPIO_Port,chan2b_Pin, RESET);
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d40:	4828      	ldr	r0, [pc, #160]	; (8000de4 <display7SEGb+0x394>)
 8000d42:	f001 fa6c 	bl	800221e <HAL_GPIO_WritePin>
   	   	HAL_GPIO_WritePin(chan2c_GPIO_Port,chan2c_Pin, RESET);
 8000d46:	2200      	movs	r2, #0
 8000d48:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d4c:	4825      	ldr	r0, [pc, #148]	; (8000de4 <display7SEGb+0x394>)
 8000d4e:	f001 fa66 	bl	800221e <HAL_GPIO_WritePin>
   	   	HAL_GPIO_WritePin(chan2d_GPIO_Port,chan2d_Pin, RESET);
 8000d52:	2200      	movs	r2, #0
 8000d54:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d58:	4822      	ldr	r0, [pc, #136]	; (8000de4 <display7SEGb+0x394>)
 8000d5a:	f001 fa60 	bl	800221e <HAL_GPIO_WritePin>
   	   	HAL_GPIO_WritePin(chan2e_GPIO_Port,chan2e_Pin, RESET);
 8000d5e:	2200      	movs	r2, #0
 8000d60:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d64:	481f      	ldr	r0, [pc, #124]	; (8000de4 <display7SEGb+0x394>)
 8000d66:	f001 fa5a 	bl	800221e <HAL_GPIO_WritePin>
   	   	HAL_GPIO_WritePin(chan2f_GPIO_Port,chan2f_Pin, RESET);
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d70:	481c      	ldr	r0, [pc, #112]	; (8000de4 <display7SEGb+0x394>)
 8000d72:	f001 fa54 	bl	800221e <HAL_GPIO_WritePin>
   	   	HAL_GPIO_WritePin(chan2g_GPIO_Port,chan2g_Pin, RESET);
 8000d76:	2200      	movs	r2, #0
 8000d78:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d7c:	4819      	ldr	r0, [pc, #100]	; (8000de4 <display7SEGb+0x394>)
 8000d7e:	f001 fa4e 	bl	800221e <HAL_GPIO_WritePin>
   	   	break;
 8000d82:	e02a      	b.n	8000dda <display7SEGb+0x38a>
   	case 9 :
   	   	HAL_GPIO_WritePin(chan2a_GPIO_Port,chan2a_Pin, RESET);
 8000d84:	2200      	movs	r2, #0
 8000d86:	2180      	movs	r1, #128	; 0x80
 8000d88:	4816      	ldr	r0, [pc, #88]	; (8000de4 <display7SEGb+0x394>)
 8000d8a:	f001 fa48 	bl	800221e <HAL_GPIO_WritePin>
   	   	HAL_GPIO_WritePin(chan2b_GPIO_Port,chan2b_Pin, RESET);
 8000d8e:	2200      	movs	r2, #0
 8000d90:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d94:	4813      	ldr	r0, [pc, #76]	; (8000de4 <display7SEGb+0x394>)
 8000d96:	f001 fa42 	bl	800221e <HAL_GPIO_WritePin>
   	   	HAL_GPIO_WritePin(chan2c_GPIO_Port,chan2c_Pin, RESET);
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000da0:	4810      	ldr	r0, [pc, #64]	; (8000de4 <display7SEGb+0x394>)
 8000da2:	f001 fa3c 	bl	800221e <HAL_GPIO_WritePin>
   	   	HAL_GPIO_WritePin(chan2d_GPIO_Port,chan2d_Pin, RESET);
 8000da6:	2200      	movs	r2, #0
 8000da8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000dac:	480d      	ldr	r0, [pc, #52]	; (8000de4 <display7SEGb+0x394>)
 8000dae:	f001 fa36 	bl	800221e <HAL_GPIO_WritePin>
   	   	HAL_GPIO_WritePin(chan2e_GPIO_Port,chan2e_Pin, SET);
 8000db2:	2201      	movs	r2, #1
 8000db4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000db8:	480a      	ldr	r0, [pc, #40]	; (8000de4 <display7SEGb+0x394>)
 8000dba:	f001 fa30 	bl	800221e <HAL_GPIO_WritePin>
   	   	HAL_GPIO_WritePin(chan2f_GPIO_Port,chan2f_Pin, RESET);
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000dc4:	4807      	ldr	r0, [pc, #28]	; (8000de4 <display7SEGb+0x394>)
 8000dc6:	f001 fa2a 	bl	800221e <HAL_GPIO_WritePin>
   	   	HAL_GPIO_WritePin(chan2g_GPIO_Port,chan2g_Pin, RESET);
 8000dca:	2200      	movs	r2, #0
 8000dcc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000dd0:	4804      	ldr	r0, [pc, #16]	; (8000de4 <display7SEGb+0x394>)
 8000dd2:	f001 fa24 	bl	800221e <HAL_GPIO_WritePin>
   	   	break;
 8000dd6:	e000      	b.n	8000dda <display7SEGb+0x38a>
   	default : break;
 8000dd8:	bf00      	nop
   	}
   }
 8000dda:	bf00      	nop
 8000ddc:	3708      	adds	r7, #8
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	40010c00 	.word	0x40010c00

08000de8 <fsm_run1>:

int duration =0 ;
int duration2 =0 ;

void fsm_run1()
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	af00      	add	r7, sp, #0
	switch(status1)
 8000dec:	4b33      	ldr	r3, [pc, #204]	; (8000ebc <fsm_run1+0xd4>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	2b03      	cmp	r3, #3
 8000df2:	d85a      	bhi.n	8000eaa <fsm_run1+0xc2>
 8000df4:	a201      	add	r2, pc, #4	; (adr r2, 8000dfc <fsm_run1+0x14>)
 8000df6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000dfa:	bf00      	nop
 8000dfc:	08000e0d 	.word	0x08000e0d
 8000e00:	08000e2d 	.word	0x08000e2d
 8000e04:	08000e57 	.word	0x08000e57
 8000e08:	08000e81 	.word	0x08000e81
	{
	case INIT :
		turn_off();
 8000e0c:	f000 f8e0 	bl	8000fd0 <turn_off>
		status1=auto_red;
 8000e10:	4b2a      	ldr	r3, [pc, #168]	; (8000ebc <fsm_run1+0xd4>)
 8000e12:	2201      	movs	r2, #1
 8000e14:	601a      	str	r2, [r3, #0]
		duration=timer1+50;
 8000e16:	4b2a      	ldr	r3, [pc, #168]	; (8000ec0 <fsm_run1+0xd8>)
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	3332      	adds	r3, #50	; 0x32
 8000e1c:	4a29      	ldr	r2, [pc, #164]	; (8000ec4 <fsm_run1+0xdc>)
 8000e1e:	6013      	str	r3, [r2, #0]
		settimer1(duration);
 8000e20:	4b28      	ldr	r3, [pc, #160]	; (8000ec4 <fsm_run1+0xdc>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	4618      	mov	r0, r3
 8000e26:	f000 fae1 	bl	80013ec <settimer1>
		break;
 8000e2a:	e045      	b.n	8000eb8 <fsm_run1+0xd0>
	case auto_red:
		turn_on(0);
 8000e2c:	2000      	movs	r0, #0
 8000e2e:	f000 f8f3 	bl	8001018 <turn_on>
		if(timer1_flag==1)
 8000e32:	4b25      	ldr	r3, [pc, #148]	; (8000ec8 <fsm_run1+0xe0>)
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	2b01      	cmp	r3, #1
 8000e38:	d139      	bne.n	8000eae <fsm_run1+0xc6>
		{
			status1=auto_green;
 8000e3a:	4b20      	ldr	r3, [pc, #128]	; (8000ebc <fsm_run1+0xd4>)
 8000e3c:	2202      	movs	r2, #2
 8000e3e:	601a      	str	r2, [r3, #0]
			duration=timer2+50;
 8000e40:	4b22      	ldr	r3, [pc, #136]	; (8000ecc <fsm_run1+0xe4>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	3332      	adds	r3, #50	; 0x32
 8000e46:	4a1f      	ldr	r2, [pc, #124]	; (8000ec4 <fsm_run1+0xdc>)
 8000e48:	6013      	str	r3, [r2, #0]
			settimer1(duration);
 8000e4a:	4b1e      	ldr	r3, [pc, #120]	; (8000ec4 <fsm_run1+0xdc>)
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	4618      	mov	r0, r3
 8000e50:	f000 facc 	bl	80013ec <settimer1>
		}
		break;
 8000e54:	e02b      	b.n	8000eae <fsm_run1+0xc6>
	case auto_green :
		turn_on(1);
 8000e56:	2001      	movs	r0, #1
 8000e58:	f000 f8de 	bl	8001018 <turn_on>
		if(timer1_flag==1)
 8000e5c:	4b1a      	ldr	r3, [pc, #104]	; (8000ec8 <fsm_run1+0xe0>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	2b01      	cmp	r3, #1
 8000e62:	d126      	bne.n	8000eb2 <fsm_run1+0xca>
		{
			status1=auto_yellow;
 8000e64:	4b15      	ldr	r3, [pc, #84]	; (8000ebc <fsm_run1+0xd4>)
 8000e66:	2203      	movs	r2, #3
 8000e68:	601a      	str	r2, [r3, #0]
			duration=timer3+50;
 8000e6a:	4b19      	ldr	r3, [pc, #100]	; (8000ed0 <fsm_run1+0xe8>)
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	3332      	adds	r3, #50	; 0x32
 8000e70:	4a14      	ldr	r2, [pc, #80]	; (8000ec4 <fsm_run1+0xdc>)
 8000e72:	6013      	str	r3, [r2, #0]
			settimer1(duration);
 8000e74:	4b13      	ldr	r3, [pc, #76]	; (8000ec4 <fsm_run1+0xdc>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	4618      	mov	r0, r3
 8000e7a:	f000 fab7 	bl	80013ec <settimer1>
		}
		break;
 8000e7e:	e018      	b.n	8000eb2 <fsm_run1+0xca>
	case auto_yellow :
		turn_on(2);
 8000e80:	2002      	movs	r0, #2
 8000e82:	f000 f8c9 	bl	8001018 <turn_on>
		if(timer1_flag==1)
 8000e86:	4b10      	ldr	r3, [pc, #64]	; (8000ec8 <fsm_run1+0xe0>)
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	2b01      	cmp	r3, #1
 8000e8c:	d113      	bne.n	8000eb6 <fsm_run1+0xce>
		{
			status1=auto_red;
 8000e8e:	4b0b      	ldr	r3, [pc, #44]	; (8000ebc <fsm_run1+0xd4>)
 8000e90:	2201      	movs	r2, #1
 8000e92:	601a      	str	r2, [r3, #0]
			duration=timer1+50;
 8000e94:	4b0a      	ldr	r3, [pc, #40]	; (8000ec0 <fsm_run1+0xd8>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	3332      	adds	r3, #50	; 0x32
 8000e9a:	4a0a      	ldr	r2, [pc, #40]	; (8000ec4 <fsm_run1+0xdc>)
 8000e9c:	6013      	str	r3, [r2, #0]
			settimer1(duration);
 8000e9e:	4b09      	ldr	r3, [pc, #36]	; (8000ec4 <fsm_run1+0xdc>)
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	f000 faa2 	bl	80013ec <settimer1>
		}
		break;
 8000ea8:	e005      	b.n	8000eb6 <fsm_run1+0xce>
	default :  break;
 8000eaa:	bf00      	nop
 8000eac:	e004      	b.n	8000eb8 <fsm_run1+0xd0>
		break;
 8000eae:	bf00      	nop
 8000eb0:	e002      	b.n	8000eb8 <fsm_run1+0xd0>
		break;
 8000eb2:	bf00      	nop
 8000eb4:	e000      	b.n	8000eb8 <fsm_run1+0xd0>
		break;
 8000eb6:	bf00      	nop
	}
}
 8000eb8:	bf00      	nop
 8000eba:	bd80      	pop	{r7, pc}
 8000ebc:	2000009c 	.word	0x2000009c
 8000ec0:	2000004c 	.word	0x2000004c
 8000ec4:	20000094 	.word	0x20000094
 8000ec8:	200000f8 	.word	0x200000f8
 8000ecc:	20000050 	.word	0x20000050
 8000ed0:	20000054 	.word	0x20000054

08000ed4 <fsm_run2>:

void fsm_run2()
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	af00      	add	r7, sp, #0
	switch(status2)
 8000ed8:	4b33      	ldr	r3, [pc, #204]	; (8000fa8 <fsm_run2+0xd4>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	2b03      	cmp	r3, #3
 8000ede:	d85a      	bhi.n	8000f96 <fsm_run2+0xc2>
 8000ee0:	a201      	add	r2, pc, #4	; (adr r2, 8000ee8 <fsm_run2+0x14>)
 8000ee2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ee6:	bf00      	nop
 8000ee8:	08000ef9 	.word	0x08000ef9
 8000eec:	08000f19 	.word	0x08000f19
 8000ef0:	08000f43 	.word	0x08000f43
 8000ef4:	08000f6d 	.word	0x08000f6d
	{
	case INIT :
		turn_off();
 8000ef8:	f000 f86a 	bl	8000fd0 <turn_off>
		status2=auto_green;
 8000efc:	4b2a      	ldr	r3, [pc, #168]	; (8000fa8 <fsm_run2+0xd4>)
 8000efe:	2202      	movs	r2, #2
 8000f00:	601a      	str	r2, [r3, #0]
		duration2=timer2+50;
 8000f02:	4b2a      	ldr	r3, [pc, #168]	; (8000fac <fsm_run2+0xd8>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	3332      	adds	r3, #50	; 0x32
 8000f08:	4a29      	ldr	r2, [pc, #164]	; (8000fb0 <fsm_run2+0xdc>)
 8000f0a:	6013      	str	r3, [r2, #0]
		settimer2(duration2);
 8000f0c:	4b28      	ldr	r3, [pc, #160]	; (8000fb0 <fsm_run2+0xdc>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	4618      	mov	r0, r3
 8000f12:	f000 fa7f 	bl	8001414 <settimer2>
		break;
 8000f16:	e045      	b.n	8000fa4 <fsm_run2+0xd0>
	case auto_red:
		turn_on2(0);
 8000f18:	2000      	movs	r0, #0
 8000f1a:	f000 f8c5 	bl	80010a8 <turn_on2>
		if(timer2_flag==1)
 8000f1e:	4b25      	ldr	r3, [pc, #148]	; (8000fb4 <fsm_run2+0xe0>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	2b01      	cmp	r3, #1
 8000f24:	d139      	bne.n	8000f9a <fsm_run2+0xc6>
		{
			status2=auto_green;
 8000f26:	4b20      	ldr	r3, [pc, #128]	; (8000fa8 <fsm_run2+0xd4>)
 8000f28:	2202      	movs	r2, #2
 8000f2a:	601a      	str	r2, [r3, #0]
			duration2=timer2+50;
 8000f2c:	4b1f      	ldr	r3, [pc, #124]	; (8000fac <fsm_run2+0xd8>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	3332      	adds	r3, #50	; 0x32
 8000f32:	4a1f      	ldr	r2, [pc, #124]	; (8000fb0 <fsm_run2+0xdc>)
 8000f34:	6013      	str	r3, [r2, #0]
			settimer2(duration2);
 8000f36:	4b1e      	ldr	r3, [pc, #120]	; (8000fb0 <fsm_run2+0xdc>)
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f000 fa6a 	bl	8001414 <settimer2>
		}
		break;
 8000f40:	e02b      	b.n	8000f9a <fsm_run2+0xc6>
	case auto_green :
		turn_on2(1);
 8000f42:	2001      	movs	r0, #1
 8000f44:	f000 f8b0 	bl	80010a8 <turn_on2>
		if(timer2_flag==1)
 8000f48:	4b1a      	ldr	r3, [pc, #104]	; (8000fb4 <fsm_run2+0xe0>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	2b01      	cmp	r3, #1
 8000f4e:	d126      	bne.n	8000f9e <fsm_run2+0xca>
		{
			status2=auto_yellow;
 8000f50:	4b15      	ldr	r3, [pc, #84]	; (8000fa8 <fsm_run2+0xd4>)
 8000f52:	2203      	movs	r2, #3
 8000f54:	601a      	str	r2, [r3, #0]
			duration2=timer3+50;
 8000f56:	4b18      	ldr	r3, [pc, #96]	; (8000fb8 <fsm_run2+0xe4>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	3332      	adds	r3, #50	; 0x32
 8000f5c:	4a14      	ldr	r2, [pc, #80]	; (8000fb0 <fsm_run2+0xdc>)
 8000f5e:	6013      	str	r3, [r2, #0]
			settimer2(duration2);
 8000f60:	4b13      	ldr	r3, [pc, #76]	; (8000fb0 <fsm_run2+0xdc>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	4618      	mov	r0, r3
 8000f66:	f000 fa55 	bl	8001414 <settimer2>
		}
		break;
 8000f6a:	e018      	b.n	8000f9e <fsm_run2+0xca>
	case auto_yellow :
		turn_on2(2);
 8000f6c:	2002      	movs	r0, #2
 8000f6e:	f000 f89b 	bl	80010a8 <turn_on2>
		if(timer2_flag==1)
 8000f72:	4b10      	ldr	r3, [pc, #64]	; (8000fb4 <fsm_run2+0xe0>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	2b01      	cmp	r3, #1
 8000f78:	d113      	bne.n	8000fa2 <fsm_run2+0xce>
		{
			status2=auto_red;
 8000f7a:	4b0b      	ldr	r3, [pc, #44]	; (8000fa8 <fsm_run2+0xd4>)
 8000f7c:	2201      	movs	r2, #1
 8000f7e:	601a      	str	r2, [r3, #0]
			duration2=timer1+50;
 8000f80:	4b0e      	ldr	r3, [pc, #56]	; (8000fbc <fsm_run2+0xe8>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	3332      	adds	r3, #50	; 0x32
 8000f86:	4a0a      	ldr	r2, [pc, #40]	; (8000fb0 <fsm_run2+0xdc>)
 8000f88:	6013      	str	r3, [r2, #0]
			settimer2(duration2);
 8000f8a:	4b09      	ldr	r3, [pc, #36]	; (8000fb0 <fsm_run2+0xdc>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f000 fa40 	bl	8001414 <settimer2>
		}
		break;
 8000f94:	e005      	b.n	8000fa2 <fsm_run2+0xce>
	default :  break;
 8000f96:	bf00      	nop
 8000f98:	e004      	b.n	8000fa4 <fsm_run2+0xd0>
		break;
 8000f9a:	bf00      	nop
 8000f9c:	e002      	b.n	8000fa4 <fsm_run2+0xd0>
		break;
 8000f9e:	bf00      	nop
 8000fa0:	e000      	b.n	8000fa4 <fsm_run2+0xd0>
		break;
 8000fa2:	bf00      	nop
	}
}
 8000fa4:	bf00      	nop
 8000fa6:	bd80      	pop	{r7, pc}
 8000fa8:	200000a0 	.word	0x200000a0
 8000fac:	20000050 	.word	0x20000050
 8000fb0:	20000098 	.word	0x20000098
 8000fb4:	20000100 	.word	0x20000100
 8000fb8:	20000054 	.word	0x20000054
 8000fbc:	2000004c 	.word	0x2000004c

08000fc0 <fsm_run>:

void fsm_run()
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	af00      	add	r7, sp, #0
	fsm_run1();
 8000fc4:	f7ff ff10 	bl	8000de8 <fsm_run1>
	fsm_run2();
 8000fc8:	f7ff ff84 	bl	8000ed4 <fsm_run2>
}
 8000fcc:	bf00      	nop
 8000fce:	bd80      	pop	{r7, pc}

08000fd0 <turn_off>:
 */

#include "fsm_auto_help.h"

void turn_off()
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(led_red1_GPIO_Port, led_red1_Pin, SET);
 8000fd4:	2201      	movs	r2, #1
 8000fd6:	2101      	movs	r1, #1
 8000fd8:	480e      	ldr	r0, [pc, #56]	; (8001014 <turn_off+0x44>)
 8000fda:	f001 f920 	bl	800221e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(led_green1_GPIO_Port, led_green1_Pin, SET);
 8000fde:	2201      	movs	r2, #1
 8000fe0:	2102      	movs	r1, #2
 8000fe2:	480c      	ldr	r0, [pc, #48]	; (8001014 <turn_off+0x44>)
 8000fe4:	f001 f91b 	bl	800221e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(led_yellow1_GPIO_Port, led_yellow1_Pin, SET);
 8000fe8:	2201      	movs	r2, #1
 8000fea:	2104      	movs	r1, #4
 8000fec:	4809      	ldr	r0, [pc, #36]	; (8001014 <turn_off+0x44>)
 8000fee:	f001 f916 	bl	800221e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(led_red2_GPIO_Port, led_red2_Pin, SET);
 8000ff2:	2201      	movs	r2, #1
 8000ff4:	2108      	movs	r1, #8
 8000ff6:	4807      	ldr	r0, [pc, #28]	; (8001014 <turn_off+0x44>)
 8000ff8:	f001 f911 	bl	800221e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(led_green2_GPIO_Port, led_green2_Pin, SET);
 8000ffc:	2201      	movs	r2, #1
 8000ffe:	2110      	movs	r1, #16
 8001000:	4804      	ldr	r0, [pc, #16]	; (8001014 <turn_off+0x44>)
 8001002:	f001 f90c 	bl	800221e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(led_yellow2_GPIO_Port, led_yellow2_Pin, SET);
 8001006:	2201      	movs	r2, #1
 8001008:	2120      	movs	r1, #32
 800100a:	4802      	ldr	r0, [pc, #8]	; (8001014 <turn_off+0x44>)
 800100c:	f001 f907 	bl	800221e <HAL_GPIO_WritePin>
}
 8001010:	bf00      	nop
 8001012:	bd80      	pop	{r7, pc}
 8001014:	40010800 	.word	0x40010800

08001018 <turn_on>:

void turn_on(int index)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b082      	sub	sp, #8
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
	switch (index)
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	2b02      	cmp	r3, #2
 8001024:	d029      	beq.n	800107a <turn_on+0x62>
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	2b02      	cmp	r3, #2
 800102a:	dc36      	bgt.n	800109a <turn_on+0x82>
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	2b00      	cmp	r3, #0
 8001030:	d003      	beq.n	800103a <turn_on+0x22>
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	2b01      	cmp	r3, #1
 8001036:	d010      	beq.n	800105a <turn_on+0x42>
	case 2 :
		HAL_GPIO_WritePin(led_red1_GPIO_Port, led_red1_Pin, SET);
		HAL_GPIO_WritePin(led_green1_GPIO_Port, led_green1_Pin, SET);
		HAL_GPIO_WritePin(led_yellow1_GPIO_Port, led_yellow1_Pin, RESET);
		break ;
	default : break;
 8001038:	e02f      	b.n	800109a <turn_on+0x82>
		HAL_GPIO_WritePin(led_red1_GPIO_Port, led_red1_Pin, RESET);
 800103a:	2200      	movs	r2, #0
 800103c:	2101      	movs	r1, #1
 800103e:	4819      	ldr	r0, [pc, #100]	; (80010a4 <turn_on+0x8c>)
 8001040:	f001 f8ed 	bl	800221e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(led_green1_GPIO_Port, led_green1_Pin, SET);
 8001044:	2201      	movs	r2, #1
 8001046:	2102      	movs	r1, #2
 8001048:	4816      	ldr	r0, [pc, #88]	; (80010a4 <turn_on+0x8c>)
 800104a:	f001 f8e8 	bl	800221e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(led_yellow1_GPIO_Port, led_yellow1_Pin, SET);
 800104e:	2201      	movs	r2, #1
 8001050:	2104      	movs	r1, #4
 8001052:	4814      	ldr	r0, [pc, #80]	; (80010a4 <turn_on+0x8c>)
 8001054:	f001 f8e3 	bl	800221e <HAL_GPIO_WritePin>
		break ;
 8001058:	e020      	b.n	800109c <turn_on+0x84>
		HAL_GPIO_WritePin(led_red1_GPIO_Port, led_red1_Pin, SET);
 800105a:	2201      	movs	r2, #1
 800105c:	2101      	movs	r1, #1
 800105e:	4811      	ldr	r0, [pc, #68]	; (80010a4 <turn_on+0x8c>)
 8001060:	f001 f8dd 	bl	800221e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(led_green1_GPIO_Port, led_green1_Pin, RESET);
 8001064:	2200      	movs	r2, #0
 8001066:	2102      	movs	r1, #2
 8001068:	480e      	ldr	r0, [pc, #56]	; (80010a4 <turn_on+0x8c>)
 800106a:	f001 f8d8 	bl	800221e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(led_yellow1_GPIO_Port, led_yellow1_Pin, SET);
 800106e:	2201      	movs	r2, #1
 8001070:	2104      	movs	r1, #4
 8001072:	480c      	ldr	r0, [pc, #48]	; (80010a4 <turn_on+0x8c>)
 8001074:	f001 f8d3 	bl	800221e <HAL_GPIO_WritePin>
		break;
 8001078:	e010      	b.n	800109c <turn_on+0x84>
		HAL_GPIO_WritePin(led_red1_GPIO_Port, led_red1_Pin, SET);
 800107a:	2201      	movs	r2, #1
 800107c:	2101      	movs	r1, #1
 800107e:	4809      	ldr	r0, [pc, #36]	; (80010a4 <turn_on+0x8c>)
 8001080:	f001 f8cd 	bl	800221e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(led_green1_GPIO_Port, led_green1_Pin, SET);
 8001084:	2201      	movs	r2, #1
 8001086:	2102      	movs	r1, #2
 8001088:	4806      	ldr	r0, [pc, #24]	; (80010a4 <turn_on+0x8c>)
 800108a:	f001 f8c8 	bl	800221e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(led_yellow1_GPIO_Port, led_yellow1_Pin, RESET);
 800108e:	2200      	movs	r2, #0
 8001090:	2104      	movs	r1, #4
 8001092:	4804      	ldr	r0, [pc, #16]	; (80010a4 <turn_on+0x8c>)
 8001094:	f001 f8c3 	bl	800221e <HAL_GPIO_WritePin>
		break ;
 8001098:	e000      	b.n	800109c <turn_on+0x84>
	default : break;
 800109a:	bf00      	nop
	}
}
 800109c:	bf00      	nop
 800109e:	3708      	adds	r7, #8
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}
 80010a4:	40010800 	.word	0x40010800

080010a8 <turn_on2>:

void turn_on2(int index)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b082      	sub	sp, #8
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
	switch (index)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	2b02      	cmp	r3, #2
 80010b4:	d029      	beq.n	800110a <turn_on2+0x62>
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	2b02      	cmp	r3, #2
 80010ba:	dc36      	bgt.n	800112a <turn_on2+0x82>
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d003      	beq.n	80010ca <turn_on2+0x22>
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	2b01      	cmp	r3, #1
 80010c6:	d010      	beq.n	80010ea <turn_on2+0x42>
	case 2 :
		HAL_GPIO_WritePin(led_red2_GPIO_Port, led_red2_Pin, SET);
		HAL_GPIO_WritePin(led_green2_GPIO_Port, led_green2_Pin, SET);
		HAL_GPIO_WritePin(led_yellow2_GPIO_Port, led_yellow2_Pin, RESET);
		break ;
	default : break;
 80010c8:	e02f      	b.n	800112a <turn_on2+0x82>
		HAL_GPIO_WritePin(led_red2_GPIO_Port, led_red2_Pin, RESET);
 80010ca:	2200      	movs	r2, #0
 80010cc:	2108      	movs	r1, #8
 80010ce:	4819      	ldr	r0, [pc, #100]	; (8001134 <turn_on2+0x8c>)
 80010d0:	f001 f8a5 	bl	800221e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(led_green2_GPIO_Port, led_green2_Pin, SET);
 80010d4:	2201      	movs	r2, #1
 80010d6:	2110      	movs	r1, #16
 80010d8:	4816      	ldr	r0, [pc, #88]	; (8001134 <turn_on2+0x8c>)
 80010da:	f001 f8a0 	bl	800221e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(led_yellow2_GPIO_Port, led_yellow2_Pin, SET);
 80010de:	2201      	movs	r2, #1
 80010e0:	2120      	movs	r1, #32
 80010e2:	4814      	ldr	r0, [pc, #80]	; (8001134 <turn_on2+0x8c>)
 80010e4:	f001 f89b 	bl	800221e <HAL_GPIO_WritePin>
		break ;
 80010e8:	e020      	b.n	800112c <turn_on2+0x84>
		HAL_GPIO_WritePin(led_red2_GPIO_Port, led_red2_Pin, SET);
 80010ea:	2201      	movs	r2, #1
 80010ec:	2108      	movs	r1, #8
 80010ee:	4811      	ldr	r0, [pc, #68]	; (8001134 <turn_on2+0x8c>)
 80010f0:	f001 f895 	bl	800221e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(led_green2_GPIO_Port, led_green2_Pin, RESET);
 80010f4:	2200      	movs	r2, #0
 80010f6:	2110      	movs	r1, #16
 80010f8:	480e      	ldr	r0, [pc, #56]	; (8001134 <turn_on2+0x8c>)
 80010fa:	f001 f890 	bl	800221e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(led_yellow2_GPIO_Port, led_yellow2_Pin, SET);
 80010fe:	2201      	movs	r2, #1
 8001100:	2120      	movs	r1, #32
 8001102:	480c      	ldr	r0, [pc, #48]	; (8001134 <turn_on2+0x8c>)
 8001104:	f001 f88b 	bl	800221e <HAL_GPIO_WritePin>
		break;
 8001108:	e010      	b.n	800112c <turn_on2+0x84>
		HAL_GPIO_WritePin(led_red2_GPIO_Port, led_red2_Pin, SET);
 800110a:	2201      	movs	r2, #1
 800110c:	2108      	movs	r1, #8
 800110e:	4809      	ldr	r0, [pc, #36]	; (8001134 <turn_on2+0x8c>)
 8001110:	f001 f885 	bl	800221e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(led_green2_GPIO_Port, led_green2_Pin, SET);
 8001114:	2201      	movs	r2, #1
 8001116:	2110      	movs	r1, #16
 8001118:	4806      	ldr	r0, [pc, #24]	; (8001134 <turn_on2+0x8c>)
 800111a:	f001 f880 	bl	800221e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(led_yellow2_GPIO_Port, led_yellow2_Pin, RESET);
 800111e:	2200      	movs	r2, #0
 8001120:	2120      	movs	r1, #32
 8001122:	4804      	ldr	r0, [pc, #16]	; (8001134 <turn_on2+0x8c>)
 8001124:	f001 f87b 	bl	800221e <HAL_GPIO_WritePin>
		break ;
 8001128:	e000      	b.n	800112c <turn_on2+0x84>
	default : break;
 800112a:	bf00      	nop
	}
}
 800112c:	bf00      	nop
 800112e:	3708      	adds	r7, #8
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}
 8001134:	40010800 	.word	0x40010800

08001138 <changetimer1>:
int timer1=500;
int timer2=300;
int timer3=200;

void changetimer1(int duration)
{
 8001138:	b480      	push	{r7}
 800113a:	b083      	sub	sp, #12
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
	timer1=duration;
 8001140:	4a03      	ldr	r2, [pc, #12]	; (8001150 <changetimer1+0x18>)
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	6013      	str	r3, [r2, #0]
}
 8001146:	bf00      	nop
 8001148:	370c      	adds	r7, #12
 800114a:	46bd      	mov	sp, r7
 800114c:	bc80      	pop	{r7}
 800114e:	4770      	bx	lr
 8001150:	2000004c 	.word	0x2000004c

08001154 <changetimer2>:

void changetimer2(int duration)
{
 8001154:	b480      	push	{r7}
 8001156:	b083      	sub	sp, #12
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
	timer2=duration;
 800115c:	4a03      	ldr	r2, [pc, #12]	; (800116c <changetimer2+0x18>)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	6013      	str	r3, [r2, #0]
}
 8001162:	bf00      	nop
 8001164:	370c      	adds	r7, #12
 8001166:	46bd      	mov	sp, r7
 8001168:	bc80      	pop	{r7}
 800116a:	4770      	bx	lr
 800116c:	20000050 	.word	0x20000050

08001170 <changetimer3>:

void changetimer3(int duration)
{
 8001170:	b480      	push	{r7}
 8001172:	b083      	sub	sp, #12
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
	timer3=duration;
 8001178:	4a03      	ldr	r2, [pc, #12]	; (8001188 <changetimer3+0x18>)
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	6013      	str	r3, [r2, #0]
}
 800117e:	bf00      	nop
 8001180:	370c      	adds	r7, #12
 8001182:	46bd      	mov	sp, r7
 8001184:	bc80      	pop	{r7}
 8001186:	4770      	bx	lr
 8001188:	20000054 	.word	0x20000054

0800118c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001190:	f000 fd42 	bl	8001c18 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001194:	f000 f81e 	bl	80011d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001198:	f000 f8a4 	bl	80012e4 <MX_GPIO_Init>
  MX_TIM2_Init();
 800119c:	f000 f856 	bl	800124c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 80011a0:	4807      	ldr	r0, [pc, #28]	; (80011c0 <main+0x34>)
 80011a2:	f001 fc9b 	bl	8002adc <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  status1=INIT;
 80011a6:	4b07      	ldr	r3, [pc, #28]	; (80011c4 <main+0x38>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	601a      	str	r2, [r3, #0]
  status2=INIT;
 80011ac:	4b06      	ldr	r3, [pc, #24]	; (80011c8 <main+0x3c>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	601a      	str	r2, [r3, #0]
  status3=INIT;
 80011b2:	4b06      	ldr	r3, [pc, #24]	; (80011cc <main+0x40>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	601a      	str	r2, [r3, #0]
  status4=INIT;
 80011b8:	4b05      	ldr	r3, [pc, #20]	; (80011d0 <main+0x44>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	601a      	str	r2, [r3, #0]
  while (1)
 80011be:	e7fe      	b.n	80011be <main+0x32>
 80011c0:	200000ac 	.word	0x200000ac
 80011c4:	2000009c 	.word	0x2000009c
 80011c8:	200000a0 	.word	0x200000a0
 80011cc:	200000a4 	.word	0x200000a4
 80011d0:	200000a8 	.word	0x200000a8

080011d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b090      	sub	sp, #64	; 0x40
 80011d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011da:	f107 0318 	add.w	r3, r7, #24
 80011de:	2228      	movs	r2, #40	; 0x28
 80011e0:	2100      	movs	r1, #0
 80011e2:	4618      	mov	r0, r3
 80011e4:	f002 f812 	bl	800320c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011e8:	1d3b      	adds	r3, r7, #4
 80011ea:	2200      	movs	r2, #0
 80011ec:	601a      	str	r2, [r3, #0]
 80011ee:	605a      	str	r2, [r3, #4]
 80011f0:	609a      	str	r2, [r3, #8]
 80011f2:	60da      	str	r2, [r3, #12]
 80011f4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80011f6:	2302      	movs	r3, #2
 80011f8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011fa:	2301      	movs	r3, #1
 80011fc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011fe:	2310      	movs	r3, #16
 8001200:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001202:	2300      	movs	r3, #0
 8001204:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001206:	f107 0318 	add.w	r3, r7, #24
 800120a:	4618      	mov	r0, r3
 800120c:	f001 f838 	bl	8002280 <HAL_RCC_OscConfig>
 8001210:	4603      	mov	r3, r0
 8001212:	2b00      	cmp	r3, #0
 8001214:	d001      	beq.n	800121a <SystemClock_Config+0x46>
  {
    Error_Handler();
 8001216:	f000 f8e3 	bl	80013e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800121a:	230f      	movs	r3, #15
 800121c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800121e:	2300      	movs	r3, #0
 8001220:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001222:	2300      	movs	r3, #0
 8001224:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001226:	2300      	movs	r3, #0
 8001228:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800122a:	2300      	movs	r3, #0
 800122c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800122e:	1d3b      	adds	r3, r7, #4
 8001230:	2100      	movs	r1, #0
 8001232:	4618      	mov	r0, r3
 8001234:	f001 faa6 	bl	8002784 <HAL_RCC_ClockConfig>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	d001      	beq.n	8001242 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800123e:	f000 f8cf 	bl	80013e0 <Error_Handler>
  }
}
 8001242:	bf00      	nop
 8001244:	3740      	adds	r7, #64	; 0x40
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
	...

0800124c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b086      	sub	sp, #24
 8001250:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001252:	f107 0308 	add.w	r3, r7, #8
 8001256:	2200      	movs	r2, #0
 8001258:	601a      	str	r2, [r3, #0]
 800125a:	605a      	str	r2, [r3, #4]
 800125c:	609a      	str	r2, [r3, #8]
 800125e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001260:	463b      	mov	r3, r7
 8001262:	2200      	movs	r2, #0
 8001264:	601a      	str	r2, [r3, #0]
 8001266:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001268:	4b1d      	ldr	r3, [pc, #116]	; (80012e0 <MX_TIM2_Init+0x94>)
 800126a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800126e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8001270:	4b1b      	ldr	r3, [pc, #108]	; (80012e0 <MX_TIM2_Init+0x94>)
 8001272:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8001276:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001278:	4b19      	ldr	r3, [pc, #100]	; (80012e0 <MX_TIM2_Init+0x94>)
 800127a:	2200      	movs	r2, #0
 800127c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 800127e:	4b18      	ldr	r3, [pc, #96]	; (80012e0 <MX_TIM2_Init+0x94>)
 8001280:	2209      	movs	r2, #9
 8001282:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001284:	4b16      	ldr	r3, [pc, #88]	; (80012e0 <MX_TIM2_Init+0x94>)
 8001286:	2200      	movs	r2, #0
 8001288:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800128a:	4b15      	ldr	r3, [pc, #84]	; (80012e0 <MX_TIM2_Init+0x94>)
 800128c:	2200      	movs	r2, #0
 800128e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001290:	4813      	ldr	r0, [pc, #76]	; (80012e0 <MX_TIM2_Init+0x94>)
 8001292:	f001 fbd3 	bl	8002a3c <HAL_TIM_Base_Init>
 8001296:	4603      	mov	r3, r0
 8001298:	2b00      	cmp	r3, #0
 800129a:	d001      	beq.n	80012a0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800129c:	f000 f8a0 	bl	80013e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012a4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80012a6:	f107 0308 	add.w	r3, r7, #8
 80012aa:	4619      	mov	r1, r3
 80012ac:	480c      	ldr	r0, [pc, #48]	; (80012e0 <MX_TIM2_Init+0x94>)
 80012ae:	f001 fd69 	bl	8002d84 <HAL_TIM_ConfigClockSource>
 80012b2:	4603      	mov	r3, r0
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d001      	beq.n	80012bc <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80012b8:	f000 f892 	bl	80013e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012bc:	2300      	movs	r3, #0
 80012be:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012c0:	2300      	movs	r3, #0
 80012c2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80012c4:	463b      	mov	r3, r7
 80012c6:	4619      	mov	r1, r3
 80012c8:	4805      	ldr	r0, [pc, #20]	; (80012e0 <MX_TIM2_Init+0x94>)
 80012ca:	f001 ff35 	bl	8003138 <HAL_TIMEx_MasterConfigSynchronization>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d001      	beq.n	80012d8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80012d4:	f000 f884 	bl	80013e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80012d8:	bf00      	nop
 80012da:	3718      	adds	r7, #24
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}
 80012e0:	200000ac 	.word	0x200000ac

080012e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b088      	sub	sp, #32
 80012e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012ea:	f107 0310 	add.w	r3, r7, #16
 80012ee:	2200      	movs	r2, #0
 80012f0:	601a      	str	r2, [r3, #0]
 80012f2:	605a      	str	r2, [r3, #4]
 80012f4:	609a      	str	r2, [r3, #8]
 80012f6:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012f8:	4b2f      	ldr	r3, [pc, #188]	; (80013b8 <MX_GPIO_Init+0xd4>)
 80012fa:	699b      	ldr	r3, [r3, #24]
 80012fc:	4a2e      	ldr	r2, [pc, #184]	; (80013b8 <MX_GPIO_Init+0xd4>)
 80012fe:	f043 0310 	orr.w	r3, r3, #16
 8001302:	6193      	str	r3, [r2, #24]
 8001304:	4b2c      	ldr	r3, [pc, #176]	; (80013b8 <MX_GPIO_Init+0xd4>)
 8001306:	699b      	ldr	r3, [r3, #24]
 8001308:	f003 0310 	and.w	r3, r3, #16
 800130c:	60fb      	str	r3, [r7, #12]
 800130e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001310:	4b29      	ldr	r3, [pc, #164]	; (80013b8 <MX_GPIO_Init+0xd4>)
 8001312:	699b      	ldr	r3, [r3, #24]
 8001314:	4a28      	ldr	r2, [pc, #160]	; (80013b8 <MX_GPIO_Init+0xd4>)
 8001316:	f043 0304 	orr.w	r3, r3, #4
 800131a:	6193      	str	r3, [r2, #24]
 800131c:	4b26      	ldr	r3, [pc, #152]	; (80013b8 <MX_GPIO_Init+0xd4>)
 800131e:	699b      	ldr	r3, [r3, #24]
 8001320:	f003 0304 	and.w	r3, r3, #4
 8001324:	60bb      	str	r3, [r7, #8]
 8001326:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001328:	4b23      	ldr	r3, [pc, #140]	; (80013b8 <MX_GPIO_Init+0xd4>)
 800132a:	699b      	ldr	r3, [r3, #24]
 800132c:	4a22      	ldr	r2, [pc, #136]	; (80013b8 <MX_GPIO_Init+0xd4>)
 800132e:	f043 0308 	orr.w	r3, r3, #8
 8001332:	6193      	str	r3, [r2, #24]
 8001334:	4b20      	ldr	r3, [pc, #128]	; (80013b8 <MX_GPIO_Init+0xd4>)
 8001336:	699b      	ldr	r3, [r3, #24]
 8001338:	f003 0308 	and.w	r3, r3, #8
 800133c:	607b      	str	r3, [r7, #4]
 800133e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, led_red1_Pin|led_green1_Pin|led_yellow1_Pin|led_red2_Pin
 8001340:	2200      	movs	r2, #0
 8001342:	f240 71bf 	movw	r1, #1983	; 0x7bf
 8001346:	481d      	ldr	r0, [pc, #116]	; (80013bc <MX_GPIO_Init+0xd8>)
 8001348:	f000 ff69 	bl	800221e <HAL_GPIO_WritePin>
                          |led_green2_Pin|led_yellow2_Pin|en0_Pin|en1_Pin
                          |en2_Pin|en3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, chan1a_Pin|chan1b_Pin|chan1c_Pin|chan2d_Pin
 800134c:	2200      	movs	r2, #0
 800134e:	f643 71ff 	movw	r1, #16383	; 0x3fff
 8001352:	481b      	ldr	r0, [pc, #108]	; (80013c0 <MX_GPIO_Init+0xdc>)
 8001354:	f000 ff63 	bl	800221e <HAL_GPIO_WritePin>
                          |chan2e_Pin|chan2f_Pin|chan2g_Pin|chan1d_Pin
                          |chan1e_Pin|chan1f_Pin|chan1g_Pin|chan2a_Pin
                          |chan2b_Pin|chan2c_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : button1_Pin button2_Pin button3_Pin */
  GPIO_InitStruct.Pin = button1_Pin|button2_Pin|button3_Pin;
 8001358:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800135c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800135e:	2300      	movs	r3, #0
 8001360:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001362:	2301      	movs	r3, #1
 8001364:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001366:	f107 0310 	add.w	r3, r7, #16
 800136a:	4619      	mov	r1, r3
 800136c:	4815      	ldr	r0, [pc, #84]	; (80013c4 <MX_GPIO_Init+0xe0>)
 800136e:	f000 fdc3 	bl	8001ef8 <HAL_GPIO_Init>

  /*Configure GPIO pins : led_red1_Pin led_green1_Pin led_yellow1_Pin led_red2_Pin
                           led_green2_Pin led_yellow2_Pin en0_Pin en1_Pin
                           en2_Pin en3_Pin */
  GPIO_InitStruct.Pin = led_red1_Pin|led_green1_Pin|led_yellow1_Pin|led_red2_Pin
 8001372:	f240 73bf 	movw	r3, #1983	; 0x7bf
 8001376:	613b      	str	r3, [r7, #16]
                          |led_green2_Pin|led_yellow2_Pin|en0_Pin|en1_Pin
                          |en2_Pin|en3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001378:	2301      	movs	r3, #1
 800137a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800137c:	2300      	movs	r3, #0
 800137e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001380:	2302      	movs	r3, #2
 8001382:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001384:	f107 0310 	add.w	r3, r7, #16
 8001388:	4619      	mov	r1, r3
 800138a:	480c      	ldr	r0, [pc, #48]	; (80013bc <MX_GPIO_Init+0xd8>)
 800138c:	f000 fdb4 	bl	8001ef8 <HAL_GPIO_Init>

  /*Configure GPIO pins : chan1a_Pin chan1b_Pin chan1c_Pin chan2d_Pin
                           chan2e_Pin chan2f_Pin chan2g_Pin chan1d_Pin
                           chan1e_Pin chan1f_Pin chan1g_Pin chan2a_Pin
                           chan2b_Pin chan2c_Pin */
  GPIO_InitStruct.Pin = chan1a_Pin|chan1b_Pin|chan1c_Pin|chan2d_Pin
 8001390:	f643 73ff 	movw	r3, #16383	; 0x3fff
 8001394:	613b      	str	r3, [r7, #16]
                          |chan2e_Pin|chan2f_Pin|chan2g_Pin|chan1d_Pin
                          |chan1e_Pin|chan1f_Pin|chan1g_Pin|chan2a_Pin
                          |chan2b_Pin|chan2c_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001396:	2301      	movs	r3, #1
 8001398:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800139a:	2300      	movs	r3, #0
 800139c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800139e:	2302      	movs	r3, #2
 80013a0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013a2:	f107 0310 	add.w	r3, r7, #16
 80013a6:	4619      	mov	r1, r3
 80013a8:	4805      	ldr	r0, [pc, #20]	; (80013c0 <MX_GPIO_Init+0xdc>)
 80013aa:	f000 fda5 	bl	8001ef8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80013ae:	bf00      	nop
 80013b0:	3720      	adds	r7, #32
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	40021000 	.word	0x40021000
 80013bc:	40010800 	.word	0x40010800
 80013c0:	40010c00 	.word	0x40010c00
 80013c4:	40011000 	.word	0x40011000

080013c8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b082      	sub	sp, #8
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
	timerrun();
 80013d0:	f000 f884 	bl	80014dc <timerrun>
	getkeyinput();
 80013d4:	f7fe fec4 	bl	8000160 <getkeyinput>
}
 80013d8:	bf00      	nop
 80013da:	3708      	adds	r7, #8
 80013dc:	46bd      	mov	sp, r7
 80013de:	bd80      	pop	{r7, pc}

080013e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013e0:	b480      	push	{r7}
 80013e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013e4:	b672      	cpsid	i
}
 80013e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013e8:	e7fe      	b.n	80013e8 <Error_Handler+0x8>
	...

080013ec <settimer1>:
int timer5_flag=0;
int timer6_counter=0;
int timer6_flag=0;

void settimer1(int duration)
{
 80013ec:	b480      	push	{r7}
 80013ee:	b083      	sub	sp, #12
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
	timer1_counter=duration;
 80013f4:	4a05      	ldr	r2, [pc, #20]	; (800140c <settimer1+0x20>)
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	6013      	str	r3, [r2, #0]
	timer1_flag=0;
 80013fa:	4b05      	ldr	r3, [pc, #20]	; (8001410 <settimer1+0x24>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	601a      	str	r2, [r3, #0]
}
 8001400:	bf00      	nop
 8001402:	370c      	adds	r7, #12
 8001404:	46bd      	mov	sp, r7
 8001406:	bc80      	pop	{r7}
 8001408:	4770      	bx	lr
 800140a:	bf00      	nop
 800140c:	200000f4 	.word	0x200000f4
 8001410:	200000f8 	.word	0x200000f8

08001414 <settimer2>:
void settimer2(int duration)
{
 8001414:	b480      	push	{r7}
 8001416:	b083      	sub	sp, #12
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
	timer2_counter=duration;
 800141c:	4a05      	ldr	r2, [pc, #20]	; (8001434 <settimer2+0x20>)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	6013      	str	r3, [r2, #0]
	timer2_flag=0;
 8001422:	4b05      	ldr	r3, [pc, #20]	; (8001438 <settimer2+0x24>)
 8001424:	2200      	movs	r2, #0
 8001426:	601a      	str	r2, [r3, #0]
}
 8001428:	bf00      	nop
 800142a:	370c      	adds	r7, #12
 800142c:	46bd      	mov	sp, r7
 800142e:	bc80      	pop	{r7}
 8001430:	4770      	bx	lr
 8001432:	bf00      	nop
 8001434:	200000fc 	.word	0x200000fc
 8001438:	20000100 	.word	0x20000100

0800143c <settimer3>:
void settimer3(int duration)
{
 800143c:	b480      	push	{r7}
 800143e:	b083      	sub	sp, #12
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
	timer3_counter=duration;
 8001444:	4a05      	ldr	r2, [pc, #20]	; (800145c <settimer3+0x20>)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	6013      	str	r3, [r2, #0]
	timer3_flag=0;
 800144a:	4b05      	ldr	r3, [pc, #20]	; (8001460 <settimer3+0x24>)
 800144c:	2200      	movs	r2, #0
 800144e:	601a      	str	r2, [r3, #0]
}
 8001450:	bf00      	nop
 8001452:	370c      	adds	r7, #12
 8001454:	46bd      	mov	sp, r7
 8001456:	bc80      	pop	{r7}
 8001458:	4770      	bx	lr
 800145a:	bf00      	nop
 800145c:	20000104 	.word	0x20000104
 8001460:	20000108 	.word	0x20000108

08001464 <settimer4>:
void settimer4(int duration)
{
 8001464:	b480      	push	{r7}
 8001466:	b083      	sub	sp, #12
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
	timer4_counter=duration;
 800146c:	4a05      	ldr	r2, [pc, #20]	; (8001484 <settimer4+0x20>)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	6013      	str	r3, [r2, #0]
	timer4_flag=0;
 8001472:	4b05      	ldr	r3, [pc, #20]	; (8001488 <settimer4+0x24>)
 8001474:	2200      	movs	r2, #0
 8001476:	601a      	str	r2, [r3, #0]
}
 8001478:	bf00      	nop
 800147a:	370c      	adds	r7, #12
 800147c:	46bd      	mov	sp, r7
 800147e:	bc80      	pop	{r7}
 8001480:	4770      	bx	lr
 8001482:	bf00      	nop
 8001484:	2000010c 	.word	0x2000010c
 8001488:	20000110 	.word	0x20000110

0800148c <settimer5>:
void settimer5(int duration)
{
 800148c:	b480      	push	{r7}
 800148e:	b083      	sub	sp, #12
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
	timer5_counter=duration;
 8001494:	4a05      	ldr	r2, [pc, #20]	; (80014ac <settimer5+0x20>)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	6013      	str	r3, [r2, #0]
	timer5_flag=0;
 800149a:	4b05      	ldr	r3, [pc, #20]	; (80014b0 <settimer5+0x24>)
 800149c:	2200      	movs	r2, #0
 800149e:	601a      	str	r2, [r3, #0]
}
 80014a0:	bf00      	nop
 80014a2:	370c      	adds	r7, #12
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bc80      	pop	{r7}
 80014a8:	4770      	bx	lr
 80014aa:	bf00      	nop
 80014ac:	20000114 	.word	0x20000114
 80014b0:	20000118 	.word	0x20000118

080014b4 <settimer6>:
void settimer6(int duration)
{
 80014b4:	b480      	push	{r7}
 80014b6:	b083      	sub	sp, #12
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
	timer6_counter=duration;
 80014bc:	4a05      	ldr	r2, [pc, #20]	; (80014d4 <settimer6+0x20>)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	6013      	str	r3, [r2, #0]
	timer6_flag=0;
 80014c2:	4b05      	ldr	r3, [pc, #20]	; (80014d8 <settimer6+0x24>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	601a      	str	r2, [r3, #0]
}
 80014c8:	bf00      	nop
 80014ca:	370c      	adds	r7, #12
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bc80      	pop	{r7}
 80014d0:	4770      	bx	lr
 80014d2:	bf00      	nop
 80014d4:	2000011c 	.word	0x2000011c
 80014d8:	20000120 	.word	0x20000120

080014dc <timerrun>:

void timerrun()
{
 80014dc:	b480      	push	{r7}
 80014de:	af00      	add	r7, sp, #0
	if(timer1_counter>0)
 80014e0:	4b31      	ldr	r3, [pc, #196]	; (80015a8 <timerrun+0xcc>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	dd04      	ble.n	80014f2 <timerrun+0x16>
	{
		timer1_counter--;
 80014e8:	4b2f      	ldr	r3, [pc, #188]	; (80015a8 <timerrun+0xcc>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	3b01      	subs	r3, #1
 80014ee:	4a2e      	ldr	r2, [pc, #184]	; (80015a8 <timerrun+0xcc>)
 80014f0:	6013      	str	r3, [r2, #0]
	}
	if(timer1_counter<=0)
 80014f2:	4b2d      	ldr	r3, [pc, #180]	; (80015a8 <timerrun+0xcc>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	dc02      	bgt.n	8001500 <timerrun+0x24>
	{
		timer1_flag=1;
 80014fa:	4b2c      	ldr	r3, [pc, #176]	; (80015ac <timerrun+0xd0>)
 80014fc:	2201      	movs	r2, #1
 80014fe:	601a      	str	r2, [r3, #0]
	}
	if(timer2_counter>0)
 8001500:	4b2b      	ldr	r3, [pc, #172]	; (80015b0 <timerrun+0xd4>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	2b00      	cmp	r3, #0
 8001506:	dd04      	ble.n	8001512 <timerrun+0x36>
	{
		timer2_counter--;
 8001508:	4b29      	ldr	r3, [pc, #164]	; (80015b0 <timerrun+0xd4>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	3b01      	subs	r3, #1
 800150e:	4a28      	ldr	r2, [pc, #160]	; (80015b0 <timerrun+0xd4>)
 8001510:	6013      	str	r3, [r2, #0]
	}
	if(timer2_counter<=0)
 8001512:	4b27      	ldr	r3, [pc, #156]	; (80015b0 <timerrun+0xd4>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	2b00      	cmp	r3, #0
 8001518:	dc02      	bgt.n	8001520 <timerrun+0x44>
	{
		timer2_flag=1;
 800151a:	4b26      	ldr	r3, [pc, #152]	; (80015b4 <timerrun+0xd8>)
 800151c:	2201      	movs	r2, #1
 800151e:	601a      	str	r2, [r3, #0]
	}
	if(timer3_counter>0)
 8001520:	4b25      	ldr	r3, [pc, #148]	; (80015b8 <timerrun+0xdc>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	2b00      	cmp	r3, #0
 8001526:	dd04      	ble.n	8001532 <timerrun+0x56>
	{
		timer3_counter--;
 8001528:	4b23      	ldr	r3, [pc, #140]	; (80015b8 <timerrun+0xdc>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	3b01      	subs	r3, #1
 800152e:	4a22      	ldr	r2, [pc, #136]	; (80015b8 <timerrun+0xdc>)
 8001530:	6013      	str	r3, [r2, #0]
	}
	if(timer3_counter<=0)
 8001532:	4b21      	ldr	r3, [pc, #132]	; (80015b8 <timerrun+0xdc>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	2b00      	cmp	r3, #0
 8001538:	dc02      	bgt.n	8001540 <timerrun+0x64>
	{
		timer3_flag=1;
 800153a:	4b20      	ldr	r3, [pc, #128]	; (80015bc <timerrun+0xe0>)
 800153c:	2201      	movs	r2, #1
 800153e:	601a      	str	r2, [r3, #0]
	}
	if(timer4_counter>0)
 8001540:	4b1f      	ldr	r3, [pc, #124]	; (80015c0 <timerrun+0xe4>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	2b00      	cmp	r3, #0
 8001546:	dd04      	ble.n	8001552 <timerrun+0x76>
	{
		timer4_counter--;
 8001548:	4b1d      	ldr	r3, [pc, #116]	; (80015c0 <timerrun+0xe4>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	3b01      	subs	r3, #1
 800154e:	4a1c      	ldr	r2, [pc, #112]	; (80015c0 <timerrun+0xe4>)
 8001550:	6013      	str	r3, [r2, #0]
	}
	if(timer4_counter<=0)
 8001552:	4b1b      	ldr	r3, [pc, #108]	; (80015c0 <timerrun+0xe4>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	2b00      	cmp	r3, #0
 8001558:	dc02      	bgt.n	8001560 <timerrun+0x84>
	{
		timer4_flag=1;
 800155a:	4b1a      	ldr	r3, [pc, #104]	; (80015c4 <timerrun+0xe8>)
 800155c:	2201      	movs	r2, #1
 800155e:	601a      	str	r2, [r3, #0]
	}
	if(timer5_counter>0)
 8001560:	4b19      	ldr	r3, [pc, #100]	; (80015c8 <timerrun+0xec>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	2b00      	cmp	r3, #0
 8001566:	dd04      	ble.n	8001572 <timerrun+0x96>
	{
		timer5_counter--;
 8001568:	4b17      	ldr	r3, [pc, #92]	; (80015c8 <timerrun+0xec>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	3b01      	subs	r3, #1
 800156e:	4a16      	ldr	r2, [pc, #88]	; (80015c8 <timerrun+0xec>)
 8001570:	6013      	str	r3, [r2, #0]
	}
	if(timer5_counter<=0)
 8001572:	4b15      	ldr	r3, [pc, #84]	; (80015c8 <timerrun+0xec>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	2b00      	cmp	r3, #0
 8001578:	dc02      	bgt.n	8001580 <timerrun+0xa4>
	{
		timer5_flag=1;
 800157a:	4b14      	ldr	r3, [pc, #80]	; (80015cc <timerrun+0xf0>)
 800157c:	2201      	movs	r2, #1
 800157e:	601a      	str	r2, [r3, #0]
	}
	if(timer6_counter>0)
 8001580:	4b13      	ldr	r3, [pc, #76]	; (80015d0 <timerrun+0xf4>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	2b00      	cmp	r3, #0
 8001586:	dd04      	ble.n	8001592 <timerrun+0xb6>
	{
		timer6_counter--;
 8001588:	4b11      	ldr	r3, [pc, #68]	; (80015d0 <timerrun+0xf4>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	3b01      	subs	r3, #1
 800158e:	4a10      	ldr	r2, [pc, #64]	; (80015d0 <timerrun+0xf4>)
 8001590:	6013      	str	r3, [r2, #0]
	}
	if(timer6_counter<=0)
 8001592:	4b0f      	ldr	r3, [pc, #60]	; (80015d0 <timerrun+0xf4>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	2b00      	cmp	r3, #0
 8001598:	dc02      	bgt.n	80015a0 <timerrun+0xc4>
	{
		timer6_flag=1;
 800159a:	4b0e      	ldr	r3, [pc, #56]	; (80015d4 <timerrun+0xf8>)
 800159c:	2201      	movs	r2, #1
 800159e:	601a      	str	r2, [r3, #0]
	}
}
 80015a0:	bf00      	nop
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bc80      	pop	{r7}
 80015a6:	4770      	bx	lr
 80015a8:	200000f4 	.word	0x200000f4
 80015ac:	200000f8 	.word	0x200000f8
 80015b0:	200000fc 	.word	0x200000fc
 80015b4:	20000100 	.word	0x20000100
 80015b8:	20000104 	.word	0x20000104
 80015bc:	20000108 	.word	0x20000108
 80015c0:	2000010c 	.word	0x2000010c
 80015c4:	20000110 	.word	0x20000110
 80015c8:	20000114 	.word	0x20000114
 80015cc:	20000118 	.word	0x20000118
 80015d0:	2000011c 	.word	0x2000011c
 80015d4:	20000120 	.word	0x20000120

080015d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015d8:	b480      	push	{r7}
 80015da:	b083      	sub	sp, #12
 80015dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80015de:	4b0e      	ldr	r3, [pc, #56]	; (8001618 <HAL_MspInit+0x40>)
 80015e0:	699b      	ldr	r3, [r3, #24]
 80015e2:	4a0d      	ldr	r2, [pc, #52]	; (8001618 <HAL_MspInit+0x40>)
 80015e4:	f043 0301 	orr.w	r3, r3, #1
 80015e8:	6193      	str	r3, [r2, #24]
 80015ea:	4b0b      	ldr	r3, [pc, #44]	; (8001618 <HAL_MspInit+0x40>)
 80015ec:	699b      	ldr	r3, [r3, #24]
 80015ee:	f003 0301 	and.w	r3, r3, #1
 80015f2:	607b      	str	r3, [r7, #4]
 80015f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015f6:	4b08      	ldr	r3, [pc, #32]	; (8001618 <HAL_MspInit+0x40>)
 80015f8:	69db      	ldr	r3, [r3, #28]
 80015fa:	4a07      	ldr	r2, [pc, #28]	; (8001618 <HAL_MspInit+0x40>)
 80015fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001600:	61d3      	str	r3, [r2, #28]
 8001602:	4b05      	ldr	r3, [pc, #20]	; (8001618 <HAL_MspInit+0x40>)
 8001604:	69db      	ldr	r3, [r3, #28]
 8001606:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800160a:	603b      	str	r3, [r7, #0]
 800160c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800160e:	bf00      	nop
 8001610:	370c      	adds	r7, #12
 8001612:	46bd      	mov	sp, r7
 8001614:	bc80      	pop	{r7}
 8001616:	4770      	bx	lr
 8001618:	40021000 	.word	0x40021000

0800161c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b084      	sub	sp, #16
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800162c:	d113      	bne.n	8001656 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800162e:	4b0c      	ldr	r3, [pc, #48]	; (8001660 <HAL_TIM_Base_MspInit+0x44>)
 8001630:	69db      	ldr	r3, [r3, #28]
 8001632:	4a0b      	ldr	r2, [pc, #44]	; (8001660 <HAL_TIM_Base_MspInit+0x44>)
 8001634:	f043 0301 	orr.w	r3, r3, #1
 8001638:	61d3      	str	r3, [r2, #28]
 800163a:	4b09      	ldr	r3, [pc, #36]	; (8001660 <HAL_TIM_Base_MspInit+0x44>)
 800163c:	69db      	ldr	r3, [r3, #28]
 800163e:	f003 0301 	and.w	r3, r3, #1
 8001642:	60fb      	str	r3, [r7, #12]
 8001644:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001646:	2200      	movs	r2, #0
 8001648:	2100      	movs	r1, #0
 800164a:	201c      	movs	r0, #28
 800164c:	f000 fc1d 	bl	8001e8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001650:	201c      	movs	r0, #28
 8001652:	f000 fc36 	bl	8001ec2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001656:	bf00      	nop
 8001658:	3710      	adds	r7, #16
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	40021000 	.word	0x40021000

08001664 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001664:	b480      	push	{r7}
 8001666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001668:	e7fe      	b.n	8001668 <NMI_Handler+0x4>

0800166a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800166a:	b480      	push	{r7}
 800166c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800166e:	e7fe      	b.n	800166e <HardFault_Handler+0x4>

08001670 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001670:	b480      	push	{r7}
 8001672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001674:	e7fe      	b.n	8001674 <MemManage_Handler+0x4>

08001676 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001676:	b480      	push	{r7}
 8001678:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800167a:	e7fe      	b.n	800167a <BusFault_Handler+0x4>

0800167c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800167c:	b480      	push	{r7}
 800167e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001680:	e7fe      	b.n	8001680 <UsageFault_Handler+0x4>

08001682 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001682:	b480      	push	{r7}
 8001684:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001686:	bf00      	nop
 8001688:	46bd      	mov	sp, r7
 800168a:	bc80      	pop	{r7}
 800168c:	4770      	bx	lr

0800168e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800168e:	b480      	push	{r7}
 8001690:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001692:	bf00      	nop
 8001694:	46bd      	mov	sp, r7
 8001696:	bc80      	pop	{r7}
 8001698:	4770      	bx	lr

0800169a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800169a:	b480      	push	{r7}
 800169c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800169e:	bf00      	nop
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bc80      	pop	{r7}
 80016a4:	4770      	bx	lr

080016a6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016a6:	b580      	push	{r7, lr}
 80016a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016aa:	f000 fafb 	bl	8001ca4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016ae:	bf00      	nop
 80016b0:	bd80      	pop	{r7, pc}
	...

080016b4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80016b8:	4802      	ldr	r0, [pc, #8]	; (80016c4 <TIM2_IRQHandler+0x10>)
 80016ba:	f001 fa5b 	bl	8002b74 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80016be:	bf00      	nop
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	bf00      	nop
 80016c4:	200000ac 	.word	0x200000ac

080016c8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80016c8:	b480      	push	{r7}
 80016ca:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016cc:	bf00      	nop
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bc80      	pop	{r7}
 80016d2:	4770      	bx	lr

080016d4 <updateClockBuffer>:
int second=0;
int index_led=0;
int led_buffer[2] = {0 , 0};

void updateClockBuffer ()
  {
 80016d4:	b480      	push	{r7}
 80016d6:	b083      	sub	sp, #12
 80016d8:	af00      	add	r7, sp, #0
	  int second_tens=second/10;
 80016da:	4b11      	ldr	r3, [pc, #68]	; (8001720 <updateClockBuffer+0x4c>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	4a11      	ldr	r2, [pc, #68]	; (8001724 <updateClockBuffer+0x50>)
 80016e0:	fb82 1203 	smull	r1, r2, r2, r3
 80016e4:	1092      	asrs	r2, r2, #2
 80016e6:	17db      	asrs	r3, r3, #31
 80016e8:	1ad3      	subs	r3, r2, r3
 80016ea:	607b      	str	r3, [r7, #4]
	  int second_ones=second%10;
 80016ec:	4b0c      	ldr	r3, [pc, #48]	; (8001720 <updateClockBuffer+0x4c>)
 80016ee:	681a      	ldr	r2, [r3, #0]
 80016f0:	4b0c      	ldr	r3, [pc, #48]	; (8001724 <updateClockBuffer+0x50>)
 80016f2:	fb83 1302 	smull	r1, r3, r3, r2
 80016f6:	1099      	asrs	r1, r3, #2
 80016f8:	17d3      	asrs	r3, r2, #31
 80016fa:	1ac9      	subs	r1, r1, r3
 80016fc:	460b      	mov	r3, r1
 80016fe:	009b      	lsls	r3, r3, #2
 8001700:	440b      	add	r3, r1
 8001702:	005b      	lsls	r3, r3, #1
 8001704:	1ad3      	subs	r3, r2, r3
 8001706:	603b      	str	r3, [r7, #0]

	  led_buffer[0] = second_tens;
 8001708:	4a07      	ldr	r2, [pc, #28]	; (8001728 <updateClockBuffer+0x54>)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	6013      	str	r3, [r2, #0]
	  led_buffer[1] = second_ones;
 800170e:	4a06      	ldr	r2, [pc, #24]	; (8001728 <updateClockBuffer+0x54>)
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	6053      	str	r3, [r2, #4]
  }
 8001714:	bf00      	nop
 8001716:	370c      	adds	r7, #12
 8001718:	46bd      	mov	sp, r7
 800171a:	bc80      	pop	{r7}
 800171c:	4770      	bx	lr
 800171e:	bf00      	nop
 8001720:	20000124 	.word	0x20000124
 8001724:	66666667 	.word	0x66666667
 8001728:	2000012c 	.word	0x2000012c

0800172c <display_traffic1>:

void display_traffic1()
{
 800172c:	b580      	push	{r7, lr}
 800172e:	af00      	add	r7, sp, #0
	switch (status3)
 8001730:	4b7d      	ldr	r3, [pc, #500]	; (8001928 <display_traffic1+0x1fc>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	2b03      	cmp	r3, #3
 8001736:	f200 80ee 	bhi.w	8001916 <display_traffic1+0x1ea>
 800173a:	a201      	add	r2, pc, #4	; (adr r2, 8001740 <display_traffic1+0x14>)
 800173c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001740:	08001751 	.word	0x08001751
 8001744:	0800177d 	.word	0x0800177d
 8001748:	08001807 	.word	0x08001807
 800174c:	0800188f 	.word	0x0800188f
	{
	case INIT :
	second=timer1/100;
 8001750:	4b76      	ldr	r3, [pc, #472]	; (800192c <display_traffic1+0x200>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	4a76      	ldr	r2, [pc, #472]	; (8001930 <display_traffic1+0x204>)
 8001756:	fb82 1203 	smull	r1, r2, r2, r3
 800175a:	1152      	asrs	r2, r2, #5
 800175c:	17db      	asrs	r3, r3, #31
 800175e:	1ad3      	subs	r3, r2, r3
 8001760:	4a74      	ldr	r2, [pc, #464]	; (8001934 <display_traffic1+0x208>)
 8001762:	6013      	str	r3, [r2, #0]
	updateClockBuffer ();
 8001764:	f7ff ffb6 	bl	80016d4 <updateClockBuffer>
    status3=auto_red;
 8001768:	4b6f      	ldr	r3, [pc, #444]	; (8001928 <display_traffic1+0x1fc>)
 800176a:	2201      	movs	r2, #1
 800176c:	601a      	str	r2, [r3, #0]
    settimer3(50);
 800176e:	2032      	movs	r0, #50	; 0x32
 8001770:	f7ff fe64 	bl	800143c <settimer3>
    settimer4(100);
 8001774:	2064      	movs	r0, #100	; 0x64
 8001776:	f7ff fe75 	bl	8001464 <settimer4>
		break;
 800177a:	e0d3      	b.n	8001924 <display_traffic1+0x1f8>
	case auto_red :
		if (timer3_flag==1)
 800177c:	4b6e      	ldr	r3, [pc, #440]	; (8001938 <display_traffic1+0x20c>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	2b01      	cmp	r3, #1
 8001782:	d11f      	bne.n	80017c4 <display_traffic1+0x98>
		{
			settimer3 (50) ;
 8001784:	2032      	movs	r0, #50	; 0x32
 8001786:	f7ff fe59 	bl	800143c <settimer3>
		    if( index_led < 2 )
 800178a:	4b6c      	ldr	r3, [pc, #432]	; (800193c <display_traffic1+0x210>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	2b01      	cmp	r3, #1
 8001790:	dc11      	bgt.n	80017b6 <display_traffic1+0x8a>
			{
			  update7SEGa ( index_led ) ;
 8001792:	4b6a      	ldr	r3, [pc, #424]	; (800193c <display_traffic1+0x210>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	4618      	mov	r0, r3
 8001798:	f7fe ff74 	bl	8000684 <update7SEGa>
			  display7SEGa ( led_buffer [ index_led ] ) ;
 800179c:	4b67      	ldr	r3, [pc, #412]	; (800193c <display_traffic1+0x210>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4a67      	ldr	r2, [pc, #412]	; (8001940 <display_traffic1+0x214>)
 80017a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017a6:	4618      	mov	r0, r3
 80017a8:	f7fe ff96 	bl	80006d8 <display7SEGa>
			  index_led ++ ;
 80017ac:	4b63      	ldr	r3, [pc, #396]	; (800193c <display_traffic1+0x210>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	3301      	adds	r3, #1
 80017b2:	4a62      	ldr	r2, [pc, #392]	; (800193c <display_traffic1+0x210>)
 80017b4:	6013      	str	r3, [r2, #0]
			}
			if( index_led >= 2 )
 80017b6:	4b61      	ldr	r3, [pc, #388]	; (800193c <display_traffic1+0x210>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	2b01      	cmp	r3, #1
 80017bc:	dd02      	ble.n	80017c4 <display_traffic1+0x98>
			{
			  index_led = 0;
 80017be:	4b5f      	ldr	r3, [pc, #380]	; (800193c <display_traffic1+0x210>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	601a      	str	r2, [r3, #0]
			}
		}
		if(timer4_flag==1)
 80017c4:	4b5f      	ldr	r3, [pc, #380]	; (8001944 <display_traffic1+0x218>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	2b01      	cmp	r3, #1
 80017ca:	f040 80a6 	bne.w	800191a <display_traffic1+0x1ee>
		{
			settimer4 (100) ;
 80017ce:	2064      	movs	r0, #100	; 0x64
 80017d0:	f7ff fe48 	bl	8001464 <settimer4>
			second -- ;
 80017d4:	4b57      	ldr	r3, [pc, #348]	; (8001934 <display_traffic1+0x208>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	3b01      	subs	r3, #1
 80017da:	4a56      	ldr	r2, [pc, #344]	; (8001934 <display_traffic1+0x208>)
 80017dc:	6013      	str	r3, [r2, #0]
			if(second <= 0 )
 80017de:	4b55      	ldr	r3, [pc, #340]	; (8001934 <display_traffic1+0x208>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	dc0c      	bgt.n	8001800 <display_traffic1+0xd4>
			{
				status3 = auto_green;
 80017e6:	4b50      	ldr	r3, [pc, #320]	; (8001928 <display_traffic1+0x1fc>)
 80017e8:	2202      	movs	r2, #2
 80017ea:	601a      	str	r2, [r3, #0]
				second = timer2/100;
 80017ec:	4b56      	ldr	r3, [pc, #344]	; (8001948 <display_traffic1+0x21c>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4a4f      	ldr	r2, [pc, #316]	; (8001930 <display_traffic1+0x204>)
 80017f2:	fb82 1203 	smull	r1, r2, r2, r3
 80017f6:	1152      	asrs	r2, r2, #5
 80017f8:	17db      	asrs	r3, r3, #31
 80017fa:	1ad3      	subs	r3, r2, r3
 80017fc:	4a4d      	ldr	r2, [pc, #308]	; (8001934 <display_traffic1+0x208>)
 80017fe:	6013      	str	r3, [r2, #0]
			}
		   updateClockBuffer () ;
 8001800:	f7ff ff68 	bl	80016d4 <updateClockBuffer>
		}
		break ;
 8001804:	e089      	b.n	800191a <display_traffic1+0x1ee>
	case auto_green :
		if (timer3_flag==1)
 8001806:	4b4c      	ldr	r3, [pc, #304]	; (8001938 <display_traffic1+0x20c>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	2b01      	cmp	r3, #1
 800180c:	d11f      	bne.n	800184e <display_traffic1+0x122>
		{
			settimer3 (50) ;
 800180e:	2032      	movs	r0, #50	; 0x32
 8001810:	f7ff fe14 	bl	800143c <settimer3>
		    if( index_led < 2 )
 8001814:	4b49      	ldr	r3, [pc, #292]	; (800193c <display_traffic1+0x210>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	2b01      	cmp	r3, #1
 800181a:	dc11      	bgt.n	8001840 <display_traffic1+0x114>
			{
			  update7SEGa ( index_led ) ;
 800181c:	4b47      	ldr	r3, [pc, #284]	; (800193c <display_traffic1+0x210>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4618      	mov	r0, r3
 8001822:	f7fe ff2f 	bl	8000684 <update7SEGa>
			  display7SEGa ( led_buffer [ index_led ] ) ;
 8001826:	4b45      	ldr	r3, [pc, #276]	; (800193c <display_traffic1+0x210>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	4a45      	ldr	r2, [pc, #276]	; (8001940 <display_traffic1+0x214>)
 800182c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001830:	4618      	mov	r0, r3
 8001832:	f7fe ff51 	bl	80006d8 <display7SEGa>
			  index_led ++ ;
 8001836:	4b41      	ldr	r3, [pc, #260]	; (800193c <display_traffic1+0x210>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	3301      	adds	r3, #1
 800183c:	4a3f      	ldr	r2, [pc, #252]	; (800193c <display_traffic1+0x210>)
 800183e:	6013      	str	r3, [r2, #0]
			}
			if( index_led >= 2 )
 8001840:	4b3e      	ldr	r3, [pc, #248]	; (800193c <display_traffic1+0x210>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	2b01      	cmp	r3, #1
 8001846:	dd02      	ble.n	800184e <display_traffic1+0x122>
			{
			  index_led = 0;
 8001848:	4b3c      	ldr	r3, [pc, #240]	; (800193c <display_traffic1+0x210>)
 800184a:	2200      	movs	r2, #0
 800184c:	601a      	str	r2, [r3, #0]
			}
		}
		if(timer4_flag==1)
 800184e:	4b3d      	ldr	r3, [pc, #244]	; (8001944 <display_traffic1+0x218>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	2b01      	cmp	r3, #1
 8001854:	d163      	bne.n	800191e <display_traffic1+0x1f2>
		{
			settimer4 (100) ;
 8001856:	2064      	movs	r0, #100	; 0x64
 8001858:	f7ff fe04 	bl	8001464 <settimer4>
			second -- ;
 800185c:	4b35      	ldr	r3, [pc, #212]	; (8001934 <display_traffic1+0x208>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	3b01      	subs	r3, #1
 8001862:	4a34      	ldr	r2, [pc, #208]	; (8001934 <display_traffic1+0x208>)
 8001864:	6013      	str	r3, [r2, #0]
			if(second <= 0 )
 8001866:	4b33      	ldr	r3, [pc, #204]	; (8001934 <display_traffic1+0x208>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	2b00      	cmp	r3, #0
 800186c:	dc0c      	bgt.n	8001888 <display_traffic1+0x15c>
			{
				status3 = auto_yellow;
 800186e:	4b2e      	ldr	r3, [pc, #184]	; (8001928 <display_traffic1+0x1fc>)
 8001870:	2203      	movs	r2, #3
 8001872:	601a      	str	r2, [r3, #0]
				second = timer3/100;
 8001874:	4b35      	ldr	r3, [pc, #212]	; (800194c <display_traffic1+0x220>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4a2d      	ldr	r2, [pc, #180]	; (8001930 <display_traffic1+0x204>)
 800187a:	fb82 1203 	smull	r1, r2, r2, r3
 800187e:	1152      	asrs	r2, r2, #5
 8001880:	17db      	asrs	r3, r3, #31
 8001882:	1ad3      	subs	r3, r2, r3
 8001884:	4a2b      	ldr	r2, [pc, #172]	; (8001934 <display_traffic1+0x208>)
 8001886:	6013      	str	r3, [r2, #0]
			}
		   updateClockBuffer () ;
 8001888:	f7ff ff24 	bl	80016d4 <updateClockBuffer>
		}
		break;
 800188c:	e047      	b.n	800191e <display_traffic1+0x1f2>
	case auto_yellow :
		if (timer3_flag==1)
 800188e:	4b2a      	ldr	r3, [pc, #168]	; (8001938 <display_traffic1+0x20c>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	2b01      	cmp	r3, #1
 8001894:	d11f      	bne.n	80018d6 <display_traffic1+0x1aa>
		{
			settimer3 (50) ;
 8001896:	2032      	movs	r0, #50	; 0x32
 8001898:	f7ff fdd0 	bl	800143c <settimer3>
		    if( index_led < 2 )
 800189c:	4b27      	ldr	r3, [pc, #156]	; (800193c <display_traffic1+0x210>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	2b01      	cmp	r3, #1
 80018a2:	dc11      	bgt.n	80018c8 <display_traffic1+0x19c>
			{
			  update7SEGa ( index_led ) ;
 80018a4:	4b25      	ldr	r3, [pc, #148]	; (800193c <display_traffic1+0x210>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4618      	mov	r0, r3
 80018aa:	f7fe feeb 	bl	8000684 <update7SEGa>
			  display7SEGa ( led_buffer [ index_led ] ) ;
 80018ae:	4b23      	ldr	r3, [pc, #140]	; (800193c <display_traffic1+0x210>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	4a23      	ldr	r2, [pc, #140]	; (8001940 <display_traffic1+0x214>)
 80018b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018b8:	4618      	mov	r0, r3
 80018ba:	f7fe ff0d 	bl	80006d8 <display7SEGa>
			  index_led ++ ;
 80018be:	4b1f      	ldr	r3, [pc, #124]	; (800193c <display_traffic1+0x210>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	3301      	adds	r3, #1
 80018c4:	4a1d      	ldr	r2, [pc, #116]	; (800193c <display_traffic1+0x210>)
 80018c6:	6013      	str	r3, [r2, #0]
			}
			if( index_led >= 2 )
 80018c8:	4b1c      	ldr	r3, [pc, #112]	; (800193c <display_traffic1+0x210>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	2b01      	cmp	r3, #1
 80018ce:	dd02      	ble.n	80018d6 <display_traffic1+0x1aa>
			{
			  index_led = 0;
 80018d0:	4b1a      	ldr	r3, [pc, #104]	; (800193c <display_traffic1+0x210>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	601a      	str	r2, [r3, #0]
			}
		}
		if(timer4_flag==1)
 80018d6:	4b1b      	ldr	r3, [pc, #108]	; (8001944 <display_traffic1+0x218>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	2b01      	cmp	r3, #1
 80018dc:	d121      	bne.n	8001922 <display_traffic1+0x1f6>
		{
			settimer4 (100) ;
 80018de:	2064      	movs	r0, #100	; 0x64
 80018e0:	f7ff fdc0 	bl	8001464 <settimer4>
			second -- ;
 80018e4:	4b13      	ldr	r3, [pc, #76]	; (8001934 <display_traffic1+0x208>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	3b01      	subs	r3, #1
 80018ea:	4a12      	ldr	r2, [pc, #72]	; (8001934 <display_traffic1+0x208>)
 80018ec:	6013      	str	r3, [r2, #0]
			if(second <= 0 )
 80018ee:	4b11      	ldr	r3, [pc, #68]	; (8001934 <display_traffic1+0x208>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	dc0c      	bgt.n	8001910 <display_traffic1+0x1e4>
			{
				status3 = auto_red;
 80018f6:	4b0c      	ldr	r3, [pc, #48]	; (8001928 <display_traffic1+0x1fc>)
 80018f8:	2201      	movs	r2, #1
 80018fa:	601a      	str	r2, [r3, #0]
				second = timer1/100;
 80018fc:	4b0b      	ldr	r3, [pc, #44]	; (800192c <display_traffic1+0x200>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4a0b      	ldr	r2, [pc, #44]	; (8001930 <display_traffic1+0x204>)
 8001902:	fb82 1203 	smull	r1, r2, r2, r3
 8001906:	1152      	asrs	r2, r2, #5
 8001908:	17db      	asrs	r3, r3, #31
 800190a:	1ad3      	subs	r3, r2, r3
 800190c:	4a09      	ldr	r2, [pc, #36]	; (8001934 <display_traffic1+0x208>)
 800190e:	6013      	str	r3, [r2, #0]
			}
		   updateClockBuffer () ;
 8001910:	f7ff fee0 	bl	80016d4 <updateClockBuffer>
		}
		break ;
 8001914:	e005      	b.n	8001922 <display_traffic1+0x1f6>
	default : break ;
 8001916:	bf00      	nop
 8001918:	e004      	b.n	8001924 <display_traffic1+0x1f8>
		break ;
 800191a:	bf00      	nop
 800191c:	e002      	b.n	8001924 <display_traffic1+0x1f8>
		break;
 800191e:	bf00      	nop
 8001920:	e000      	b.n	8001924 <display_traffic1+0x1f8>
		break ;
 8001922:	bf00      	nop
	}
}
 8001924:	bf00      	nop
 8001926:	bd80      	pop	{r7, pc}
 8001928:	200000a4 	.word	0x200000a4
 800192c:	2000004c 	.word	0x2000004c
 8001930:	51eb851f 	.word	0x51eb851f
 8001934:	20000124 	.word	0x20000124
 8001938:	20000108 	.word	0x20000108
 800193c:	20000128 	.word	0x20000128
 8001940:	2000012c 	.word	0x2000012c
 8001944:	20000110 	.word	0x20000110
 8001948:	20000050 	.word	0x20000050
 800194c:	20000054 	.word	0x20000054

08001950 <updateClockBuffer2>:
int second2=0;
int index_led2=0;
int led_buffer2[2] = {0 , 0};

void updateClockBuffer2 ()
  {
 8001950:	b480      	push	{r7}
 8001952:	b083      	sub	sp, #12
 8001954:	af00      	add	r7, sp, #0
	  int second_tens=second2/10;
 8001956:	4b11      	ldr	r3, [pc, #68]	; (800199c <updateClockBuffer2+0x4c>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	4a11      	ldr	r2, [pc, #68]	; (80019a0 <updateClockBuffer2+0x50>)
 800195c:	fb82 1203 	smull	r1, r2, r2, r3
 8001960:	1092      	asrs	r2, r2, #2
 8001962:	17db      	asrs	r3, r3, #31
 8001964:	1ad3      	subs	r3, r2, r3
 8001966:	607b      	str	r3, [r7, #4]
	  int second_ones=second2%10;
 8001968:	4b0c      	ldr	r3, [pc, #48]	; (800199c <updateClockBuffer2+0x4c>)
 800196a:	681a      	ldr	r2, [r3, #0]
 800196c:	4b0c      	ldr	r3, [pc, #48]	; (80019a0 <updateClockBuffer2+0x50>)
 800196e:	fb83 1302 	smull	r1, r3, r3, r2
 8001972:	1099      	asrs	r1, r3, #2
 8001974:	17d3      	asrs	r3, r2, #31
 8001976:	1ac9      	subs	r1, r1, r3
 8001978:	460b      	mov	r3, r1
 800197a:	009b      	lsls	r3, r3, #2
 800197c:	440b      	add	r3, r1
 800197e:	005b      	lsls	r3, r3, #1
 8001980:	1ad3      	subs	r3, r2, r3
 8001982:	603b      	str	r3, [r7, #0]

	  led_buffer2[0] = second_tens;
 8001984:	4a07      	ldr	r2, [pc, #28]	; (80019a4 <updateClockBuffer2+0x54>)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	6013      	str	r3, [r2, #0]
	  led_buffer2[1] = second_ones;
 800198a:	4a06      	ldr	r2, [pc, #24]	; (80019a4 <updateClockBuffer2+0x54>)
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	6053      	str	r3, [r2, #4]
  }
 8001990:	bf00      	nop
 8001992:	370c      	adds	r7, #12
 8001994:	46bd      	mov	sp, r7
 8001996:	bc80      	pop	{r7}
 8001998:	4770      	bx	lr
 800199a:	bf00      	nop
 800199c:	20000134 	.word	0x20000134
 80019a0:	66666667 	.word	0x66666667
 80019a4:	2000013c 	.word	0x2000013c

080019a8 <display_traffic2>:

void display_traffic2()
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	af00      	add	r7, sp, #0
	switch (status4)
 80019ac:	4b7d      	ldr	r3, [pc, #500]	; (8001ba4 <display_traffic2+0x1fc>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	2b03      	cmp	r3, #3
 80019b2:	f200 80ee 	bhi.w	8001b92 <display_traffic2+0x1ea>
 80019b6:	a201      	add	r2, pc, #4	; (adr r2, 80019bc <display_traffic2+0x14>)
 80019b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019bc:	080019cd 	.word	0x080019cd
 80019c0:	080019f9 	.word	0x080019f9
 80019c4:	08001a83 	.word	0x08001a83
 80019c8:	08001b0b 	.word	0x08001b0b
	{
	case INIT :
	second2=timer2/100;
 80019cc:	4b76      	ldr	r3, [pc, #472]	; (8001ba8 <display_traffic2+0x200>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4a76      	ldr	r2, [pc, #472]	; (8001bac <display_traffic2+0x204>)
 80019d2:	fb82 1203 	smull	r1, r2, r2, r3
 80019d6:	1152      	asrs	r2, r2, #5
 80019d8:	17db      	asrs	r3, r3, #31
 80019da:	1ad3      	subs	r3, r2, r3
 80019dc:	4a74      	ldr	r2, [pc, #464]	; (8001bb0 <display_traffic2+0x208>)
 80019de:	6013      	str	r3, [r2, #0]
	updateClockBuffer2 ();
 80019e0:	f7ff ffb6 	bl	8001950 <updateClockBuffer2>
    status4=auto_green;
 80019e4:	4b6f      	ldr	r3, [pc, #444]	; (8001ba4 <display_traffic2+0x1fc>)
 80019e6:	2202      	movs	r2, #2
 80019e8:	601a      	str	r2, [r3, #0]
    settimer5(50);
 80019ea:	2032      	movs	r0, #50	; 0x32
 80019ec:	f7ff fd4e 	bl	800148c <settimer5>
    settimer6(100);
 80019f0:	2064      	movs	r0, #100	; 0x64
 80019f2:	f7ff fd5f 	bl	80014b4 <settimer6>
		break;
 80019f6:	e0d3      	b.n	8001ba0 <display_traffic2+0x1f8>
	case auto_red :
		if (timer5_flag==1)
 80019f8:	4b6e      	ldr	r3, [pc, #440]	; (8001bb4 <display_traffic2+0x20c>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	2b01      	cmp	r3, #1
 80019fe:	d11f      	bne.n	8001a40 <display_traffic2+0x98>
		{
			settimer5 (50) ;
 8001a00:	2032      	movs	r0, #50	; 0x32
 8001a02:	f7ff fd43 	bl	800148c <settimer5>
		    if( index_led2 < 2 )
 8001a06:	4b6c      	ldr	r3, [pc, #432]	; (8001bb8 <display_traffic2+0x210>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	2b01      	cmp	r3, #1
 8001a0c:	dc11      	bgt.n	8001a32 <display_traffic2+0x8a>
			{
			  update7SEGb ( index_led2 ) ;
 8001a0e:	4b6a      	ldr	r3, [pc, #424]	; (8001bb8 <display_traffic2+0x210>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4618      	mov	r0, r3
 8001a14:	f7fe fff0 	bl	80009f8 <update7SEGb>
			  display7SEGb ( led_buffer2 [ index_led2 ] ) ;
 8001a18:	4b67      	ldr	r3, [pc, #412]	; (8001bb8 <display_traffic2+0x210>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4a67      	ldr	r2, [pc, #412]	; (8001bbc <display_traffic2+0x214>)
 8001a1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a22:	4618      	mov	r0, r3
 8001a24:	f7ff f814 	bl	8000a50 <display7SEGb>
			  index_led2 ++ ;
 8001a28:	4b63      	ldr	r3, [pc, #396]	; (8001bb8 <display_traffic2+0x210>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	3301      	adds	r3, #1
 8001a2e:	4a62      	ldr	r2, [pc, #392]	; (8001bb8 <display_traffic2+0x210>)
 8001a30:	6013      	str	r3, [r2, #0]
			}
			if( index_led2 >= 2 )
 8001a32:	4b61      	ldr	r3, [pc, #388]	; (8001bb8 <display_traffic2+0x210>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	2b01      	cmp	r3, #1
 8001a38:	dd02      	ble.n	8001a40 <display_traffic2+0x98>
			{
			  index_led2 = 0;
 8001a3a:	4b5f      	ldr	r3, [pc, #380]	; (8001bb8 <display_traffic2+0x210>)
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	601a      	str	r2, [r3, #0]
			}
		}
		if(timer6_flag==1)
 8001a40:	4b5f      	ldr	r3, [pc, #380]	; (8001bc0 <display_traffic2+0x218>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	2b01      	cmp	r3, #1
 8001a46:	f040 80a6 	bne.w	8001b96 <display_traffic2+0x1ee>
		{
			settimer6 (100) ;
 8001a4a:	2064      	movs	r0, #100	; 0x64
 8001a4c:	f7ff fd32 	bl	80014b4 <settimer6>
			second2 -- ;
 8001a50:	4b57      	ldr	r3, [pc, #348]	; (8001bb0 <display_traffic2+0x208>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	3b01      	subs	r3, #1
 8001a56:	4a56      	ldr	r2, [pc, #344]	; (8001bb0 <display_traffic2+0x208>)
 8001a58:	6013      	str	r3, [r2, #0]
			if(second2 <= 0 )
 8001a5a:	4b55      	ldr	r3, [pc, #340]	; (8001bb0 <display_traffic2+0x208>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	dc0c      	bgt.n	8001a7c <display_traffic2+0xd4>
			{
				status4 = auto_green;
 8001a62:	4b50      	ldr	r3, [pc, #320]	; (8001ba4 <display_traffic2+0x1fc>)
 8001a64:	2202      	movs	r2, #2
 8001a66:	601a      	str	r2, [r3, #0]
				second2 = timer2/100;
 8001a68:	4b4f      	ldr	r3, [pc, #316]	; (8001ba8 <display_traffic2+0x200>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4a4f      	ldr	r2, [pc, #316]	; (8001bac <display_traffic2+0x204>)
 8001a6e:	fb82 1203 	smull	r1, r2, r2, r3
 8001a72:	1152      	asrs	r2, r2, #5
 8001a74:	17db      	asrs	r3, r3, #31
 8001a76:	1ad3      	subs	r3, r2, r3
 8001a78:	4a4d      	ldr	r2, [pc, #308]	; (8001bb0 <display_traffic2+0x208>)
 8001a7a:	6013      	str	r3, [r2, #0]
			}
		   updateClockBuffer2 () ;
 8001a7c:	f7ff ff68 	bl	8001950 <updateClockBuffer2>
		}
		break ;
 8001a80:	e089      	b.n	8001b96 <display_traffic2+0x1ee>
	case auto_green :
		if (timer5_flag==1)
 8001a82:	4b4c      	ldr	r3, [pc, #304]	; (8001bb4 <display_traffic2+0x20c>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	2b01      	cmp	r3, #1
 8001a88:	d11f      	bne.n	8001aca <display_traffic2+0x122>
		{
			settimer5 (50) ;
 8001a8a:	2032      	movs	r0, #50	; 0x32
 8001a8c:	f7ff fcfe 	bl	800148c <settimer5>
		    if( index_led2 < 2 )
 8001a90:	4b49      	ldr	r3, [pc, #292]	; (8001bb8 <display_traffic2+0x210>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	2b01      	cmp	r3, #1
 8001a96:	dc11      	bgt.n	8001abc <display_traffic2+0x114>
			{
			  update7SEGb ( index_led2 ) ;
 8001a98:	4b47      	ldr	r3, [pc, #284]	; (8001bb8 <display_traffic2+0x210>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	f7fe ffab 	bl	80009f8 <update7SEGb>
			  display7SEGb ( led_buffer2 [ index_led2 ] ) ;
 8001aa2:	4b45      	ldr	r3, [pc, #276]	; (8001bb8 <display_traffic2+0x210>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	4a45      	ldr	r2, [pc, #276]	; (8001bbc <display_traffic2+0x214>)
 8001aa8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001aac:	4618      	mov	r0, r3
 8001aae:	f7fe ffcf 	bl	8000a50 <display7SEGb>
			  index_led2 ++ ;
 8001ab2:	4b41      	ldr	r3, [pc, #260]	; (8001bb8 <display_traffic2+0x210>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	3301      	adds	r3, #1
 8001ab8:	4a3f      	ldr	r2, [pc, #252]	; (8001bb8 <display_traffic2+0x210>)
 8001aba:	6013      	str	r3, [r2, #0]
			}
			if( index_led2 >= 2 )
 8001abc:	4b3e      	ldr	r3, [pc, #248]	; (8001bb8 <display_traffic2+0x210>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	2b01      	cmp	r3, #1
 8001ac2:	dd02      	ble.n	8001aca <display_traffic2+0x122>
			{
			  index_led2 = 0;
 8001ac4:	4b3c      	ldr	r3, [pc, #240]	; (8001bb8 <display_traffic2+0x210>)
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	601a      	str	r2, [r3, #0]
			}
		}
		if(timer6_flag==1)
 8001aca:	4b3d      	ldr	r3, [pc, #244]	; (8001bc0 <display_traffic2+0x218>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	2b01      	cmp	r3, #1
 8001ad0:	d163      	bne.n	8001b9a <display_traffic2+0x1f2>
		{
			settimer6 (100) ;
 8001ad2:	2064      	movs	r0, #100	; 0x64
 8001ad4:	f7ff fcee 	bl	80014b4 <settimer6>
			second2 -- ;
 8001ad8:	4b35      	ldr	r3, [pc, #212]	; (8001bb0 <display_traffic2+0x208>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	3b01      	subs	r3, #1
 8001ade:	4a34      	ldr	r2, [pc, #208]	; (8001bb0 <display_traffic2+0x208>)
 8001ae0:	6013      	str	r3, [r2, #0]
			if(second2 <= 0 )
 8001ae2:	4b33      	ldr	r3, [pc, #204]	; (8001bb0 <display_traffic2+0x208>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	dc0c      	bgt.n	8001b04 <display_traffic2+0x15c>
			{
				status4 = auto_yellow;
 8001aea:	4b2e      	ldr	r3, [pc, #184]	; (8001ba4 <display_traffic2+0x1fc>)
 8001aec:	2203      	movs	r2, #3
 8001aee:	601a      	str	r2, [r3, #0]
				second2 = timer3/100;
 8001af0:	4b34      	ldr	r3, [pc, #208]	; (8001bc4 <display_traffic2+0x21c>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4a2d      	ldr	r2, [pc, #180]	; (8001bac <display_traffic2+0x204>)
 8001af6:	fb82 1203 	smull	r1, r2, r2, r3
 8001afa:	1152      	asrs	r2, r2, #5
 8001afc:	17db      	asrs	r3, r3, #31
 8001afe:	1ad3      	subs	r3, r2, r3
 8001b00:	4a2b      	ldr	r2, [pc, #172]	; (8001bb0 <display_traffic2+0x208>)
 8001b02:	6013      	str	r3, [r2, #0]
			}
		   updateClockBuffer2 () ;
 8001b04:	f7ff ff24 	bl	8001950 <updateClockBuffer2>
		}
		break;
 8001b08:	e047      	b.n	8001b9a <display_traffic2+0x1f2>
	case auto_yellow :
		if (timer5_flag==1)
 8001b0a:	4b2a      	ldr	r3, [pc, #168]	; (8001bb4 <display_traffic2+0x20c>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	2b01      	cmp	r3, #1
 8001b10:	d11f      	bne.n	8001b52 <display_traffic2+0x1aa>
		{
			settimer5 (50) ;
 8001b12:	2032      	movs	r0, #50	; 0x32
 8001b14:	f7ff fcba 	bl	800148c <settimer5>
		    if( index_led2 < 2 )
 8001b18:	4b27      	ldr	r3, [pc, #156]	; (8001bb8 <display_traffic2+0x210>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	2b01      	cmp	r3, #1
 8001b1e:	dc11      	bgt.n	8001b44 <display_traffic2+0x19c>
			{
			  update7SEGb ( index_led2 ) ;
 8001b20:	4b25      	ldr	r3, [pc, #148]	; (8001bb8 <display_traffic2+0x210>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4618      	mov	r0, r3
 8001b26:	f7fe ff67 	bl	80009f8 <update7SEGb>
			  display7SEGb ( led_buffer2 [ index_led2 ] ) ;
 8001b2a:	4b23      	ldr	r3, [pc, #140]	; (8001bb8 <display_traffic2+0x210>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	4a23      	ldr	r2, [pc, #140]	; (8001bbc <display_traffic2+0x214>)
 8001b30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b34:	4618      	mov	r0, r3
 8001b36:	f7fe ff8b 	bl	8000a50 <display7SEGb>
			  index_led2 ++ ;
 8001b3a:	4b1f      	ldr	r3, [pc, #124]	; (8001bb8 <display_traffic2+0x210>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	3301      	adds	r3, #1
 8001b40:	4a1d      	ldr	r2, [pc, #116]	; (8001bb8 <display_traffic2+0x210>)
 8001b42:	6013      	str	r3, [r2, #0]
			}
			if( index_led2 >= 2 )
 8001b44:	4b1c      	ldr	r3, [pc, #112]	; (8001bb8 <display_traffic2+0x210>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	2b01      	cmp	r3, #1
 8001b4a:	dd02      	ble.n	8001b52 <display_traffic2+0x1aa>
			{
			  index_led2 = 0;
 8001b4c:	4b1a      	ldr	r3, [pc, #104]	; (8001bb8 <display_traffic2+0x210>)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	601a      	str	r2, [r3, #0]
			}
		}
		if(timer6_flag==1)
 8001b52:	4b1b      	ldr	r3, [pc, #108]	; (8001bc0 <display_traffic2+0x218>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	2b01      	cmp	r3, #1
 8001b58:	d121      	bne.n	8001b9e <display_traffic2+0x1f6>
		{
			settimer6 (100) ;
 8001b5a:	2064      	movs	r0, #100	; 0x64
 8001b5c:	f7ff fcaa 	bl	80014b4 <settimer6>
			second2 -- ;
 8001b60:	4b13      	ldr	r3, [pc, #76]	; (8001bb0 <display_traffic2+0x208>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	3b01      	subs	r3, #1
 8001b66:	4a12      	ldr	r2, [pc, #72]	; (8001bb0 <display_traffic2+0x208>)
 8001b68:	6013      	str	r3, [r2, #0]
			if(second2 <= 0 )
 8001b6a:	4b11      	ldr	r3, [pc, #68]	; (8001bb0 <display_traffic2+0x208>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	dc0c      	bgt.n	8001b8c <display_traffic2+0x1e4>
			{
				status4 = auto_red;
 8001b72:	4b0c      	ldr	r3, [pc, #48]	; (8001ba4 <display_traffic2+0x1fc>)
 8001b74:	2201      	movs	r2, #1
 8001b76:	601a      	str	r2, [r3, #0]
				second2 = timer1/100;
 8001b78:	4b13      	ldr	r3, [pc, #76]	; (8001bc8 <display_traffic2+0x220>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a0b      	ldr	r2, [pc, #44]	; (8001bac <display_traffic2+0x204>)
 8001b7e:	fb82 1203 	smull	r1, r2, r2, r3
 8001b82:	1152      	asrs	r2, r2, #5
 8001b84:	17db      	asrs	r3, r3, #31
 8001b86:	1ad3      	subs	r3, r2, r3
 8001b88:	4a09      	ldr	r2, [pc, #36]	; (8001bb0 <display_traffic2+0x208>)
 8001b8a:	6013      	str	r3, [r2, #0]
			}
		   updateClockBuffer2 () ;
 8001b8c:	f7ff fee0 	bl	8001950 <updateClockBuffer2>
		}
		break ;
 8001b90:	e005      	b.n	8001b9e <display_traffic2+0x1f6>
	default : break ;
 8001b92:	bf00      	nop
 8001b94:	e004      	b.n	8001ba0 <display_traffic2+0x1f8>
		break ;
 8001b96:	bf00      	nop
 8001b98:	e002      	b.n	8001ba0 <display_traffic2+0x1f8>
		break;
 8001b9a:	bf00      	nop
 8001b9c:	e000      	b.n	8001ba0 <display_traffic2+0x1f8>
		break ;
 8001b9e:	bf00      	nop
	}
}
 8001ba0:	bf00      	nop
 8001ba2:	bd80      	pop	{r7, pc}
 8001ba4:	200000a8 	.word	0x200000a8
 8001ba8:	20000050 	.word	0x20000050
 8001bac:	51eb851f 	.word	0x51eb851f
 8001bb0:	20000134 	.word	0x20000134
 8001bb4:	20000118 	.word	0x20000118
 8001bb8:	20000138 	.word	0x20000138
 8001bbc:	2000013c 	.word	0x2000013c
 8001bc0:	20000120 	.word	0x20000120
 8001bc4:	20000054 	.word	0x20000054
 8001bc8:	2000004c 	.word	0x2000004c

08001bcc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001bcc:	f7ff fd7c 	bl	80016c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001bd0:	480b      	ldr	r0, [pc, #44]	; (8001c00 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001bd2:	490c      	ldr	r1, [pc, #48]	; (8001c04 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001bd4:	4a0c      	ldr	r2, [pc, #48]	; (8001c08 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001bd6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001bd8:	e002      	b.n	8001be0 <LoopCopyDataInit>

08001bda <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bda:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001bdc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bde:	3304      	adds	r3, #4

08001be0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001be0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001be2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001be4:	d3f9      	bcc.n	8001bda <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001be6:	4a09      	ldr	r2, [pc, #36]	; (8001c0c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001be8:	4c09      	ldr	r4, [pc, #36]	; (8001c10 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001bea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001bec:	e001      	b.n	8001bf2 <LoopFillZerobss>

08001bee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001bf0:	3204      	adds	r2, #4

08001bf2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bf2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001bf4:	d3fb      	bcc.n	8001bee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001bf6:	f001 fb11 	bl	800321c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001bfa:	f7ff fac7 	bl	800118c <main>
  bx lr
 8001bfe:	4770      	bx	lr
  ldr r0, =_sdata
 8001c00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c04:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8001c08:	080032a8 	.word	0x080032a8
  ldr r2, =_sbss
 8001c0c:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8001c10:	20000148 	.word	0x20000148

08001c14 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001c14:	e7fe      	b.n	8001c14 <ADC1_2_IRQHandler>
	...

08001c18 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c1c:	4b08      	ldr	r3, [pc, #32]	; (8001c40 <HAL_Init+0x28>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4a07      	ldr	r2, [pc, #28]	; (8001c40 <HAL_Init+0x28>)
 8001c22:	f043 0310 	orr.w	r3, r3, #16
 8001c26:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c28:	2003      	movs	r0, #3
 8001c2a:	f000 f923 	bl	8001e74 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c2e:	200f      	movs	r0, #15
 8001c30:	f000 f808 	bl	8001c44 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c34:	f7ff fcd0 	bl	80015d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c38:	2300      	movs	r3, #0
}
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	bd80      	pop	{r7, pc}
 8001c3e:	bf00      	nop
 8001c40:	40022000 	.word	0x40022000

08001c44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b082      	sub	sp, #8
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c4c:	4b12      	ldr	r3, [pc, #72]	; (8001c98 <HAL_InitTick+0x54>)
 8001c4e:	681a      	ldr	r2, [r3, #0]
 8001c50:	4b12      	ldr	r3, [pc, #72]	; (8001c9c <HAL_InitTick+0x58>)
 8001c52:	781b      	ldrb	r3, [r3, #0]
 8001c54:	4619      	mov	r1, r3
 8001c56:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c5a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c62:	4618      	mov	r0, r3
 8001c64:	f000 f93b 	bl	8001ede <HAL_SYSTICK_Config>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d001      	beq.n	8001c72 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c6e:	2301      	movs	r3, #1
 8001c70:	e00e      	b.n	8001c90 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	2b0f      	cmp	r3, #15
 8001c76:	d80a      	bhi.n	8001c8e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c78:	2200      	movs	r2, #0
 8001c7a:	6879      	ldr	r1, [r7, #4]
 8001c7c:	f04f 30ff 	mov.w	r0, #4294967295
 8001c80:	f000 f903 	bl	8001e8a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c84:	4a06      	ldr	r2, [pc, #24]	; (8001ca0 <HAL_InitTick+0x5c>)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	e000      	b.n	8001c90 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c8e:	2301      	movs	r3, #1
}
 8001c90:	4618      	mov	r0, r3
 8001c92:	3708      	adds	r7, #8
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bd80      	pop	{r7, pc}
 8001c98:	20000058 	.word	0x20000058
 8001c9c:	20000060 	.word	0x20000060
 8001ca0:	2000005c 	.word	0x2000005c

08001ca4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ca8:	4b05      	ldr	r3, [pc, #20]	; (8001cc0 <HAL_IncTick+0x1c>)
 8001caa:	781b      	ldrb	r3, [r3, #0]
 8001cac:	461a      	mov	r2, r3
 8001cae:	4b05      	ldr	r3, [pc, #20]	; (8001cc4 <HAL_IncTick+0x20>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4413      	add	r3, r2
 8001cb4:	4a03      	ldr	r2, [pc, #12]	; (8001cc4 <HAL_IncTick+0x20>)
 8001cb6:	6013      	str	r3, [r2, #0]
}
 8001cb8:	bf00      	nop
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bc80      	pop	{r7}
 8001cbe:	4770      	bx	lr
 8001cc0:	20000060 	.word	0x20000060
 8001cc4:	20000144 	.word	0x20000144

08001cc8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	af00      	add	r7, sp, #0
  return uwTick;
 8001ccc:	4b02      	ldr	r3, [pc, #8]	; (8001cd8 <HAL_GetTick+0x10>)
 8001cce:	681b      	ldr	r3, [r3, #0]
}
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bc80      	pop	{r7}
 8001cd6:	4770      	bx	lr
 8001cd8:	20000144 	.word	0x20000144

08001cdc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b085      	sub	sp, #20
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	f003 0307 	and.w	r3, r3, #7
 8001cea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cec:	4b0c      	ldr	r3, [pc, #48]	; (8001d20 <__NVIC_SetPriorityGrouping+0x44>)
 8001cee:	68db      	ldr	r3, [r3, #12]
 8001cf0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cf2:	68ba      	ldr	r2, [r7, #8]
 8001cf4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001cf8:	4013      	ands	r3, r2
 8001cfa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d00:	68bb      	ldr	r3, [r7, #8]
 8001d02:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d04:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d0e:	4a04      	ldr	r2, [pc, #16]	; (8001d20 <__NVIC_SetPriorityGrouping+0x44>)
 8001d10:	68bb      	ldr	r3, [r7, #8]
 8001d12:	60d3      	str	r3, [r2, #12]
}
 8001d14:	bf00      	nop
 8001d16:	3714      	adds	r7, #20
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bc80      	pop	{r7}
 8001d1c:	4770      	bx	lr
 8001d1e:	bf00      	nop
 8001d20:	e000ed00 	.word	0xe000ed00

08001d24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d24:	b480      	push	{r7}
 8001d26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d28:	4b04      	ldr	r3, [pc, #16]	; (8001d3c <__NVIC_GetPriorityGrouping+0x18>)
 8001d2a:	68db      	ldr	r3, [r3, #12]
 8001d2c:	0a1b      	lsrs	r3, r3, #8
 8001d2e:	f003 0307 	and.w	r3, r3, #7
}
 8001d32:	4618      	mov	r0, r3
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bc80      	pop	{r7}
 8001d38:	4770      	bx	lr
 8001d3a:	bf00      	nop
 8001d3c:	e000ed00 	.word	0xe000ed00

08001d40 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d40:	b480      	push	{r7}
 8001d42:	b083      	sub	sp, #12
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	4603      	mov	r3, r0
 8001d48:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	db0b      	blt.n	8001d6a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d52:	79fb      	ldrb	r3, [r7, #7]
 8001d54:	f003 021f 	and.w	r2, r3, #31
 8001d58:	4906      	ldr	r1, [pc, #24]	; (8001d74 <__NVIC_EnableIRQ+0x34>)
 8001d5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d5e:	095b      	lsrs	r3, r3, #5
 8001d60:	2001      	movs	r0, #1
 8001d62:	fa00 f202 	lsl.w	r2, r0, r2
 8001d66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d6a:	bf00      	nop
 8001d6c:	370c      	adds	r7, #12
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bc80      	pop	{r7}
 8001d72:	4770      	bx	lr
 8001d74:	e000e100 	.word	0xe000e100

08001d78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	b083      	sub	sp, #12
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	4603      	mov	r3, r0
 8001d80:	6039      	str	r1, [r7, #0]
 8001d82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	db0a      	blt.n	8001da2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	b2da      	uxtb	r2, r3
 8001d90:	490c      	ldr	r1, [pc, #48]	; (8001dc4 <__NVIC_SetPriority+0x4c>)
 8001d92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d96:	0112      	lsls	r2, r2, #4
 8001d98:	b2d2      	uxtb	r2, r2
 8001d9a:	440b      	add	r3, r1
 8001d9c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001da0:	e00a      	b.n	8001db8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	b2da      	uxtb	r2, r3
 8001da6:	4908      	ldr	r1, [pc, #32]	; (8001dc8 <__NVIC_SetPriority+0x50>)
 8001da8:	79fb      	ldrb	r3, [r7, #7]
 8001daa:	f003 030f 	and.w	r3, r3, #15
 8001dae:	3b04      	subs	r3, #4
 8001db0:	0112      	lsls	r2, r2, #4
 8001db2:	b2d2      	uxtb	r2, r2
 8001db4:	440b      	add	r3, r1
 8001db6:	761a      	strb	r2, [r3, #24]
}
 8001db8:	bf00      	nop
 8001dba:	370c      	adds	r7, #12
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bc80      	pop	{r7}
 8001dc0:	4770      	bx	lr
 8001dc2:	bf00      	nop
 8001dc4:	e000e100 	.word	0xe000e100
 8001dc8:	e000ed00 	.word	0xe000ed00

08001dcc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	b089      	sub	sp, #36	; 0x24
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	60f8      	str	r0, [r7, #12]
 8001dd4:	60b9      	str	r1, [r7, #8]
 8001dd6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	f003 0307 	and.w	r3, r3, #7
 8001dde:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001de0:	69fb      	ldr	r3, [r7, #28]
 8001de2:	f1c3 0307 	rsb	r3, r3, #7
 8001de6:	2b04      	cmp	r3, #4
 8001de8:	bf28      	it	cs
 8001dea:	2304      	movcs	r3, #4
 8001dec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001dee:	69fb      	ldr	r3, [r7, #28]
 8001df0:	3304      	adds	r3, #4
 8001df2:	2b06      	cmp	r3, #6
 8001df4:	d902      	bls.n	8001dfc <NVIC_EncodePriority+0x30>
 8001df6:	69fb      	ldr	r3, [r7, #28]
 8001df8:	3b03      	subs	r3, #3
 8001dfa:	e000      	b.n	8001dfe <NVIC_EncodePriority+0x32>
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e00:	f04f 32ff 	mov.w	r2, #4294967295
 8001e04:	69bb      	ldr	r3, [r7, #24]
 8001e06:	fa02 f303 	lsl.w	r3, r2, r3
 8001e0a:	43da      	mvns	r2, r3
 8001e0c:	68bb      	ldr	r3, [r7, #8]
 8001e0e:	401a      	ands	r2, r3
 8001e10:	697b      	ldr	r3, [r7, #20]
 8001e12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e14:	f04f 31ff 	mov.w	r1, #4294967295
 8001e18:	697b      	ldr	r3, [r7, #20]
 8001e1a:	fa01 f303 	lsl.w	r3, r1, r3
 8001e1e:	43d9      	mvns	r1, r3
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e24:	4313      	orrs	r3, r2
         );
}
 8001e26:	4618      	mov	r0, r3
 8001e28:	3724      	adds	r7, #36	; 0x24
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bc80      	pop	{r7}
 8001e2e:	4770      	bx	lr

08001e30 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b082      	sub	sp, #8
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	3b01      	subs	r3, #1
 8001e3c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e40:	d301      	bcc.n	8001e46 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e42:	2301      	movs	r3, #1
 8001e44:	e00f      	b.n	8001e66 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e46:	4a0a      	ldr	r2, [pc, #40]	; (8001e70 <SysTick_Config+0x40>)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	3b01      	subs	r3, #1
 8001e4c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e4e:	210f      	movs	r1, #15
 8001e50:	f04f 30ff 	mov.w	r0, #4294967295
 8001e54:	f7ff ff90 	bl	8001d78 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e58:	4b05      	ldr	r3, [pc, #20]	; (8001e70 <SysTick_Config+0x40>)
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e5e:	4b04      	ldr	r3, [pc, #16]	; (8001e70 <SysTick_Config+0x40>)
 8001e60:	2207      	movs	r2, #7
 8001e62:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e64:	2300      	movs	r3, #0
}
 8001e66:	4618      	mov	r0, r3
 8001e68:	3708      	adds	r7, #8
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}
 8001e6e:	bf00      	nop
 8001e70:	e000e010 	.word	0xe000e010

08001e74 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b082      	sub	sp, #8
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e7c:	6878      	ldr	r0, [r7, #4]
 8001e7e:	f7ff ff2d 	bl	8001cdc <__NVIC_SetPriorityGrouping>
}
 8001e82:	bf00      	nop
 8001e84:	3708      	adds	r7, #8
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}

08001e8a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e8a:	b580      	push	{r7, lr}
 8001e8c:	b086      	sub	sp, #24
 8001e8e:	af00      	add	r7, sp, #0
 8001e90:	4603      	mov	r3, r0
 8001e92:	60b9      	str	r1, [r7, #8]
 8001e94:	607a      	str	r2, [r7, #4]
 8001e96:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e9c:	f7ff ff42 	bl	8001d24 <__NVIC_GetPriorityGrouping>
 8001ea0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ea2:	687a      	ldr	r2, [r7, #4]
 8001ea4:	68b9      	ldr	r1, [r7, #8]
 8001ea6:	6978      	ldr	r0, [r7, #20]
 8001ea8:	f7ff ff90 	bl	8001dcc <NVIC_EncodePriority>
 8001eac:	4602      	mov	r2, r0
 8001eae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001eb2:	4611      	mov	r1, r2
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	f7ff ff5f 	bl	8001d78 <__NVIC_SetPriority>
}
 8001eba:	bf00      	nop
 8001ebc:	3718      	adds	r7, #24
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}

08001ec2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ec2:	b580      	push	{r7, lr}
 8001ec4:	b082      	sub	sp, #8
 8001ec6:	af00      	add	r7, sp, #0
 8001ec8:	4603      	mov	r3, r0
 8001eca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ecc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	f7ff ff35 	bl	8001d40 <__NVIC_EnableIRQ>
}
 8001ed6:	bf00      	nop
 8001ed8:	3708      	adds	r7, #8
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd80      	pop	{r7, pc}

08001ede <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ede:	b580      	push	{r7, lr}
 8001ee0:	b082      	sub	sp, #8
 8001ee2:	af00      	add	r7, sp, #0
 8001ee4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ee6:	6878      	ldr	r0, [r7, #4]
 8001ee8:	f7ff ffa2 	bl	8001e30 <SysTick_Config>
 8001eec:	4603      	mov	r3, r0
}
 8001eee:	4618      	mov	r0, r3
 8001ef0:	3708      	adds	r7, #8
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}
	...

08001ef8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	b08b      	sub	sp, #44	; 0x2c
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
 8001f00:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001f02:	2300      	movs	r3, #0
 8001f04:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001f06:	2300      	movs	r3, #0
 8001f08:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f0a:	e161      	b.n	80021d0 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001f0c:	2201      	movs	r2, #1
 8001f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f10:	fa02 f303 	lsl.w	r3, r2, r3
 8001f14:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	69fa      	ldr	r2, [r7, #28]
 8001f1c:	4013      	ands	r3, r2
 8001f1e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001f20:	69ba      	ldr	r2, [r7, #24]
 8001f22:	69fb      	ldr	r3, [r7, #28]
 8001f24:	429a      	cmp	r2, r3
 8001f26:	f040 8150 	bne.w	80021ca <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	685b      	ldr	r3, [r3, #4]
 8001f2e:	4a97      	ldr	r2, [pc, #604]	; (800218c <HAL_GPIO_Init+0x294>)
 8001f30:	4293      	cmp	r3, r2
 8001f32:	d05e      	beq.n	8001ff2 <HAL_GPIO_Init+0xfa>
 8001f34:	4a95      	ldr	r2, [pc, #596]	; (800218c <HAL_GPIO_Init+0x294>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d875      	bhi.n	8002026 <HAL_GPIO_Init+0x12e>
 8001f3a:	4a95      	ldr	r2, [pc, #596]	; (8002190 <HAL_GPIO_Init+0x298>)
 8001f3c:	4293      	cmp	r3, r2
 8001f3e:	d058      	beq.n	8001ff2 <HAL_GPIO_Init+0xfa>
 8001f40:	4a93      	ldr	r2, [pc, #588]	; (8002190 <HAL_GPIO_Init+0x298>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d86f      	bhi.n	8002026 <HAL_GPIO_Init+0x12e>
 8001f46:	4a93      	ldr	r2, [pc, #588]	; (8002194 <HAL_GPIO_Init+0x29c>)
 8001f48:	4293      	cmp	r3, r2
 8001f4a:	d052      	beq.n	8001ff2 <HAL_GPIO_Init+0xfa>
 8001f4c:	4a91      	ldr	r2, [pc, #580]	; (8002194 <HAL_GPIO_Init+0x29c>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d869      	bhi.n	8002026 <HAL_GPIO_Init+0x12e>
 8001f52:	4a91      	ldr	r2, [pc, #580]	; (8002198 <HAL_GPIO_Init+0x2a0>)
 8001f54:	4293      	cmp	r3, r2
 8001f56:	d04c      	beq.n	8001ff2 <HAL_GPIO_Init+0xfa>
 8001f58:	4a8f      	ldr	r2, [pc, #572]	; (8002198 <HAL_GPIO_Init+0x2a0>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d863      	bhi.n	8002026 <HAL_GPIO_Init+0x12e>
 8001f5e:	4a8f      	ldr	r2, [pc, #572]	; (800219c <HAL_GPIO_Init+0x2a4>)
 8001f60:	4293      	cmp	r3, r2
 8001f62:	d046      	beq.n	8001ff2 <HAL_GPIO_Init+0xfa>
 8001f64:	4a8d      	ldr	r2, [pc, #564]	; (800219c <HAL_GPIO_Init+0x2a4>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d85d      	bhi.n	8002026 <HAL_GPIO_Init+0x12e>
 8001f6a:	2b12      	cmp	r3, #18
 8001f6c:	d82a      	bhi.n	8001fc4 <HAL_GPIO_Init+0xcc>
 8001f6e:	2b12      	cmp	r3, #18
 8001f70:	d859      	bhi.n	8002026 <HAL_GPIO_Init+0x12e>
 8001f72:	a201      	add	r2, pc, #4	; (adr r2, 8001f78 <HAL_GPIO_Init+0x80>)
 8001f74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f78:	08001ff3 	.word	0x08001ff3
 8001f7c:	08001fcd 	.word	0x08001fcd
 8001f80:	08001fdf 	.word	0x08001fdf
 8001f84:	08002021 	.word	0x08002021
 8001f88:	08002027 	.word	0x08002027
 8001f8c:	08002027 	.word	0x08002027
 8001f90:	08002027 	.word	0x08002027
 8001f94:	08002027 	.word	0x08002027
 8001f98:	08002027 	.word	0x08002027
 8001f9c:	08002027 	.word	0x08002027
 8001fa0:	08002027 	.word	0x08002027
 8001fa4:	08002027 	.word	0x08002027
 8001fa8:	08002027 	.word	0x08002027
 8001fac:	08002027 	.word	0x08002027
 8001fb0:	08002027 	.word	0x08002027
 8001fb4:	08002027 	.word	0x08002027
 8001fb8:	08002027 	.word	0x08002027
 8001fbc:	08001fd5 	.word	0x08001fd5
 8001fc0:	08001fe9 	.word	0x08001fe9
 8001fc4:	4a76      	ldr	r2, [pc, #472]	; (80021a0 <HAL_GPIO_Init+0x2a8>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d013      	beq.n	8001ff2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001fca:	e02c      	b.n	8002026 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	68db      	ldr	r3, [r3, #12]
 8001fd0:	623b      	str	r3, [r7, #32]
          break;
 8001fd2:	e029      	b.n	8002028 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	68db      	ldr	r3, [r3, #12]
 8001fd8:	3304      	adds	r3, #4
 8001fda:	623b      	str	r3, [r7, #32]
          break;
 8001fdc:	e024      	b.n	8002028 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	68db      	ldr	r3, [r3, #12]
 8001fe2:	3308      	adds	r3, #8
 8001fe4:	623b      	str	r3, [r7, #32]
          break;
 8001fe6:	e01f      	b.n	8002028 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	68db      	ldr	r3, [r3, #12]
 8001fec:	330c      	adds	r3, #12
 8001fee:	623b      	str	r3, [r7, #32]
          break;
 8001ff0:	e01a      	b.n	8002028 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	689b      	ldr	r3, [r3, #8]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d102      	bne.n	8002000 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001ffa:	2304      	movs	r3, #4
 8001ffc:	623b      	str	r3, [r7, #32]
          break;
 8001ffe:	e013      	b.n	8002028 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	689b      	ldr	r3, [r3, #8]
 8002004:	2b01      	cmp	r3, #1
 8002006:	d105      	bne.n	8002014 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002008:	2308      	movs	r3, #8
 800200a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	69fa      	ldr	r2, [r7, #28]
 8002010:	611a      	str	r2, [r3, #16]
          break;
 8002012:	e009      	b.n	8002028 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002014:	2308      	movs	r3, #8
 8002016:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	69fa      	ldr	r2, [r7, #28]
 800201c:	615a      	str	r2, [r3, #20]
          break;
 800201e:	e003      	b.n	8002028 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002020:	2300      	movs	r3, #0
 8002022:	623b      	str	r3, [r7, #32]
          break;
 8002024:	e000      	b.n	8002028 <HAL_GPIO_Init+0x130>
          break;
 8002026:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002028:	69bb      	ldr	r3, [r7, #24]
 800202a:	2bff      	cmp	r3, #255	; 0xff
 800202c:	d801      	bhi.n	8002032 <HAL_GPIO_Init+0x13a>
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	e001      	b.n	8002036 <HAL_GPIO_Init+0x13e>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	3304      	adds	r3, #4
 8002036:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002038:	69bb      	ldr	r3, [r7, #24]
 800203a:	2bff      	cmp	r3, #255	; 0xff
 800203c:	d802      	bhi.n	8002044 <HAL_GPIO_Init+0x14c>
 800203e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002040:	009b      	lsls	r3, r3, #2
 8002042:	e002      	b.n	800204a <HAL_GPIO_Init+0x152>
 8002044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002046:	3b08      	subs	r3, #8
 8002048:	009b      	lsls	r3, r3, #2
 800204a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800204c:	697b      	ldr	r3, [r7, #20]
 800204e:	681a      	ldr	r2, [r3, #0]
 8002050:	210f      	movs	r1, #15
 8002052:	693b      	ldr	r3, [r7, #16]
 8002054:	fa01 f303 	lsl.w	r3, r1, r3
 8002058:	43db      	mvns	r3, r3
 800205a:	401a      	ands	r2, r3
 800205c:	6a39      	ldr	r1, [r7, #32]
 800205e:	693b      	ldr	r3, [r7, #16]
 8002060:	fa01 f303 	lsl.w	r3, r1, r3
 8002064:	431a      	orrs	r2, r3
 8002066:	697b      	ldr	r3, [r7, #20]
 8002068:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002072:	2b00      	cmp	r3, #0
 8002074:	f000 80a9 	beq.w	80021ca <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002078:	4b4a      	ldr	r3, [pc, #296]	; (80021a4 <HAL_GPIO_Init+0x2ac>)
 800207a:	699b      	ldr	r3, [r3, #24]
 800207c:	4a49      	ldr	r2, [pc, #292]	; (80021a4 <HAL_GPIO_Init+0x2ac>)
 800207e:	f043 0301 	orr.w	r3, r3, #1
 8002082:	6193      	str	r3, [r2, #24]
 8002084:	4b47      	ldr	r3, [pc, #284]	; (80021a4 <HAL_GPIO_Init+0x2ac>)
 8002086:	699b      	ldr	r3, [r3, #24]
 8002088:	f003 0301 	and.w	r3, r3, #1
 800208c:	60bb      	str	r3, [r7, #8]
 800208e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002090:	4a45      	ldr	r2, [pc, #276]	; (80021a8 <HAL_GPIO_Init+0x2b0>)
 8002092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002094:	089b      	lsrs	r3, r3, #2
 8002096:	3302      	adds	r3, #2
 8002098:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800209c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800209e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020a0:	f003 0303 	and.w	r3, r3, #3
 80020a4:	009b      	lsls	r3, r3, #2
 80020a6:	220f      	movs	r2, #15
 80020a8:	fa02 f303 	lsl.w	r3, r2, r3
 80020ac:	43db      	mvns	r3, r3
 80020ae:	68fa      	ldr	r2, [r7, #12]
 80020b0:	4013      	ands	r3, r2
 80020b2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	4a3d      	ldr	r2, [pc, #244]	; (80021ac <HAL_GPIO_Init+0x2b4>)
 80020b8:	4293      	cmp	r3, r2
 80020ba:	d00d      	beq.n	80020d8 <HAL_GPIO_Init+0x1e0>
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	4a3c      	ldr	r2, [pc, #240]	; (80021b0 <HAL_GPIO_Init+0x2b8>)
 80020c0:	4293      	cmp	r3, r2
 80020c2:	d007      	beq.n	80020d4 <HAL_GPIO_Init+0x1dc>
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	4a3b      	ldr	r2, [pc, #236]	; (80021b4 <HAL_GPIO_Init+0x2bc>)
 80020c8:	4293      	cmp	r3, r2
 80020ca:	d101      	bne.n	80020d0 <HAL_GPIO_Init+0x1d8>
 80020cc:	2302      	movs	r3, #2
 80020ce:	e004      	b.n	80020da <HAL_GPIO_Init+0x1e2>
 80020d0:	2303      	movs	r3, #3
 80020d2:	e002      	b.n	80020da <HAL_GPIO_Init+0x1e2>
 80020d4:	2301      	movs	r3, #1
 80020d6:	e000      	b.n	80020da <HAL_GPIO_Init+0x1e2>
 80020d8:	2300      	movs	r3, #0
 80020da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020dc:	f002 0203 	and.w	r2, r2, #3
 80020e0:	0092      	lsls	r2, r2, #2
 80020e2:	4093      	lsls	r3, r2
 80020e4:	68fa      	ldr	r2, [r7, #12]
 80020e6:	4313      	orrs	r3, r2
 80020e8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80020ea:	492f      	ldr	r1, [pc, #188]	; (80021a8 <HAL_GPIO_Init+0x2b0>)
 80020ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ee:	089b      	lsrs	r3, r3, #2
 80020f0:	3302      	adds	r3, #2
 80020f2:	68fa      	ldr	r2, [r7, #12]
 80020f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002100:	2b00      	cmp	r3, #0
 8002102:	d006      	beq.n	8002112 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002104:	4b2c      	ldr	r3, [pc, #176]	; (80021b8 <HAL_GPIO_Init+0x2c0>)
 8002106:	689a      	ldr	r2, [r3, #8]
 8002108:	492b      	ldr	r1, [pc, #172]	; (80021b8 <HAL_GPIO_Init+0x2c0>)
 800210a:	69bb      	ldr	r3, [r7, #24]
 800210c:	4313      	orrs	r3, r2
 800210e:	608b      	str	r3, [r1, #8]
 8002110:	e006      	b.n	8002120 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002112:	4b29      	ldr	r3, [pc, #164]	; (80021b8 <HAL_GPIO_Init+0x2c0>)
 8002114:	689a      	ldr	r2, [r3, #8]
 8002116:	69bb      	ldr	r3, [r7, #24]
 8002118:	43db      	mvns	r3, r3
 800211a:	4927      	ldr	r1, [pc, #156]	; (80021b8 <HAL_GPIO_Init+0x2c0>)
 800211c:	4013      	ands	r3, r2
 800211e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002128:	2b00      	cmp	r3, #0
 800212a:	d006      	beq.n	800213a <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800212c:	4b22      	ldr	r3, [pc, #136]	; (80021b8 <HAL_GPIO_Init+0x2c0>)
 800212e:	68da      	ldr	r2, [r3, #12]
 8002130:	4921      	ldr	r1, [pc, #132]	; (80021b8 <HAL_GPIO_Init+0x2c0>)
 8002132:	69bb      	ldr	r3, [r7, #24]
 8002134:	4313      	orrs	r3, r2
 8002136:	60cb      	str	r3, [r1, #12]
 8002138:	e006      	b.n	8002148 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800213a:	4b1f      	ldr	r3, [pc, #124]	; (80021b8 <HAL_GPIO_Init+0x2c0>)
 800213c:	68da      	ldr	r2, [r3, #12]
 800213e:	69bb      	ldr	r3, [r7, #24]
 8002140:	43db      	mvns	r3, r3
 8002142:	491d      	ldr	r1, [pc, #116]	; (80021b8 <HAL_GPIO_Init+0x2c0>)
 8002144:	4013      	ands	r3, r2
 8002146:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002150:	2b00      	cmp	r3, #0
 8002152:	d006      	beq.n	8002162 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002154:	4b18      	ldr	r3, [pc, #96]	; (80021b8 <HAL_GPIO_Init+0x2c0>)
 8002156:	685a      	ldr	r2, [r3, #4]
 8002158:	4917      	ldr	r1, [pc, #92]	; (80021b8 <HAL_GPIO_Init+0x2c0>)
 800215a:	69bb      	ldr	r3, [r7, #24]
 800215c:	4313      	orrs	r3, r2
 800215e:	604b      	str	r3, [r1, #4]
 8002160:	e006      	b.n	8002170 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002162:	4b15      	ldr	r3, [pc, #84]	; (80021b8 <HAL_GPIO_Init+0x2c0>)
 8002164:	685a      	ldr	r2, [r3, #4]
 8002166:	69bb      	ldr	r3, [r7, #24]
 8002168:	43db      	mvns	r3, r3
 800216a:	4913      	ldr	r1, [pc, #76]	; (80021b8 <HAL_GPIO_Init+0x2c0>)
 800216c:	4013      	ands	r3, r2
 800216e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002178:	2b00      	cmp	r3, #0
 800217a:	d01f      	beq.n	80021bc <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800217c:	4b0e      	ldr	r3, [pc, #56]	; (80021b8 <HAL_GPIO_Init+0x2c0>)
 800217e:	681a      	ldr	r2, [r3, #0]
 8002180:	490d      	ldr	r1, [pc, #52]	; (80021b8 <HAL_GPIO_Init+0x2c0>)
 8002182:	69bb      	ldr	r3, [r7, #24]
 8002184:	4313      	orrs	r3, r2
 8002186:	600b      	str	r3, [r1, #0]
 8002188:	e01f      	b.n	80021ca <HAL_GPIO_Init+0x2d2>
 800218a:	bf00      	nop
 800218c:	10320000 	.word	0x10320000
 8002190:	10310000 	.word	0x10310000
 8002194:	10220000 	.word	0x10220000
 8002198:	10210000 	.word	0x10210000
 800219c:	10120000 	.word	0x10120000
 80021a0:	10110000 	.word	0x10110000
 80021a4:	40021000 	.word	0x40021000
 80021a8:	40010000 	.word	0x40010000
 80021ac:	40010800 	.word	0x40010800
 80021b0:	40010c00 	.word	0x40010c00
 80021b4:	40011000 	.word	0x40011000
 80021b8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80021bc:	4b0b      	ldr	r3, [pc, #44]	; (80021ec <HAL_GPIO_Init+0x2f4>)
 80021be:	681a      	ldr	r2, [r3, #0]
 80021c0:	69bb      	ldr	r3, [r7, #24]
 80021c2:	43db      	mvns	r3, r3
 80021c4:	4909      	ldr	r1, [pc, #36]	; (80021ec <HAL_GPIO_Init+0x2f4>)
 80021c6:	4013      	ands	r3, r2
 80021c8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80021ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021cc:	3301      	adds	r3, #1
 80021ce:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	681a      	ldr	r2, [r3, #0]
 80021d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021d6:	fa22 f303 	lsr.w	r3, r2, r3
 80021da:	2b00      	cmp	r3, #0
 80021dc:	f47f ae96 	bne.w	8001f0c <HAL_GPIO_Init+0x14>
  }
}
 80021e0:	bf00      	nop
 80021e2:	bf00      	nop
 80021e4:	372c      	adds	r7, #44	; 0x2c
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bc80      	pop	{r7}
 80021ea:	4770      	bx	lr
 80021ec:	40010400 	.word	0x40010400

080021f0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80021f0:	b480      	push	{r7}
 80021f2:	b085      	sub	sp, #20
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
 80021f8:	460b      	mov	r3, r1
 80021fa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	689a      	ldr	r2, [r3, #8]
 8002200:	887b      	ldrh	r3, [r7, #2]
 8002202:	4013      	ands	r3, r2
 8002204:	2b00      	cmp	r3, #0
 8002206:	d002      	beq.n	800220e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002208:	2301      	movs	r3, #1
 800220a:	73fb      	strb	r3, [r7, #15]
 800220c:	e001      	b.n	8002212 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800220e:	2300      	movs	r3, #0
 8002210:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002212:	7bfb      	ldrb	r3, [r7, #15]
}
 8002214:	4618      	mov	r0, r3
 8002216:	3714      	adds	r7, #20
 8002218:	46bd      	mov	sp, r7
 800221a:	bc80      	pop	{r7}
 800221c:	4770      	bx	lr

0800221e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800221e:	b480      	push	{r7}
 8002220:	b083      	sub	sp, #12
 8002222:	af00      	add	r7, sp, #0
 8002224:	6078      	str	r0, [r7, #4]
 8002226:	460b      	mov	r3, r1
 8002228:	807b      	strh	r3, [r7, #2]
 800222a:	4613      	mov	r3, r2
 800222c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800222e:	787b      	ldrb	r3, [r7, #1]
 8002230:	2b00      	cmp	r3, #0
 8002232:	d003      	beq.n	800223c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002234:	887a      	ldrh	r2, [r7, #2]
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800223a:	e003      	b.n	8002244 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800223c:	887b      	ldrh	r3, [r7, #2]
 800223e:	041a      	lsls	r2, r3, #16
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	611a      	str	r2, [r3, #16]
}
 8002244:	bf00      	nop
 8002246:	370c      	adds	r7, #12
 8002248:	46bd      	mov	sp, r7
 800224a:	bc80      	pop	{r7}
 800224c:	4770      	bx	lr

0800224e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800224e:	b480      	push	{r7}
 8002250:	b085      	sub	sp, #20
 8002252:	af00      	add	r7, sp, #0
 8002254:	6078      	str	r0, [r7, #4]
 8002256:	460b      	mov	r3, r1
 8002258:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	68db      	ldr	r3, [r3, #12]
 800225e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002260:	887a      	ldrh	r2, [r7, #2]
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	4013      	ands	r3, r2
 8002266:	041a      	lsls	r2, r3, #16
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	43d9      	mvns	r1, r3
 800226c:	887b      	ldrh	r3, [r7, #2]
 800226e:	400b      	ands	r3, r1
 8002270:	431a      	orrs	r2, r3
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	611a      	str	r2, [r3, #16]
}
 8002276:	bf00      	nop
 8002278:	3714      	adds	r7, #20
 800227a:	46bd      	mov	sp, r7
 800227c:	bc80      	pop	{r7}
 800227e:	4770      	bx	lr

08002280 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b086      	sub	sp, #24
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d101      	bne.n	8002292 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800228e:	2301      	movs	r3, #1
 8002290:	e272      	b.n	8002778 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f003 0301 	and.w	r3, r3, #1
 800229a:	2b00      	cmp	r3, #0
 800229c:	f000 8087 	beq.w	80023ae <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80022a0:	4b92      	ldr	r3, [pc, #584]	; (80024ec <HAL_RCC_OscConfig+0x26c>)
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	f003 030c 	and.w	r3, r3, #12
 80022a8:	2b04      	cmp	r3, #4
 80022aa:	d00c      	beq.n	80022c6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80022ac:	4b8f      	ldr	r3, [pc, #572]	; (80024ec <HAL_RCC_OscConfig+0x26c>)
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	f003 030c 	and.w	r3, r3, #12
 80022b4:	2b08      	cmp	r3, #8
 80022b6:	d112      	bne.n	80022de <HAL_RCC_OscConfig+0x5e>
 80022b8:	4b8c      	ldr	r3, [pc, #560]	; (80024ec <HAL_RCC_OscConfig+0x26c>)
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022c4:	d10b      	bne.n	80022de <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022c6:	4b89      	ldr	r3, [pc, #548]	; (80024ec <HAL_RCC_OscConfig+0x26c>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d06c      	beq.n	80023ac <HAL_RCC_OscConfig+0x12c>
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d168      	bne.n	80023ac <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80022da:	2301      	movs	r3, #1
 80022dc:	e24c      	b.n	8002778 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022e6:	d106      	bne.n	80022f6 <HAL_RCC_OscConfig+0x76>
 80022e8:	4b80      	ldr	r3, [pc, #512]	; (80024ec <HAL_RCC_OscConfig+0x26c>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4a7f      	ldr	r2, [pc, #508]	; (80024ec <HAL_RCC_OscConfig+0x26c>)
 80022ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022f2:	6013      	str	r3, [r2, #0]
 80022f4:	e02e      	b.n	8002354 <HAL_RCC_OscConfig+0xd4>
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d10c      	bne.n	8002318 <HAL_RCC_OscConfig+0x98>
 80022fe:	4b7b      	ldr	r3, [pc, #492]	; (80024ec <HAL_RCC_OscConfig+0x26c>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4a7a      	ldr	r2, [pc, #488]	; (80024ec <HAL_RCC_OscConfig+0x26c>)
 8002304:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002308:	6013      	str	r3, [r2, #0]
 800230a:	4b78      	ldr	r3, [pc, #480]	; (80024ec <HAL_RCC_OscConfig+0x26c>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4a77      	ldr	r2, [pc, #476]	; (80024ec <HAL_RCC_OscConfig+0x26c>)
 8002310:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002314:	6013      	str	r3, [r2, #0]
 8002316:	e01d      	b.n	8002354 <HAL_RCC_OscConfig+0xd4>
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002320:	d10c      	bne.n	800233c <HAL_RCC_OscConfig+0xbc>
 8002322:	4b72      	ldr	r3, [pc, #456]	; (80024ec <HAL_RCC_OscConfig+0x26c>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4a71      	ldr	r2, [pc, #452]	; (80024ec <HAL_RCC_OscConfig+0x26c>)
 8002328:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800232c:	6013      	str	r3, [r2, #0]
 800232e:	4b6f      	ldr	r3, [pc, #444]	; (80024ec <HAL_RCC_OscConfig+0x26c>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4a6e      	ldr	r2, [pc, #440]	; (80024ec <HAL_RCC_OscConfig+0x26c>)
 8002334:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002338:	6013      	str	r3, [r2, #0]
 800233a:	e00b      	b.n	8002354 <HAL_RCC_OscConfig+0xd4>
 800233c:	4b6b      	ldr	r3, [pc, #428]	; (80024ec <HAL_RCC_OscConfig+0x26c>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a6a      	ldr	r2, [pc, #424]	; (80024ec <HAL_RCC_OscConfig+0x26c>)
 8002342:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002346:	6013      	str	r3, [r2, #0]
 8002348:	4b68      	ldr	r3, [pc, #416]	; (80024ec <HAL_RCC_OscConfig+0x26c>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4a67      	ldr	r2, [pc, #412]	; (80024ec <HAL_RCC_OscConfig+0x26c>)
 800234e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002352:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	2b00      	cmp	r3, #0
 800235a:	d013      	beq.n	8002384 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800235c:	f7ff fcb4 	bl	8001cc8 <HAL_GetTick>
 8002360:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002362:	e008      	b.n	8002376 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002364:	f7ff fcb0 	bl	8001cc8 <HAL_GetTick>
 8002368:	4602      	mov	r2, r0
 800236a:	693b      	ldr	r3, [r7, #16]
 800236c:	1ad3      	subs	r3, r2, r3
 800236e:	2b64      	cmp	r3, #100	; 0x64
 8002370:	d901      	bls.n	8002376 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002372:	2303      	movs	r3, #3
 8002374:	e200      	b.n	8002778 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002376:	4b5d      	ldr	r3, [pc, #372]	; (80024ec <HAL_RCC_OscConfig+0x26c>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800237e:	2b00      	cmp	r3, #0
 8002380:	d0f0      	beq.n	8002364 <HAL_RCC_OscConfig+0xe4>
 8002382:	e014      	b.n	80023ae <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002384:	f7ff fca0 	bl	8001cc8 <HAL_GetTick>
 8002388:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800238a:	e008      	b.n	800239e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800238c:	f7ff fc9c 	bl	8001cc8 <HAL_GetTick>
 8002390:	4602      	mov	r2, r0
 8002392:	693b      	ldr	r3, [r7, #16]
 8002394:	1ad3      	subs	r3, r2, r3
 8002396:	2b64      	cmp	r3, #100	; 0x64
 8002398:	d901      	bls.n	800239e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800239a:	2303      	movs	r3, #3
 800239c:	e1ec      	b.n	8002778 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800239e:	4b53      	ldr	r3, [pc, #332]	; (80024ec <HAL_RCC_OscConfig+0x26c>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d1f0      	bne.n	800238c <HAL_RCC_OscConfig+0x10c>
 80023aa:	e000      	b.n	80023ae <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f003 0302 	and.w	r3, r3, #2
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d063      	beq.n	8002482 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80023ba:	4b4c      	ldr	r3, [pc, #304]	; (80024ec <HAL_RCC_OscConfig+0x26c>)
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	f003 030c 	and.w	r3, r3, #12
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d00b      	beq.n	80023de <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80023c6:	4b49      	ldr	r3, [pc, #292]	; (80024ec <HAL_RCC_OscConfig+0x26c>)
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	f003 030c 	and.w	r3, r3, #12
 80023ce:	2b08      	cmp	r3, #8
 80023d0:	d11c      	bne.n	800240c <HAL_RCC_OscConfig+0x18c>
 80023d2:	4b46      	ldr	r3, [pc, #280]	; (80024ec <HAL_RCC_OscConfig+0x26c>)
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d116      	bne.n	800240c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023de:	4b43      	ldr	r3, [pc, #268]	; (80024ec <HAL_RCC_OscConfig+0x26c>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f003 0302 	and.w	r3, r3, #2
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d005      	beq.n	80023f6 <HAL_RCC_OscConfig+0x176>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	691b      	ldr	r3, [r3, #16]
 80023ee:	2b01      	cmp	r3, #1
 80023f0:	d001      	beq.n	80023f6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80023f2:	2301      	movs	r3, #1
 80023f4:	e1c0      	b.n	8002778 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023f6:	4b3d      	ldr	r3, [pc, #244]	; (80024ec <HAL_RCC_OscConfig+0x26c>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	695b      	ldr	r3, [r3, #20]
 8002402:	00db      	lsls	r3, r3, #3
 8002404:	4939      	ldr	r1, [pc, #228]	; (80024ec <HAL_RCC_OscConfig+0x26c>)
 8002406:	4313      	orrs	r3, r2
 8002408:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800240a:	e03a      	b.n	8002482 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	691b      	ldr	r3, [r3, #16]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d020      	beq.n	8002456 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002414:	4b36      	ldr	r3, [pc, #216]	; (80024f0 <HAL_RCC_OscConfig+0x270>)
 8002416:	2201      	movs	r2, #1
 8002418:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800241a:	f7ff fc55 	bl	8001cc8 <HAL_GetTick>
 800241e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002420:	e008      	b.n	8002434 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002422:	f7ff fc51 	bl	8001cc8 <HAL_GetTick>
 8002426:	4602      	mov	r2, r0
 8002428:	693b      	ldr	r3, [r7, #16]
 800242a:	1ad3      	subs	r3, r2, r3
 800242c:	2b02      	cmp	r3, #2
 800242e:	d901      	bls.n	8002434 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002430:	2303      	movs	r3, #3
 8002432:	e1a1      	b.n	8002778 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002434:	4b2d      	ldr	r3, [pc, #180]	; (80024ec <HAL_RCC_OscConfig+0x26c>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f003 0302 	and.w	r3, r3, #2
 800243c:	2b00      	cmp	r3, #0
 800243e:	d0f0      	beq.n	8002422 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002440:	4b2a      	ldr	r3, [pc, #168]	; (80024ec <HAL_RCC_OscConfig+0x26c>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	695b      	ldr	r3, [r3, #20]
 800244c:	00db      	lsls	r3, r3, #3
 800244e:	4927      	ldr	r1, [pc, #156]	; (80024ec <HAL_RCC_OscConfig+0x26c>)
 8002450:	4313      	orrs	r3, r2
 8002452:	600b      	str	r3, [r1, #0]
 8002454:	e015      	b.n	8002482 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002456:	4b26      	ldr	r3, [pc, #152]	; (80024f0 <HAL_RCC_OscConfig+0x270>)
 8002458:	2200      	movs	r2, #0
 800245a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800245c:	f7ff fc34 	bl	8001cc8 <HAL_GetTick>
 8002460:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002462:	e008      	b.n	8002476 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002464:	f7ff fc30 	bl	8001cc8 <HAL_GetTick>
 8002468:	4602      	mov	r2, r0
 800246a:	693b      	ldr	r3, [r7, #16]
 800246c:	1ad3      	subs	r3, r2, r3
 800246e:	2b02      	cmp	r3, #2
 8002470:	d901      	bls.n	8002476 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002472:	2303      	movs	r3, #3
 8002474:	e180      	b.n	8002778 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002476:	4b1d      	ldr	r3, [pc, #116]	; (80024ec <HAL_RCC_OscConfig+0x26c>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f003 0302 	and.w	r3, r3, #2
 800247e:	2b00      	cmp	r3, #0
 8002480:	d1f0      	bne.n	8002464 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f003 0308 	and.w	r3, r3, #8
 800248a:	2b00      	cmp	r3, #0
 800248c:	d03a      	beq.n	8002504 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	699b      	ldr	r3, [r3, #24]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d019      	beq.n	80024ca <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002496:	4b17      	ldr	r3, [pc, #92]	; (80024f4 <HAL_RCC_OscConfig+0x274>)
 8002498:	2201      	movs	r2, #1
 800249a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800249c:	f7ff fc14 	bl	8001cc8 <HAL_GetTick>
 80024a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024a2:	e008      	b.n	80024b6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024a4:	f7ff fc10 	bl	8001cc8 <HAL_GetTick>
 80024a8:	4602      	mov	r2, r0
 80024aa:	693b      	ldr	r3, [r7, #16]
 80024ac:	1ad3      	subs	r3, r2, r3
 80024ae:	2b02      	cmp	r3, #2
 80024b0:	d901      	bls.n	80024b6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80024b2:	2303      	movs	r3, #3
 80024b4:	e160      	b.n	8002778 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024b6:	4b0d      	ldr	r3, [pc, #52]	; (80024ec <HAL_RCC_OscConfig+0x26c>)
 80024b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ba:	f003 0302 	and.w	r3, r3, #2
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d0f0      	beq.n	80024a4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80024c2:	2001      	movs	r0, #1
 80024c4:	f000 fa9c 	bl	8002a00 <RCC_Delay>
 80024c8:	e01c      	b.n	8002504 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80024ca:	4b0a      	ldr	r3, [pc, #40]	; (80024f4 <HAL_RCC_OscConfig+0x274>)
 80024cc:	2200      	movs	r2, #0
 80024ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024d0:	f7ff fbfa 	bl	8001cc8 <HAL_GetTick>
 80024d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024d6:	e00f      	b.n	80024f8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024d8:	f7ff fbf6 	bl	8001cc8 <HAL_GetTick>
 80024dc:	4602      	mov	r2, r0
 80024de:	693b      	ldr	r3, [r7, #16]
 80024e0:	1ad3      	subs	r3, r2, r3
 80024e2:	2b02      	cmp	r3, #2
 80024e4:	d908      	bls.n	80024f8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80024e6:	2303      	movs	r3, #3
 80024e8:	e146      	b.n	8002778 <HAL_RCC_OscConfig+0x4f8>
 80024ea:	bf00      	nop
 80024ec:	40021000 	.word	0x40021000
 80024f0:	42420000 	.word	0x42420000
 80024f4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024f8:	4b92      	ldr	r3, [pc, #584]	; (8002744 <HAL_RCC_OscConfig+0x4c4>)
 80024fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024fc:	f003 0302 	and.w	r3, r3, #2
 8002500:	2b00      	cmp	r3, #0
 8002502:	d1e9      	bne.n	80024d8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f003 0304 	and.w	r3, r3, #4
 800250c:	2b00      	cmp	r3, #0
 800250e:	f000 80a6 	beq.w	800265e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002512:	2300      	movs	r3, #0
 8002514:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002516:	4b8b      	ldr	r3, [pc, #556]	; (8002744 <HAL_RCC_OscConfig+0x4c4>)
 8002518:	69db      	ldr	r3, [r3, #28]
 800251a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800251e:	2b00      	cmp	r3, #0
 8002520:	d10d      	bne.n	800253e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002522:	4b88      	ldr	r3, [pc, #544]	; (8002744 <HAL_RCC_OscConfig+0x4c4>)
 8002524:	69db      	ldr	r3, [r3, #28]
 8002526:	4a87      	ldr	r2, [pc, #540]	; (8002744 <HAL_RCC_OscConfig+0x4c4>)
 8002528:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800252c:	61d3      	str	r3, [r2, #28]
 800252e:	4b85      	ldr	r3, [pc, #532]	; (8002744 <HAL_RCC_OscConfig+0x4c4>)
 8002530:	69db      	ldr	r3, [r3, #28]
 8002532:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002536:	60bb      	str	r3, [r7, #8]
 8002538:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800253a:	2301      	movs	r3, #1
 800253c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800253e:	4b82      	ldr	r3, [pc, #520]	; (8002748 <HAL_RCC_OscConfig+0x4c8>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002546:	2b00      	cmp	r3, #0
 8002548:	d118      	bne.n	800257c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800254a:	4b7f      	ldr	r3, [pc, #508]	; (8002748 <HAL_RCC_OscConfig+0x4c8>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	4a7e      	ldr	r2, [pc, #504]	; (8002748 <HAL_RCC_OscConfig+0x4c8>)
 8002550:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002554:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002556:	f7ff fbb7 	bl	8001cc8 <HAL_GetTick>
 800255a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800255c:	e008      	b.n	8002570 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800255e:	f7ff fbb3 	bl	8001cc8 <HAL_GetTick>
 8002562:	4602      	mov	r2, r0
 8002564:	693b      	ldr	r3, [r7, #16]
 8002566:	1ad3      	subs	r3, r2, r3
 8002568:	2b64      	cmp	r3, #100	; 0x64
 800256a:	d901      	bls.n	8002570 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800256c:	2303      	movs	r3, #3
 800256e:	e103      	b.n	8002778 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002570:	4b75      	ldr	r3, [pc, #468]	; (8002748 <HAL_RCC_OscConfig+0x4c8>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002578:	2b00      	cmp	r3, #0
 800257a:	d0f0      	beq.n	800255e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	68db      	ldr	r3, [r3, #12]
 8002580:	2b01      	cmp	r3, #1
 8002582:	d106      	bne.n	8002592 <HAL_RCC_OscConfig+0x312>
 8002584:	4b6f      	ldr	r3, [pc, #444]	; (8002744 <HAL_RCC_OscConfig+0x4c4>)
 8002586:	6a1b      	ldr	r3, [r3, #32]
 8002588:	4a6e      	ldr	r2, [pc, #440]	; (8002744 <HAL_RCC_OscConfig+0x4c4>)
 800258a:	f043 0301 	orr.w	r3, r3, #1
 800258e:	6213      	str	r3, [r2, #32]
 8002590:	e02d      	b.n	80025ee <HAL_RCC_OscConfig+0x36e>
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	68db      	ldr	r3, [r3, #12]
 8002596:	2b00      	cmp	r3, #0
 8002598:	d10c      	bne.n	80025b4 <HAL_RCC_OscConfig+0x334>
 800259a:	4b6a      	ldr	r3, [pc, #424]	; (8002744 <HAL_RCC_OscConfig+0x4c4>)
 800259c:	6a1b      	ldr	r3, [r3, #32]
 800259e:	4a69      	ldr	r2, [pc, #420]	; (8002744 <HAL_RCC_OscConfig+0x4c4>)
 80025a0:	f023 0301 	bic.w	r3, r3, #1
 80025a4:	6213      	str	r3, [r2, #32]
 80025a6:	4b67      	ldr	r3, [pc, #412]	; (8002744 <HAL_RCC_OscConfig+0x4c4>)
 80025a8:	6a1b      	ldr	r3, [r3, #32]
 80025aa:	4a66      	ldr	r2, [pc, #408]	; (8002744 <HAL_RCC_OscConfig+0x4c4>)
 80025ac:	f023 0304 	bic.w	r3, r3, #4
 80025b0:	6213      	str	r3, [r2, #32]
 80025b2:	e01c      	b.n	80025ee <HAL_RCC_OscConfig+0x36e>
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	68db      	ldr	r3, [r3, #12]
 80025b8:	2b05      	cmp	r3, #5
 80025ba:	d10c      	bne.n	80025d6 <HAL_RCC_OscConfig+0x356>
 80025bc:	4b61      	ldr	r3, [pc, #388]	; (8002744 <HAL_RCC_OscConfig+0x4c4>)
 80025be:	6a1b      	ldr	r3, [r3, #32]
 80025c0:	4a60      	ldr	r2, [pc, #384]	; (8002744 <HAL_RCC_OscConfig+0x4c4>)
 80025c2:	f043 0304 	orr.w	r3, r3, #4
 80025c6:	6213      	str	r3, [r2, #32]
 80025c8:	4b5e      	ldr	r3, [pc, #376]	; (8002744 <HAL_RCC_OscConfig+0x4c4>)
 80025ca:	6a1b      	ldr	r3, [r3, #32]
 80025cc:	4a5d      	ldr	r2, [pc, #372]	; (8002744 <HAL_RCC_OscConfig+0x4c4>)
 80025ce:	f043 0301 	orr.w	r3, r3, #1
 80025d2:	6213      	str	r3, [r2, #32]
 80025d4:	e00b      	b.n	80025ee <HAL_RCC_OscConfig+0x36e>
 80025d6:	4b5b      	ldr	r3, [pc, #364]	; (8002744 <HAL_RCC_OscConfig+0x4c4>)
 80025d8:	6a1b      	ldr	r3, [r3, #32]
 80025da:	4a5a      	ldr	r2, [pc, #360]	; (8002744 <HAL_RCC_OscConfig+0x4c4>)
 80025dc:	f023 0301 	bic.w	r3, r3, #1
 80025e0:	6213      	str	r3, [r2, #32]
 80025e2:	4b58      	ldr	r3, [pc, #352]	; (8002744 <HAL_RCC_OscConfig+0x4c4>)
 80025e4:	6a1b      	ldr	r3, [r3, #32]
 80025e6:	4a57      	ldr	r2, [pc, #348]	; (8002744 <HAL_RCC_OscConfig+0x4c4>)
 80025e8:	f023 0304 	bic.w	r3, r3, #4
 80025ec:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	68db      	ldr	r3, [r3, #12]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d015      	beq.n	8002622 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025f6:	f7ff fb67 	bl	8001cc8 <HAL_GetTick>
 80025fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025fc:	e00a      	b.n	8002614 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025fe:	f7ff fb63 	bl	8001cc8 <HAL_GetTick>
 8002602:	4602      	mov	r2, r0
 8002604:	693b      	ldr	r3, [r7, #16]
 8002606:	1ad3      	subs	r3, r2, r3
 8002608:	f241 3288 	movw	r2, #5000	; 0x1388
 800260c:	4293      	cmp	r3, r2
 800260e:	d901      	bls.n	8002614 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002610:	2303      	movs	r3, #3
 8002612:	e0b1      	b.n	8002778 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002614:	4b4b      	ldr	r3, [pc, #300]	; (8002744 <HAL_RCC_OscConfig+0x4c4>)
 8002616:	6a1b      	ldr	r3, [r3, #32]
 8002618:	f003 0302 	and.w	r3, r3, #2
 800261c:	2b00      	cmp	r3, #0
 800261e:	d0ee      	beq.n	80025fe <HAL_RCC_OscConfig+0x37e>
 8002620:	e014      	b.n	800264c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002622:	f7ff fb51 	bl	8001cc8 <HAL_GetTick>
 8002626:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002628:	e00a      	b.n	8002640 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800262a:	f7ff fb4d 	bl	8001cc8 <HAL_GetTick>
 800262e:	4602      	mov	r2, r0
 8002630:	693b      	ldr	r3, [r7, #16]
 8002632:	1ad3      	subs	r3, r2, r3
 8002634:	f241 3288 	movw	r2, #5000	; 0x1388
 8002638:	4293      	cmp	r3, r2
 800263a:	d901      	bls.n	8002640 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800263c:	2303      	movs	r3, #3
 800263e:	e09b      	b.n	8002778 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002640:	4b40      	ldr	r3, [pc, #256]	; (8002744 <HAL_RCC_OscConfig+0x4c4>)
 8002642:	6a1b      	ldr	r3, [r3, #32]
 8002644:	f003 0302 	and.w	r3, r3, #2
 8002648:	2b00      	cmp	r3, #0
 800264a:	d1ee      	bne.n	800262a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800264c:	7dfb      	ldrb	r3, [r7, #23]
 800264e:	2b01      	cmp	r3, #1
 8002650:	d105      	bne.n	800265e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002652:	4b3c      	ldr	r3, [pc, #240]	; (8002744 <HAL_RCC_OscConfig+0x4c4>)
 8002654:	69db      	ldr	r3, [r3, #28]
 8002656:	4a3b      	ldr	r2, [pc, #236]	; (8002744 <HAL_RCC_OscConfig+0x4c4>)
 8002658:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800265c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	69db      	ldr	r3, [r3, #28]
 8002662:	2b00      	cmp	r3, #0
 8002664:	f000 8087 	beq.w	8002776 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002668:	4b36      	ldr	r3, [pc, #216]	; (8002744 <HAL_RCC_OscConfig+0x4c4>)
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	f003 030c 	and.w	r3, r3, #12
 8002670:	2b08      	cmp	r3, #8
 8002672:	d061      	beq.n	8002738 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	69db      	ldr	r3, [r3, #28]
 8002678:	2b02      	cmp	r3, #2
 800267a:	d146      	bne.n	800270a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800267c:	4b33      	ldr	r3, [pc, #204]	; (800274c <HAL_RCC_OscConfig+0x4cc>)
 800267e:	2200      	movs	r2, #0
 8002680:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002682:	f7ff fb21 	bl	8001cc8 <HAL_GetTick>
 8002686:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002688:	e008      	b.n	800269c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800268a:	f7ff fb1d 	bl	8001cc8 <HAL_GetTick>
 800268e:	4602      	mov	r2, r0
 8002690:	693b      	ldr	r3, [r7, #16]
 8002692:	1ad3      	subs	r3, r2, r3
 8002694:	2b02      	cmp	r3, #2
 8002696:	d901      	bls.n	800269c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002698:	2303      	movs	r3, #3
 800269a:	e06d      	b.n	8002778 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800269c:	4b29      	ldr	r3, [pc, #164]	; (8002744 <HAL_RCC_OscConfig+0x4c4>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d1f0      	bne.n	800268a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6a1b      	ldr	r3, [r3, #32]
 80026ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026b0:	d108      	bne.n	80026c4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80026b2:	4b24      	ldr	r3, [pc, #144]	; (8002744 <HAL_RCC_OscConfig+0x4c4>)
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	689b      	ldr	r3, [r3, #8]
 80026be:	4921      	ldr	r1, [pc, #132]	; (8002744 <HAL_RCC_OscConfig+0x4c4>)
 80026c0:	4313      	orrs	r3, r2
 80026c2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80026c4:	4b1f      	ldr	r3, [pc, #124]	; (8002744 <HAL_RCC_OscConfig+0x4c4>)
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6a19      	ldr	r1, [r3, #32]
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026d4:	430b      	orrs	r3, r1
 80026d6:	491b      	ldr	r1, [pc, #108]	; (8002744 <HAL_RCC_OscConfig+0x4c4>)
 80026d8:	4313      	orrs	r3, r2
 80026da:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80026dc:	4b1b      	ldr	r3, [pc, #108]	; (800274c <HAL_RCC_OscConfig+0x4cc>)
 80026de:	2201      	movs	r2, #1
 80026e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026e2:	f7ff faf1 	bl	8001cc8 <HAL_GetTick>
 80026e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80026e8:	e008      	b.n	80026fc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026ea:	f7ff faed 	bl	8001cc8 <HAL_GetTick>
 80026ee:	4602      	mov	r2, r0
 80026f0:	693b      	ldr	r3, [r7, #16]
 80026f2:	1ad3      	subs	r3, r2, r3
 80026f4:	2b02      	cmp	r3, #2
 80026f6:	d901      	bls.n	80026fc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80026f8:	2303      	movs	r3, #3
 80026fa:	e03d      	b.n	8002778 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80026fc:	4b11      	ldr	r3, [pc, #68]	; (8002744 <HAL_RCC_OscConfig+0x4c4>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002704:	2b00      	cmp	r3, #0
 8002706:	d0f0      	beq.n	80026ea <HAL_RCC_OscConfig+0x46a>
 8002708:	e035      	b.n	8002776 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800270a:	4b10      	ldr	r3, [pc, #64]	; (800274c <HAL_RCC_OscConfig+0x4cc>)
 800270c:	2200      	movs	r2, #0
 800270e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002710:	f7ff fada 	bl	8001cc8 <HAL_GetTick>
 8002714:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002716:	e008      	b.n	800272a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002718:	f7ff fad6 	bl	8001cc8 <HAL_GetTick>
 800271c:	4602      	mov	r2, r0
 800271e:	693b      	ldr	r3, [r7, #16]
 8002720:	1ad3      	subs	r3, r2, r3
 8002722:	2b02      	cmp	r3, #2
 8002724:	d901      	bls.n	800272a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002726:	2303      	movs	r3, #3
 8002728:	e026      	b.n	8002778 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800272a:	4b06      	ldr	r3, [pc, #24]	; (8002744 <HAL_RCC_OscConfig+0x4c4>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002732:	2b00      	cmp	r3, #0
 8002734:	d1f0      	bne.n	8002718 <HAL_RCC_OscConfig+0x498>
 8002736:	e01e      	b.n	8002776 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	69db      	ldr	r3, [r3, #28]
 800273c:	2b01      	cmp	r3, #1
 800273e:	d107      	bne.n	8002750 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002740:	2301      	movs	r3, #1
 8002742:	e019      	b.n	8002778 <HAL_RCC_OscConfig+0x4f8>
 8002744:	40021000 	.word	0x40021000
 8002748:	40007000 	.word	0x40007000
 800274c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002750:	4b0b      	ldr	r3, [pc, #44]	; (8002780 <HAL_RCC_OscConfig+0x500>)
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6a1b      	ldr	r3, [r3, #32]
 8002760:	429a      	cmp	r2, r3
 8002762:	d106      	bne.n	8002772 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800276e:	429a      	cmp	r2, r3
 8002770:	d001      	beq.n	8002776 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002772:	2301      	movs	r3, #1
 8002774:	e000      	b.n	8002778 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002776:	2300      	movs	r3, #0
}
 8002778:	4618      	mov	r0, r3
 800277a:	3718      	adds	r7, #24
 800277c:	46bd      	mov	sp, r7
 800277e:	bd80      	pop	{r7, pc}
 8002780:	40021000 	.word	0x40021000

08002784 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b084      	sub	sp, #16
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
 800278c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d101      	bne.n	8002798 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002794:	2301      	movs	r3, #1
 8002796:	e0d0      	b.n	800293a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002798:	4b6a      	ldr	r3, [pc, #424]	; (8002944 <HAL_RCC_ClockConfig+0x1c0>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f003 0307 	and.w	r3, r3, #7
 80027a0:	683a      	ldr	r2, [r7, #0]
 80027a2:	429a      	cmp	r2, r3
 80027a4:	d910      	bls.n	80027c8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027a6:	4b67      	ldr	r3, [pc, #412]	; (8002944 <HAL_RCC_ClockConfig+0x1c0>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f023 0207 	bic.w	r2, r3, #7
 80027ae:	4965      	ldr	r1, [pc, #404]	; (8002944 <HAL_RCC_ClockConfig+0x1c0>)
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	4313      	orrs	r3, r2
 80027b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027b6:	4b63      	ldr	r3, [pc, #396]	; (8002944 <HAL_RCC_ClockConfig+0x1c0>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f003 0307 	and.w	r3, r3, #7
 80027be:	683a      	ldr	r2, [r7, #0]
 80027c0:	429a      	cmp	r2, r3
 80027c2:	d001      	beq.n	80027c8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80027c4:	2301      	movs	r3, #1
 80027c6:	e0b8      	b.n	800293a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f003 0302 	and.w	r3, r3, #2
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d020      	beq.n	8002816 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f003 0304 	and.w	r3, r3, #4
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d005      	beq.n	80027ec <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80027e0:	4b59      	ldr	r3, [pc, #356]	; (8002948 <HAL_RCC_ClockConfig+0x1c4>)
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	4a58      	ldr	r2, [pc, #352]	; (8002948 <HAL_RCC_ClockConfig+0x1c4>)
 80027e6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80027ea:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f003 0308 	and.w	r3, r3, #8
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d005      	beq.n	8002804 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80027f8:	4b53      	ldr	r3, [pc, #332]	; (8002948 <HAL_RCC_ClockConfig+0x1c4>)
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	4a52      	ldr	r2, [pc, #328]	; (8002948 <HAL_RCC_ClockConfig+0x1c4>)
 80027fe:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002802:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002804:	4b50      	ldr	r3, [pc, #320]	; (8002948 <HAL_RCC_ClockConfig+0x1c4>)
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	689b      	ldr	r3, [r3, #8]
 8002810:	494d      	ldr	r1, [pc, #308]	; (8002948 <HAL_RCC_ClockConfig+0x1c4>)
 8002812:	4313      	orrs	r3, r2
 8002814:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f003 0301 	and.w	r3, r3, #1
 800281e:	2b00      	cmp	r3, #0
 8002820:	d040      	beq.n	80028a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	2b01      	cmp	r3, #1
 8002828:	d107      	bne.n	800283a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800282a:	4b47      	ldr	r3, [pc, #284]	; (8002948 <HAL_RCC_ClockConfig+0x1c4>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002832:	2b00      	cmp	r3, #0
 8002834:	d115      	bne.n	8002862 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002836:	2301      	movs	r3, #1
 8002838:	e07f      	b.n	800293a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	2b02      	cmp	r3, #2
 8002840:	d107      	bne.n	8002852 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002842:	4b41      	ldr	r3, [pc, #260]	; (8002948 <HAL_RCC_ClockConfig+0x1c4>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800284a:	2b00      	cmp	r3, #0
 800284c:	d109      	bne.n	8002862 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800284e:	2301      	movs	r3, #1
 8002850:	e073      	b.n	800293a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002852:	4b3d      	ldr	r3, [pc, #244]	; (8002948 <HAL_RCC_ClockConfig+0x1c4>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f003 0302 	and.w	r3, r3, #2
 800285a:	2b00      	cmp	r3, #0
 800285c:	d101      	bne.n	8002862 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800285e:	2301      	movs	r3, #1
 8002860:	e06b      	b.n	800293a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002862:	4b39      	ldr	r3, [pc, #228]	; (8002948 <HAL_RCC_ClockConfig+0x1c4>)
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	f023 0203 	bic.w	r2, r3, #3
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	4936      	ldr	r1, [pc, #216]	; (8002948 <HAL_RCC_ClockConfig+0x1c4>)
 8002870:	4313      	orrs	r3, r2
 8002872:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002874:	f7ff fa28 	bl	8001cc8 <HAL_GetTick>
 8002878:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800287a:	e00a      	b.n	8002892 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800287c:	f7ff fa24 	bl	8001cc8 <HAL_GetTick>
 8002880:	4602      	mov	r2, r0
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	1ad3      	subs	r3, r2, r3
 8002886:	f241 3288 	movw	r2, #5000	; 0x1388
 800288a:	4293      	cmp	r3, r2
 800288c:	d901      	bls.n	8002892 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800288e:	2303      	movs	r3, #3
 8002890:	e053      	b.n	800293a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002892:	4b2d      	ldr	r3, [pc, #180]	; (8002948 <HAL_RCC_ClockConfig+0x1c4>)
 8002894:	685b      	ldr	r3, [r3, #4]
 8002896:	f003 020c 	and.w	r2, r3, #12
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	009b      	lsls	r3, r3, #2
 80028a0:	429a      	cmp	r2, r3
 80028a2:	d1eb      	bne.n	800287c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80028a4:	4b27      	ldr	r3, [pc, #156]	; (8002944 <HAL_RCC_ClockConfig+0x1c0>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f003 0307 	and.w	r3, r3, #7
 80028ac:	683a      	ldr	r2, [r7, #0]
 80028ae:	429a      	cmp	r2, r3
 80028b0:	d210      	bcs.n	80028d4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028b2:	4b24      	ldr	r3, [pc, #144]	; (8002944 <HAL_RCC_ClockConfig+0x1c0>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f023 0207 	bic.w	r2, r3, #7
 80028ba:	4922      	ldr	r1, [pc, #136]	; (8002944 <HAL_RCC_ClockConfig+0x1c0>)
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	4313      	orrs	r3, r2
 80028c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028c2:	4b20      	ldr	r3, [pc, #128]	; (8002944 <HAL_RCC_ClockConfig+0x1c0>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f003 0307 	and.w	r3, r3, #7
 80028ca:	683a      	ldr	r2, [r7, #0]
 80028cc:	429a      	cmp	r2, r3
 80028ce:	d001      	beq.n	80028d4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80028d0:	2301      	movs	r3, #1
 80028d2:	e032      	b.n	800293a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f003 0304 	and.w	r3, r3, #4
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d008      	beq.n	80028f2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80028e0:	4b19      	ldr	r3, [pc, #100]	; (8002948 <HAL_RCC_ClockConfig+0x1c4>)
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	68db      	ldr	r3, [r3, #12]
 80028ec:	4916      	ldr	r1, [pc, #88]	; (8002948 <HAL_RCC_ClockConfig+0x1c4>)
 80028ee:	4313      	orrs	r3, r2
 80028f0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f003 0308 	and.w	r3, r3, #8
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d009      	beq.n	8002912 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80028fe:	4b12      	ldr	r3, [pc, #72]	; (8002948 <HAL_RCC_ClockConfig+0x1c4>)
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	691b      	ldr	r3, [r3, #16]
 800290a:	00db      	lsls	r3, r3, #3
 800290c:	490e      	ldr	r1, [pc, #56]	; (8002948 <HAL_RCC_ClockConfig+0x1c4>)
 800290e:	4313      	orrs	r3, r2
 8002910:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002912:	f000 f821 	bl	8002958 <HAL_RCC_GetSysClockFreq>
 8002916:	4602      	mov	r2, r0
 8002918:	4b0b      	ldr	r3, [pc, #44]	; (8002948 <HAL_RCC_ClockConfig+0x1c4>)
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	091b      	lsrs	r3, r3, #4
 800291e:	f003 030f 	and.w	r3, r3, #15
 8002922:	490a      	ldr	r1, [pc, #40]	; (800294c <HAL_RCC_ClockConfig+0x1c8>)
 8002924:	5ccb      	ldrb	r3, [r1, r3]
 8002926:	fa22 f303 	lsr.w	r3, r2, r3
 800292a:	4a09      	ldr	r2, [pc, #36]	; (8002950 <HAL_RCC_ClockConfig+0x1cc>)
 800292c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800292e:	4b09      	ldr	r3, [pc, #36]	; (8002954 <HAL_RCC_ClockConfig+0x1d0>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4618      	mov	r0, r3
 8002934:	f7ff f986 	bl	8001c44 <HAL_InitTick>

  return HAL_OK;
 8002938:	2300      	movs	r3, #0
}
 800293a:	4618      	mov	r0, r3
 800293c:	3710      	adds	r7, #16
 800293e:	46bd      	mov	sp, r7
 8002940:	bd80      	pop	{r7, pc}
 8002942:	bf00      	nop
 8002944:	40022000 	.word	0x40022000
 8002948:	40021000 	.word	0x40021000
 800294c:	0800327c 	.word	0x0800327c
 8002950:	20000058 	.word	0x20000058
 8002954:	2000005c 	.word	0x2000005c

08002958 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002958:	b480      	push	{r7}
 800295a:	b087      	sub	sp, #28
 800295c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800295e:	2300      	movs	r3, #0
 8002960:	60fb      	str	r3, [r7, #12]
 8002962:	2300      	movs	r3, #0
 8002964:	60bb      	str	r3, [r7, #8]
 8002966:	2300      	movs	r3, #0
 8002968:	617b      	str	r3, [r7, #20]
 800296a:	2300      	movs	r3, #0
 800296c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800296e:	2300      	movs	r3, #0
 8002970:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002972:	4b1e      	ldr	r3, [pc, #120]	; (80029ec <HAL_RCC_GetSysClockFreq+0x94>)
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	f003 030c 	and.w	r3, r3, #12
 800297e:	2b04      	cmp	r3, #4
 8002980:	d002      	beq.n	8002988 <HAL_RCC_GetSysClockFreq+0x30>
 8002982:	2b08      	cmp	r3, #8
 8002984:	d003      	beq.n	800298e <HAL_RCC_GetSysClockFreq+0x36>
 8002986:	e027      	b.n	80029d8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002988:	4b19      	ldr	r3, [pc, #100]	; (80029f0 <HAL_RCC_GetSysClockFreq+0x98>)
 800298a:	613b      	str	r3, [r7, #16]
      break;
 800298c:	e027      	b.n	80029de <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	0c9b      	lsrs	r3, r3, #18
 8002992:	f003 030f 	and.w	r3, r3, #15
 8002996:	4a17      	ldr	r2, [pc, #92]	; (80029f4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002998:	5cd3      	ldrb	r3, [r2, r3]
 800299a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d010      	beq.n	80029c8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80029a6:	4b11      	ldr	r3, [pc, #68]	; (80029ec <HAL_RCC_GetSysClockFreq+0x94>)
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	0c5b      	lsrs	r3, r3, #17
 80029ac:	f003 0301 	and.w	r3, r3, #1
 80029b0:	4a11      	ldr	r2, [pc, #68]	; (80029f8 <HAL_RCC_GetSysClockFreq+0xa0>)
 80029b2:	5cd3      	ldrb	r3, [r2, r3]
 80029b4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	4a0d      	ldr	r2, [pc, #52]	; (80029f0 <HAL_RCC_GetSysClockFreq+0x98>)
 80029ba:	fb03 f202 	mul.w	r2, r3, r2
 80029be:	68bb      	ldr	r3, [r7, #8]
 80029c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80029c4:	617b      	str	r3, [r7, #20]
 80029c6:	e004      	b.n	80029d2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	4a0c      	ldr	r2, [pc, #48]	; (80029fc <HAL_RCC_GetSysClockFreq+0xa4>)
 80029cc:	fb02 f303 	mul.w	r3, r2, r3
 80029d0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80029d2:	697b      	ldr	r3, [r7, #20]
 80029d4:	613b      	str	r3, [r7, #16]
      break;
 80029d6:	e002      	b.n	80029de <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80029d8:	4b05      	ldr	r3, [pc, #20]	; (80029f0 <HAL_RCC_GetSysClockFreq+0x98>)
 80029da:	613b      	str	r3, [r7, #16]
      break;
 80029dc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80029de:	693b      	ldr	r3, [r7, #16]
}
 80029e0:	4618      	mov	r0, r3
 80029e2:	371c      	adds	r7, #28
 80029e4:	46bd      	mov	sp, r7
 80029e6:	bc80      	pop	{r7}
 80029e8:	4770      	bx	lr
 80029ea:	bf00      	nop
 80029ec:	40021000 	.word	0x40021000
 80029f0:	007a1200 	.word	0x007a1200
 80029f4:	0800328c 	.word	0x0800328c
 80029f8:	0800329c 	.word	0x0800329c
 80029fc:	003d0900 	.word	0x003d0900

08002a00 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002a00:	b480      	push	{r7}
 8002a02:	b085      	sub	sp, #20
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002a08:	4b0a      	ldr	r3, [pc, #40]	; (8002a34 <RCC_Delay+0x34>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4a0a      	ldr	r2, [pc, #40]	; (8002a38 <RCC_Delay+0x38>)
 8002a0e:	fba2 2303 	umull	r2, r3, r2, r3
 8002a12:	0a5b      	lsrs	r3, r3, #9
 8002a14:	687a      	ldr	r2, [r7, #4]
 8002a16:	fb02 f303 	mul.w	r3, r2, r3
 8002a1a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002a1c:	bf00      	nop
  }
  while (Delay --);
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	1e5a      	subs	r2, r3, #1
 8002a22:	60fa      	str	r2, [r7, #12]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d1f9      	bne.n	8002a1c <RCC_Delay+0x1c>
}
 8002a28:	bf00      	nop
 8002a2a:	bf00      	nop
 8002a2c:	3714      	adds	r7, #20
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bc80      	pop	{r7}
 8002a32:	4770      	bx	lr
 8002a34:	20000058 	.word	0x20000058
 8002a38:	10624dd3 	.word	0x10624dd3

08002a3c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b082      	sub	sp, #8
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d101      	bne.n	8002a4e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	e041      	b.n	8002ad2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a54:	b2db      	uxtb	r3, r3
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d106      	bne.n	8002a68 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002a62:	6878      	ldr	r0, [r7, #4]
 8002a64:	f7fe fdda 	bl	800161c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2202      	movs	r2, #2
 8002a6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681a      	ldr	r2, [r3, #0]
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	3304      	adds	r3, #4
 8002a78:	4619      	mov	r1, r3
 8002a7a:	4610      	mov	r0, r2
 8002a7c:	f000 fa6e 	bl	8002f5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2201      	movs	r2, #1
 8002a84:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2201      	movs	r2, #1
 8002a8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2201      	movs	r2, #1
 8002a94:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2201      	movs	r2, #1
 8002a9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2201      	movs	r2, #1
 8002aa4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2201      	movs	r2, #1
 8002aac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2201      	movs	r2, #1
 8002ab4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2201      	movs	r2, #1
 8002abc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2201      	movs	r2, #1
 8002ac4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2201      	movs	r2, #1
 8002acc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002ad0:	2300      	movs	r3, #0
}
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	3708      	adds	r7, #8
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	bd80      	pop	{r7, pc}
	...

08002adc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002adc:	b480      	push	{r7}
 8002ade:	b085      	sub	sp, #20
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002aea:	b2db      	uxtb	r3, r3
 8002aec:	2b01      	cmp	r3, #1
 8002aee:	d001      	beq.n	8002af4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002af0:	2301      	movs	r3, #1
 8002af2:	e035      	b.n	8002b60 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2202      	movs	r2, #2
 8002af8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	68da      	ldr	r2, [r3, #12]
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f042 0201 	orr.w	r2, r2, #1
 8002b0a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4a16      	ldr	r2, [pc, #88]	; (8002b6c <HAL_TIM_Base_Start_IT+0x90>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d009      	beq.n	8002b2a <HAL_TIM_Base_Start_IT+0x4e>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b1e:	d004      	beq.n	8002b2a <HAL_TIM_Base_Start_IT+0x4e>
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4a12      	ldr	r2, [pc, #72]	; (8002b70 <HAL_TIM_Base_Start_IT+0x94>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d111      	bne.n	8002b4e <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	689b      	ldr	r3, [r3, #8]
 8002b30:	f003 0307 	and.w	r3, r3, #7
 8002b34:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	2b06      	cmp	r3, #6
 8002b3a:	d010      	beq.n	8002b5e <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	681a      	ldr	r2, [r3, #0]
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f042 0201 	orr.w	r2, r2, #1
 8002b4a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b4c:	e007      	b.n	8002b5e <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	681a      	ldr	r2, [r3, #0]
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f042 0201 	orr.w	r2, r2, #1
 8002b5c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002b5e:	2300      	movs	r3, #0
}
 8002b60:	4618      	mov	r0, r3
 8002b62:	3714      	adds	r7, #20
 8002b64:	46bd      	mov	sp, r7
 8002b66:	bc80      	pop	{r7}
 8002b68:	4770      	bx	lr
 8002b6a:	bf00      	nop
 8002b6c:	40012c00 	.word	0x40012c00
 8002b70:	40000400 	.word	0x40000400

08002b74 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b082      	sub	sp, #8
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	691b      	ldr	r3, [r3, #16]
 8002b82:	f003 0302 	and.w	r3, r3, #2
 8002b86:	2b02      	cmp	r3, #2
 8002b88:	d122      	bne.n	8002bd0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	68db      	ldr	r3, [r3, #12]
 8002b90:	f003 0302 	and.w	r3, r3, #2
 8002b94:	2b02      	cmp	r3, #2
 8002b96:	d11b      	bne.n	8002bd0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f06f 0202 	mvn.w	r2, #2
 8002ba0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2201      	movs	r2, #1
 8002ba6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	699b      	ldr	r3, [r3, #24]
 8002bae:	f003 0303 	and.w	r3, r3, #3
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d003      	beq.n	8002bbe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002bb6:	6878      	ldr	r0, [r7, #4]
 8002bb8:	f000 f9b4 	bl	8002f24 <HAL_TIM_IC_CaptureCallback>
 8002bbc:	e005      	b.n	8002bca <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bbe:	6878      	ldr	r0, [r7, #4]
 8002bc0:	f000 f9a7 	bl	8002f12 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bc4:	6878      	ldr	r0, [r7, #4]
 8002bc6:	f000 f9b6 	bl	8002f36 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2200      	movs	r2, #0
 8002bce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	691b      	ldr	r3, [r3, #16]
 8002bd6:	f003 0304 	and.w	r3, r3, #4
 8002bda:	2b04      	cmp	r3, #4
 8002bdc:	d122      	bne.n	8002c24 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	68db      	ldr	r3, [r3, #12]
 8002be4:	f003 0304 	and.w	r3, r3, #4
 8002be8:	2b04      	cmp	r3, #4
 8002bea:	d11b      	bne.n	8002c24 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f06f 0204 	mvn.w	r2, #4
 8002bf4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2202      	movs	r2, #2
 8002bfa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	699b      	ldr	r3, [r3, #24]
 8002c02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d003      	beq.n	8002c12 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c0a:	6878      	ldr	r0, [r7, #4]
 8002c0c:	f000 f98a 	bl	8002f24 <HAL_TIM_IC_CaptureCallback>
 8002c10:	e005      	b.n	8002c1e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c12:	6878      	ldr	r0, [r7, #4]
 8002c14:	f000 f97d 	bl	8002f12 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c18:	6878      	ldr	r0, [r7, #4]
 8002c1a:	f000 f98c 	bl	8002f36 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2200      	movs	r2, #0
 8002c22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	691b      	ldr	r3, [r3, #16]
 8002c2a:	f003 0308 	and.w	r3, r3, #8
 8002c2e:	2b08      	cmp	r3, #8
 8002c30:	d122      	bne.n	8002c78 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	68db      	ldr	r3, [r3, #12]
 8002c38:	f003 0308 	and.w	r3, r3, #8
 8002c3c:	2b08      	cmp	r3, #8
 8002c3e:	d11b      	bne.n	8002c78 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f06f 0208 	mvn.w	r2, #8
 8002c48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2204      	movs	r2, #4
 8002c4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	69db      	ldr	r3, [r3, #28]
 8002c56:	f003 0303 	and.w	r3, r3, #3
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d003      	beq.n	8002c66 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c5e:	6878      	ldr	r0, [r7, #4]
 8002c60:	f000 f960 	bl	8002f24 <HAL_TIM_IC_CaptureCallback>
 8002c64:	e005      	b.n	8002c72 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c66:	6878      	ldr	r0, [r7, #4]
 8002c68:	f000 f953 	bl	8002f12 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c6c:	6878      	ldr	r0, [r7, #4]
 8002c6e:	f000 f962 	bl	8002f36 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2200      	movs	r2, #0
 8002c76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	691b      	ldr	r3, [r3, #16]
 8002c7e:	f003 0310 	and.w	r3, r3, #16
 8002c82:	2b10      	cmp	r3, #16
 8002c84:	d122      	bne.n	8002ccc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	68db      	ldr	r3, [r3, #12]
 8002c8c:	f003 0310 	and.w	r3, r3, #16
 8002c90:	2b10      	cmp	r3, #16
 8002c92:	d11b      	bne.n	8002ccc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f06f 0210 	mvn.w	r2, #16
 8002c9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2208      	movs	r2, #8
 8002ca2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	69db      	ldr	r3, [r3, #28]
 8002caa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d003      	beq.n	8002cba <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002cb2:	6878      	ldr	r0, [r7, #4]
 8002cb4:	f000 f936 	bl	8002f24 <HAL_TIM_IC_CaptureCallback>
 8002cb8:	e005      	b.n	8002cc6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cba:	6878      	ldr	r0, [r7, #4]
 8002cbc:	f000 f929 	bl	8002f12 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002cc0:	6878      	ldr	r0, [r7, #4]
 8002cc2:	f000 f938 	bl	8002f36 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2200      	movs	r2, #0
 8002cca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	691b      	ldr	r3, [r3, #16]
 8002cd2:	f003 0301 	and.w	r3, r3, #1
 8002cd6:	2b01      	cmp	r3, #1
 8002cd8:	d10e      	bne.n	8002cf8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	68db      	ldr	r3, [r3, #12]
 8002ce0:	f003 0301 	and.w	r3, r3, #1
 8002ce4:	2b01      	cmp	r3, #1
 8002ce6:	d107      	bne.n	8002cf8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f06f 0201 	mvn.w	r2, #1
 8002cf0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002cf2:	6878      	ldr	r0, [r7, #4]
 8002cf4:	f7fe fb68 	bl	80013c8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	691b      	ldr	r3, [r3, #16]
 8002cfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d02:	2b80      	cmp	r3, #128	; 0x80
 8002d04:	d10e      	bne.n	8002d24 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	68db      	ldr	r3, [r3, #12]
 8002d0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d10:	2b80      	cmp	r3, #128	; 0x80
 8002d12:	d107      	bne.n	8002d24 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002d1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002d1e:	6878      	ldr	r0, [r7, #4]
 8002d20:	f000 fa6b 	bl	80031fa <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	691b      	ldr	r3, [r3, #16]
 8002d2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d2e:	2b40      	cmp	r3, #64	; 0x40
 8002d30:	d10e      	bne.n	8002d50 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	68db      	ldr	r3, [r3, #12]
 8002d38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d3c:	2b40      	cmp	r3, #64	; 0x40
 8002d3e:	d107      	bne.n	8002d50 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002d48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002d4a:	6878      	ldr	r0, [r7, #4]
 8002d4c:	f000 f8fc 	bl	8002f48 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	691b      	ldr	r3, [r3, #16]
 8002d56:	f003 0320 	and.w	r3, r3, #32
 8002d5a:	2b20      	cmp	r3, #32
 8002d5c:	d10e      	bne.n	8002d7c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	68db      	ldr	r3, [r3, #12]
 8002d64:	f003 0320 	and.w	r3, r3, #32
 8002d68:	2b20      	cmp	r3, #32
 8002d6a:	d107      	bne.n	8002d7c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f06f 0220 	mvn.w	r2, #32
 8002d74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002d76:	6878      	ldr	r0, [r7, #4]
 8002d78:	f000 fa36 	bl	80031e8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002d7c:	bf00      	nop
 8002d7e:	3708      	adds	r7, #8
 8002d80:	46bd      	mov	sp, r7
 8002d82:	bd80      	pop	{r7, pc}

08002d84 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b084      	sub	sp, #16
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
 8002d8c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002d8e:	2300      	movs	r3, #0
 8002d90:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d98:	2b01      	cmp	r3, #1
 8002d9a:	d101      	bne.n	8002da0 <HAL_TIM_ConfigClockSource+0x1c>
 8002d9c:	2302      	movs	r3, #2
 8002d9e:	e0b4      	b.n	8002f0a <HAL_TIM_ConfigClockSource+0x186>
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2201      	movs	r2, #1
 8002da4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2202      	movs	r2, #2
 8002dac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	689b      	ldr	r3, [r3, #8]
 8002db6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002db8:	68bb      	ldr	r3, [r7, #8]
 8002dba:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002dbe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002dc0:	68bb      	ldr	r3, [r7, #8]
 8002dc2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002dc6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	68ba      	ldr	r2, [r7, #8]
 8002dce:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002dd8:	d03e      	beq.n	8002e58 <HAL_TIM_ConfigClockSource+0xd4>
 8002dda:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002dde:	f200 8087 	bhi.w	8002ef0 <HAL_TIM_ConfigClockSource+0x16c>
 8002de2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002de6:	f000 8086 	beq.w	8002ef6 <HAL_TIM_ConfigClockSource+0x172>
 8002dea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002dee:	d87f      	bhi.n	8002ef0 <HAL_TIM_ConfigClockSource+0x16c>
 8002df0:	2b70      	cmp	r3, #112	; 0x70
 8002df2:	d01a      	beq.n	8002e2a <HAL_TIM_ConfigClockSource+0xa6>
 8002df4:	2b70      	cmp	r3, #112	; 0x70
 8002df6:	d87b      	bhi.n	8002ef0 <HAL_TIM_ConfigClockSource+0x16c>
 8002df8:	2b60      	cmp	r3, #96	; 0x60
 8002dfa:	d050      	beq.n	8002e9e <HAL_TIM_ConfigClockSource+0x11a>
 8002dfc:	2b60      	cmp	r3, #96	; 0x60
 8002dfe:	d877      	bhi.n	8002ef0 <HAL_TIM_ConfigClockSource+0x16c>
 8002e00:	2b50      	cmp	r3, #80	; 0x50
 8002e02:	d03c      	beq.n	8002e7e <HAL_TIM_ConfigClockSource+0xfa>
 8002e04:	2b50      	cmp	r3, #80	; 0x50
 8002e06:	d873      	bhi.n	8002ef0 <HAL_TIM_ConfigClockSource+0x16c>
 8002e08:	2b40      	cmp	r3, #64	; 0x40
 8002e0a:	d058      	beq.n	8002ebe <HAL_TIM_ConfigClockSource+0x13a>
 8002e0c:	2b40      	cmp	r3, #64	; 0x40
 8002e0e:	d86f      	bhi.n	8002ef0 <HAL_TIM_ConfigClockSource+0x16c>
 8002e10:	2b30      	cmp	r3, #48	; 0x30
 8002e12:	d064      	beq.n	8002ede <HAL_TIM_ConfigClockSource+0x15a>
 8002e14:	2b30      	cmp	r3, #48	; 0x30
 8002e16:	d86b      	bhi.n	8002ef0 <HAL_TIM_ConfigClockSource+0x16c>
 8002e18:	2b20      	cmp	r3, #32
 8002e1a:	d060      	beq.n	8002ede <HAL_TIM_ConfigClockSource+0x15a>
 8002e1c:	2b20      	cmp	r3, #32
 8002e1e:	d867      	bhi.n	8002ef0 <HAL_TIM_ConfigClockSource+0x16c>
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d05c      	beq.n	8002ede <HAL_TIM_ConfigClockSource+0x15a>
 8002e24:	2b10      	cmp	r3, #16
 8002e26:	d05a      	beq.n	8002ede <HAL_TIM_ConfigClockSource+0x15a>
 8002e28:	e062      	b.n	8002ef0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002e3a:	f000 f95e 	bl	80030fa <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	689b      	ldr	r3, [r3, #8]
 8002e44:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002e46:	68bb      	ldr	r3, [r7, #8]
 8002e48:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002e4c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	68ba      	ldr	r2, [r7, #8]
 8002e54:	609a      	str	r2, [r3, #8]
      break;
 8002e56:	e04f      	b.n	8002ef8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002e68:	f000 f947 	bl	80030fa <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	689a      	ldr	r2, [r3, #8]
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002e7a:	609a      	str	r2, [r3, #8]
      break;
 8002e7c:	e03c      	b.n	8002ef8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e8a:	461a      	mov	r2, r3
 8002e8c:	f000 f8be 	bl	800300c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	2150      	movs	r1, #80	; 0x50
 8002e96:	4618      	mov	r0, r3
 8002e98:	f000 f915 	bl	80030c6 <TIM_ITRx_SetConfig>
      break;
 8002e9c:	e02c      	b.n	8002ef8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002eaa:	461a      	mov	r2, r3
 8002eac:	f000 f8dc 	bl	8003068 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	2160      	movs	r1, #96	; 0x60
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	f000 f905 	bl	80030c6 <TIM_ITRx_SetConfig>
      break;
 8002ebc:	e01c      	b.n	8002ef8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002eca:	461a      	mov	r2, r3
 8002ecc:	f000 f89e 	bl	800300c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	2140      	movs	r1, #64	; 0x40
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	f000 f8f5 	bl	80030c6 <TIM_ITRx_SetConfig>
      break;
 8002edc:	e00c      	b.n	8002ef8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681a      	ldr	r2, [r3, #0]
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4619      	mov	r1, r3
 8002ee8:	4610      	mov	r0, r2
 8002eea:	f000 f8ec 	bl	80030c6 <TIM_ITRx_SetConfig>
      break;
 8002eee:	e003      	b.n	8002ef8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	73fb      	strb	r3, [r7, #15]
      break;
 8002ef4:	e000      	b.n	8002ef8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002ef6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2201      	movs	r2, #1
 8002efc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2200      	movs	r2, #0
 8002f04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002f08:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	3710      	adds	r7, #16
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bd80      	pop	{r7, pc}

08002f12 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002f12:	b480      	push	{r7}
 8002f14:	b083      	sub	sp, #12
 8002f16:	af00      	add	r7, sp, #0
 8002f18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002f1a:	bf00      	nop
 8002f1c:	370c      	adds	r7, #12
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	bc80      	pop	{r7}
 8002f22:	4770      	bx	lr

08002f24 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002f24:	b480      	push	{r7}
 8002f26:	b083      	sub	sp, #12
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002f2c:	bf00      	nop
 8002f2e:	370c      	adds	r7, #12
 8002f30:	46bd      	mov	sp, r7
 8002f32:	bc80      	pop	{r7}
 8002f34:	4770      	bx	lr

08002f36 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002f36:	b480      	push	{r7}
 8002f38:	b083      	sub	sp, #12
 8002f3a:	af00      	add	r7, sp, #0
 8002f3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002f3e:	bf00      	nop
 8002f40:	370c      	adds	r7, #12
 8002f42:	46bd      	mov	sp, r7
 8002f44:	bc80      	pop	{r7}
 8002f46:	4770      	bx	lr

08002f48 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002f48:	b480      	push	{r7}
 8002f4a:	b083      	sub	sp, #12
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002f50:	bf00      	nop
 8002f52:	370c      	adds	r7, #12
 8002f54:	46bd      	mov	sp, r7
 8002f56:	bc80      	pop	{r7}
 8002f58:	4770      	bx	lr
	...

08002f5c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	b085      	sub	sp, #20
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
 8002f64:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	4a25      	ldr	r2, [pc, #148]	; (8003004 <TIM_Base_SetConfig+0xa8>)
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d007      	beq.n	8002f84 <TIM_Base_SetConfig+0x28>
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f7a:	d003      	beq.n	8002f84 <TIM_Base_SetConfig+0x28>
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	4a22      	ldr	r2, [pc, #136]	; (8003008 <TIM_Base_SetConfig+0xac>)
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d108      	bne.n	8002f96 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f8a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	68fa      	ldr	r2, [r7, #12]
 8002f92:	4313      	orrs	r3, r2
 8002f94:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	4a1a      	ldr	r2, [pc, #104]	; (8003004 <TIM_Base_SetConfig+0xa8>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d007      	beq.n	8002fae <TIM_Base_SetConfig+0x52>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fa4:	d003      	beq.n	8002fae <TIM_Base_SetConfig+0x52>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	4a17      	ldr	r2, [pc, #92]	; (8003008 <TIM_Base_SetConfig+0xac>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d108      	bne.n	8002fc0 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002fb4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	68db      	ldr	r3, [r3, #12]
 8002fba:	68fa      	ldr	r2, [r7, #12]
 8002fbc:	4313      	orrs	r3, r2
 8002fbe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	695b      	ldr	r3, [r3, #20]
 8002fca:	4313      	orrs	r3, r2
 8002fcc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	68fa      	ldr	r2, [r7, #12]
 8002fd2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	689a      	ldr	r2, [r3, #8]
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	681a      	ldr	r2, [r3, #0]
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	4a07      	ldr	r2, [pc, #28]	; (8003004 <TIM_Base_SetConfig+0xa8>)
 8002fe8:	4293      	cmp	r3, r2
 8002fea:	d103      	bne.n	8002ff4 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	691a      	ldr	r2, [r3, #16]
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2201      	movs	r2, #1
 8002ff8:	615a      	str	r2, [r3, #20]
}
 8002ffa:	bf00      	nop
 8002ffc:	3714      	adds	r7, #20
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bc80      	pop	{r7}
 8003002:	4770      	bx	lr
 8003004:	40012c00 	.word	0x40012c00
 8003008:	40000400 	.word	0x40000400

0800300c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800300c:	b480      	push	{r7}
 800300e:	b087      	sub	sp, #28
 8003010:	af00      	add	r7, sp, #0
 8003012:	60f8      	str	r0, [r7, #12]
 8003014:	60b9      	str	r1, [r7, #8]
 8003016:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	6a1b      	ldr	r3, [r3, #32]
 800301c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	6a1b      	ldr	r3, [r3, #32]
 8003022:	f023 0201 	bic.w	r2, r3, #1
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	699b      	ldr	r3, [r3, #24]
 800302e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003030:	693b      	ldr	r3, [r7, #16]
 8003032:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003036:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	011b      	lsls	r3, r3, #4
 800303c:	693a      	ldr	r2, [r7, #16]
 800303e:	4313      	orrs	r3, r2
 8003040:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003042:	697b      	ldr	r3, [r7, #20]
 8003044:	f023 030a 	bic.w	r3, r3, #10
 8003048:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800304a:	697a      	ldr	r2, [r7, #20]
 800304c:	68bb      	ldr	r3, [r7, #8]
 800304e:	4313      	orrs	r3, r2
 8003050:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	693a      	ldr	r2, [r7, #16]
 8003056:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	697a      	ldr	r2, [r7, #20]
 800305c:	621a      	str	r2, [r3, #32]
}
 800305e:	bf00      	nop
 8003060:	371c      	adds	r7, #28
 8003062:	46bd      	mov	sp, r7
 8003064:	bc80      	pop	{r7}
 8003066:	4770      	bx	lr

08003068 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003068:	b480      	push	{r7}
 800306a:	b087      	sub	sp, #28
 800306c:	af00      	add	r7, sp, #0
 800306e:	60f8      	str	r0, [r7, #12]
 8003070:	60b9      	str	r1, [r7, #8]
 8003072:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	6a1b      	ldr	r3, [r3, #32]
 8003078:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	6a1b      	ldr	r3, [r3, #32]
 800307e:	f023 0210 	bic.w	r2, r3, #16
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	699b      	ldr	r3, [r3, #24]
 800308a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800308c:	693b      	ldr	r3, [r7, #16]
 800308e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003092:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	031b      	lsls	r3, r3, #12
 8003098:	693a      	ldr	r2, [r7, #16]
 800309a:	4313      	orrs	r3, r2
 800309c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800309e:	697b      	ldr	r3, [r7, #20]
 80030a0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80030a4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80030a6:	68bb      	ldr	r3, [r7, #8]
 80030a8:	011b      	lsls	r3, r3, #4
 80030aa:	697a      	ldr	r2, [r7, #20]
 80030ac:	4313      	orrs	r3, r2
 80030ae:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	693a      	ldr	r2, [r7, #16]
 80030b4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	697a      	ldr	r2, [r7, #20]
 80030ba:	621a      	str	r2, [r3, #32]
}
 80030bc:	bf00      	nop
 80030be:	371c      	adds	r7, #28
 80030c0:	46bd      	mov	sp, r7
 80030c2:	bc80      	pop	{r7}
 80030c4:	4770      	bx	lr

080030c6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80030c6:	b480      	push	{r7}
 80030c8:	b085      	sub	sp, #20
 80030ca:	af00      	add	r7, sp, #0
 80030cc:	6078      	str	r0, [r7, #4]
 80030ce:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	689b      	ldr	r3, [r3, #8]
 80030d4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030dc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80030de:	683a      	ldr	r2, [r7, #0]
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	4313      	orrs	r3, r2
 80030e4:	f043 0307 	orr.w	r3, r3, #7
 80030e8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	68fa      	ldr	r2, [r7, #12]
 80030ee:	609a      	str	r2, [r3, #8]
}
 80030f0:	bf00      	nop
 80030f2:	3714      	adds	r7, #20
 80030f4:	46bd      	mov	sp, r7
 80030f6:	bc80      	pop	{r7}
 80030f8:	4770      	bx	lr

080030fa <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80030fa:	b480      	push	{r7}
 80030fc:	b087      	sub	sp, #28
 80030fe:	af00      	add	r7, sp, #0
 8003100:	60f8      	str	r0, [r7, #12]
 8003102:	60b9      	str	r1, [r7, #8]
 8003104:	607a      	str	r2, [r7, #4]
 8003106:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	689b      	ldr	r3, [r3, #8]
 800310c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800310e:	697b      	ldr	r3, [r7, #20]
 8003110:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003114:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	021a      	lsls	r2, r3, #8
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	431a      	orrs	r2, r3
 800311e:	68bb      	ldr	r3, [r7, #8]
 8003120:	4313      	orrs	r3, r2
 8003122:	697a      	ldr	r2, [r7, #20]
 8003124:	4313      	orrs	r3, r2
 8003126:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	697a      	ldr	r2, [r7, #20]
 800312c:	609a      	str	r2, [r3, #8]
}
 800312e:	bf00      	nop
 8003130:	371c      	adds	r7, #28
 8003132:	46bd      	mov	sp, r7
 8003134:	bc80      	pop	{r7}
 8003136:	4770      	bx	lr

08003138 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003138:	b480      	push	{r7}
 800313a:	b085      	sub	sp, #20
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
 8003140:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003148:	2b01      	cmp	r3, #1
 800314a:	d101      	bne.n	8003150 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800314c:	2302      	movs	r3, #2
 800314e:	e041      	b.n	80031d4 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2201      	movs	r2, #1
 8003154:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2202      	movs	r2, #2
 800315c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	685b      	ldr	r3, [r3, #4]
 8003166:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	689b      	ldr	r3, [r3, #8]
 800316e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003176:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	68fa      	ldr	r2, [r7, #12]
 800317e:	4313      	orrs	r3, r2
 8003180:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	68fa      	ldr	r2, [r7, #12]
 8003188:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4a14      	ldr	r2, [pc, #80]	; (80031e0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8003190:	4293      	cmp	r3, r2
 8003192:	d009      	beq.n	80031a8 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800319c:	d004      	beq.n	80031a8 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4a10      	ldr	r2, [pc, #64]	; (80031e4 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d10c      	bne.n	80031c2 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80031a8:	68bb      	ldr	r3, [r7, #8]
 80031aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80031ae:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	68ba      	ldr	r2, [r7, #8]
 80031b6:	4313      	orrs	r3, r2
 80031b8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	68ba      	ldr	r2, [r7, #8]
 80031c0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2201      	movs	r2, #1
 80031c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2200      	movs	r2, #0
 80031ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80031d2:	2300      	movs	r3, #0
}
 80031d4:	4618      	mov	r0, r3
 80031d6:	3714      	adds	r7, #20
 80031d8:	46bd      	mov	sp, r7
 80031da:	bc80      	pop	{r7}
 80031dc:	4770      	bx	lr
 80031de:	bf00      	nop
 80031e0:	40012c00 	.word	0x40012c00
 80031e4:	40000400 	.word	0x40000400

080031e8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80031e8:	b480      	push	{r7}
 80031ea:	b083      	sub	sp, #12
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80031f0:	bf00      	nop
 80031f2:	370c      	adds	r7, #12
 80031f4:	46bd      	mov	sp, r7
 80031f6:	bc80      	pop	{r7}
 80031f8:	4770      	bx	lr

080031fa <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80031fa:	b480      	push	{r7}
 80031fc:	b083      	sub	sp, #12
 80031fe:	af00      	add	r7, sp, #0
 8003200:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003202:	bf00      	nop
 8003204:	370c      	adds	r7, #12
 8003206:	46bd      	mov	sp, r7
 8003208:	bc80      	pop	{r7}
 800320a:	4770      	bx	lr

0800320c <memset>:
 800320c:	4603      	mov	r3, r0
 800320e:	4402      	add	r2, r0
 8003210:	4293      	cmp	r3, r2
 8003212:	d100      	bne.n	8003216 <memset+0xa>
 8003214:	4770      	bx	lr
 8003216:	f803 1b01 	strb.w	r1, [r3], #1
 800321a:	e7f9      	b.n	8003210 <memset+0x4>

0800321c <__libc_init_array>:
 800321c:	b570      	push	{r4, r5, r6, lr}
 800321e:	2600      	movs	r6, #0
 8003220:	4d0c      	ldr	r5, [pc, #48]	; (8003254 <__libc_init_array+0x38>)
 8003222:	4c0d      	ldr	r4, [pc, #52]	; (8003258 <__libc_init_array+0x3c>)
 8003224:	1b64      	subs	r4, r4, r5
 8003226:	10a4      	asrs	r4, r4, #2
 8003228:	42a6      	cmp	r6, r4
 800322a:	d109      	bne.n	8003240 <__libc_init_array+0x24>
 800322c:	f000 f81a 	bl	8003264 <_init>
 8003230:	2600      	movs	r6, #0
 8003232:	4d0a      	ldr	r5, [pc, #40]	; (800325c <__libc_init_array+0x40>)
 8003234:	4c0a      	ldr	r4, [pc, #40]	; (8003260 <__libc_init_array+0x44>)
 8003236:	1b64      	subs	r4, r4, r5
 8003238:	10a4      	asrs	r4, r4, #2
 800323a:	42a6      	cmp	r6, r4
 800323c:	d105      	bne.n	800324a <__libc_init_array+0x2e>
 800323e:	bd70      	pop	{r4, r5, r6, pc}
 8003240:	f855 3b04 	ldr.w	r3, [r5], #4
 8003244:	4798      	blx	r3
 8003246:	3601      	adds	r6, #1
 8003248:	e7ee      	b.n	8003228 <__libc_init_array+0xc>
 800324a:	f855 3b04 	ldr.w	r3, [r5], #4
 800324e:	4798      	blx	r3
 8003250:	3601      	adds	r6, #1
 8003252:	e7f2      	b.n	800323a <__libc_init_array+0x1e>
 8003254:	080032a0 	.word	0x080032a0
 8003258:	080032a0 	.word	0x080032a0
 800325c:	080032a0 	.word	0x080032a0
 8003260:	080032a4 	.word	0x080032a4

08003264 <_init>:
 8003264:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003266:	bf00      	nop
 8003268:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800326a:	bc08      	pop	{r3}
 800326c:	469e      	mov	lr, r3
 800326e:	4770      	bx	lr

08003270 <_fini>:
 8003270:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003272:	bf00      	nop
 8003274:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003276:	bc08      	pop	{r3}
 8003278:	469e      	mov	lr, r3
 800327a:	4770      	bx	lr
