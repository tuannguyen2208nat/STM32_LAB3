
STM32_LAB3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002988  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002a94  08002a94  00012a94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002ab8  08002ab8  00020018  2**0
                  CONTENTS
  4 .ARM          00000000  08002ab8  08002ab8  00020018  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002ab8  08002ab8  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002ab8  08002ab8  00012ab8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002abc  08002abc  00012abc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  08002ac0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d0  20000018  08002ad8  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000e8  08002ad8  000200e8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020041  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000844f  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001a58  00000000  00000000  000284d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a70  00000000  00000000  00029f30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000007e4  00000000  00000000  0002a9a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00016c82  00000000  00000000  0002b184  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000c223  00000000  00000000  00041e06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008243b  00000000  00000000  0004e029  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000291c  00000000  00000000  000d0464  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  000d2d80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000018 	.word	0x20000018
 8000128:	00000000 	.word	0x00000000
 800012c:	08002a7c 	.word	0x08002a7c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000001c 	.word	0x2000001c
 8000148:	08002a7c 	.word	0x08002a7c

0800014c <update7SEGa>:
 *      Author: tuann
 */
#include "display.h"

 void update7SEGa ( int index )
  {
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
    switch ( index )
 8000154:	687b      	ldr	r3, [r7, #4]
 8000156:	2b00      	cmp	r3, #0
 8000158:	d003      	beq.n	8000162 <update7SEGa+0x16>
 800015a:	687b      	ldr	r3, [r7, #4]
 800015c:	2b01      	cmp	r3, #1
 800015e:	d00c      	beq.n	800017a <update7SEGa+0x2e>
        break ;
    case 1:
	    HAL_GPIO_WritePin(en0_GPIO_Port,en0_Pin, SET);
	    HAL_GPIO_WritePin(en1_GPIO_Port,en1_Pin, RESET);
        break ;
    default : break ;
 8000160:	e017      	b.n	8000192 <update7SEGa+0x46>
	    HAL_GPIO_WritePin(en0_GPIO_Port,en0_Pin, RESET);
 8000162:	2200      	movs	r2, #0
 8000164:	2180      	movs	r1, #128	; 0x80
 8000166:	480d      	ldr	r0, [pc, #52]	; (800019c <update7SEGa+0x50>)
 8000168:	f001 fc7e 	bl	8001a68 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(en1_GPIO_Port,en1_Pin, SET);
 800016c:	2201      	movs	r2, #1
 800016e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000172:	480a      	ldr	r0, [pc, #40]	; (800019c <update7SEGa+0x50>)
 8000174:	f001 fc78 	bl	8001a68 <HAL_GPIO_WritePin>
        break ;
 8000178:	e00b      	b.n	8000192 <update7SEGa+0x46>
	    HAL_GPIO_WritePin(en0_GPIO_Port,en0_Pin, SET);
 800017a:	2201      	movs	r2, #1
 800017c:	2180      	movs	r1, #128	; 0x80
 800017e:	4807      	ldr	r0, [pc, #28]	; (800019c <update7SEGa+0x50>)
 8000180:	f001 fc72 	bl	8001a68 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(en1_GPIO_Port,en1_Pin, RESET);
 8000184:	2200      	movs	r2, #0
 8000186:	f44f 7180 	mov.w	r1, #256	; 0x100
 800018a:	4804      	ldr	r0, [pc, #16]	; (800019c <update7SEGa+0x50>)
 800018c:	f001 fc6c 	bl	8001a68 <HAL_GPIO_WritePin>
        break ;
 8000190:	bf00      	nop
    }
  }
 8000192:	bf00      	nop
 8000194:	3708      	adds	r7, #8
 8000196:	46bd      	mov	sp, r7
 8000198:	bd80      	pop	{r7, pc}
 800019a:	bf00      	nop
 800019c:	40010800 	.word	0x40010800

080001a0 <update7SEGb>:

 void update7SEGb ( int index )
  {
 80001a0:	b580      	push	{r7, lr}
 80001a2:	b082      	sub	sp, #8
 80001a4:	af00      	add	r7, sp, #0
 80001a6:	6078      	str	r0, [r7, #4]
    switch ( index )
 80001a8:	687b      	ldr	r3, [r7, #4]
 80001aa:	2b00      	cmp	r3, #0
 80001ac:	d003      	beq.n	80001b6 <update7SEGb+0x16>
 80001ae:	687b      	ldr	r3, [r7, #4]
 80001b0:	2b01      	cmp	r3, #1
 80001b2:	d00d      	beq.n	80001d0 <update7SEGb+0x30>
        break ;
    case 1:
	    HAL_GPIO_WritePin(en2_GPIO_Port,en2_Pin, SET);
	    HAL_GPIO_WritePin(en3_GPIO_Port,en3_Pin, RESET);
        break ;
    default : break ;
 80001b4:	e019      	b.n	80001ea <update7SEGb+0x4a>
	    HAL_GPIO_WritePin(en2_GPIO_Port,en2_Pin, RESET);
 80001b6:	2200      	movs	r2, #0
 80001b8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80001bc:	480d      	ldr	r0, [pc, #52]	; (80001f4 <update7SEGb+0x54>)
 80001be:	f001 fc53 	bl	8001a68 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(en3_GPIO_Port,en3_Pin, SET);
 80001c2:	2201      	movs	r2, #1
 80001c4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80001c8:	480a      	ldr	r0, [pc, #40]	; (80001f4 <update7SEGb+0x54>)
 80001ca:	f001 fc4d 	bl	8001a68 <HAL_GPIO_WritePin>
        break ;
 80001ce:	e00c      	b.n	80001ea <update7SEGb+0x4a>
	    HAL_GPIO_WritePin(en2_GPIO_Port,en2_Pin, SET);
 80001d0:	2201      	movs	r2, #1
 80001d2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80001d6:	4807      	ldr	r0, [pc, #28]	; (80001f4 <update7SEGb+0x54>)
 80001d8:	f001 fc46 	bl	8001a68 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(en3_GPIO_Port,en3_Pin, RESET);
 80001dc:	2200      	movs	r2, #0
 80001de:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80001e2:	4804      	ldr	r0, [pc, #16]	; (80001f4 <update7SEGb+0x54>)
 80001e4:	f001 fc40 	bl	8001a68 <HAL_GPIO_WritePin>
        break ;
 80001e8:	bf00      	nop
    }
  }
 80001ea:	bf00      	nop
 80001ec:	3708      	adds	r7, #8
 80001ee:	46bd      	mov	sp, r7
 80001f0:	bd80      	pop	{r7, pc}
 80001f2:	bf00      	nop
 80001f4:	40010800 	.word	0x40010800

080001f8 <display7SEGa>:

 void display7SEGa(int index)
  {
 80001f8:	b580      	push	{r7, lr}
 80001fa:	b082      	sub	sp, #8
 80001fc:	af00      	add	r7, sp, #0
 80001fe:	6078      	str	r0, [r7, #4]
  	switch (index)
 8000200:	687b      	ldr	r3, [r7, #4]
 8000202:	2b06      	cmp	r3, #6
 8000204:	f200 810e 	bhi.w	8000424 <display7SEGa+0x22c>
 8000208:	a201      	add	r2, pc, #4	; (adr r2, 8000210 <display7SEGa+0x18>)
 800020a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800020e:	bf00      	nop
 8000210:	0800022d 	.word	0x0800022d
 8000214:	08000275 	.word	0x08000275
 8000218:	080002bd 	.word	0x080002bd
 800021c:	08000305 	.word	0x08000305
 8000220:	0800034d 	.word	0x0800034d
 8000224:	08000395 	.word	0x08000395
 8000228:	080003dd 	.word	0x080003dd
  	{
  	case 0 :
  		HAL_GPIO_WritePin(chan1a_GPIO_Port,chan1a_Pin, RESET);
 800022c:	2200      	movs	r2, #0
 800022e:	2101      	movs	r1, #1
 8000230:	487f      	ldr	r0, [pc, #508]	; (8000430 <display7SEGa+0x238>)
 8000232:	f001 fc19 	bl	8001a68 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(chan1b_GPIO_Port,chan1b_Pin, RESET);
 8000236:	2200      	movs	r2, #0
 8000238:	2102      	movs	r1, #2
 800023a:	487d      	ldr	r0, [pc, #500]	; (8000430 <display7SEGa+0x238>)
 800023c:	f001 fc14 	bl	8001a68 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(chan1c_GPIO_Port,chan1c_Pin, RESET);
 8000240:	2200      	movs	r2, #0
 8000242:	2104      	movs	r1, #4
 8000244:	487a      	ldr	r0, [pc, #488]	; (8000430 <display7SEGa+0x238>)
 8000246:	f001 fc0f 	bl	8001a68 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(chan1d_GPIO_Port,chan1d_Pin, RESET);
 800024a:	2200      	movs	r2, #0
 800024c:	2108      	movs	r1, #8
 800024e:	4878      	ldr	r0, [pc, #480]	; (8000430 <display7SEGa+0x238>)
 8000250:	f001 fc0a 	bl	8001a68 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(chan1e_GPIO_Port,chan1e_Pin, RESET);
 8000254:	2200      	movs	r2, #0
 8000256:	2110      	movs	r1, #16
 8000258:	4875      	ldr	r0, [pc, #468]	; (8000430 <display7SEGa+0x238>)
 800025a:	f001 fc05 	bl	8001a68 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(chan1f_GPIO_Port,chan1f_Pin, RESET);
 800025e:	2200      	movs	r2, #0
 8000260:	2120      	movs	r1, #32
 8000262:	4873      	ldr	r0, [pc, #460]	; (8000430 <display7SEGa+0x238>)
 8000264:	f001 fc00 	bl	8001a68 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(chan1g_GPIO_Port,chan1g_Pin, SET);
 8000268:	2201      	movs	r2, #1
 800026a:	2140      	movs	r1, #64	; 0x40
 800026c:	4870      	ldr	r0, [pc, #448]	; (8000430 <display7SEGa+0x238>)
 800026e:	f001 fbfb 	bl	8001a68 <HAL_GPIO_WritePin>
  	    break ;
 8000272:	e0d8      	b.n	8000426 <display7SEGa+0x22e>
  	case 1 :
  		HAL_GPIO_WritePin(chan1a_GPIO_Port,chan1a_Pin, SET);
 8000274:	2201      	movs	r2, #1
 8000276:	2101      	movs	r1, #1
 8000278:	486d      	ldr	r0, [pc, #436]	; (8000430 <display7SEGa+0x238>)
 800027a:	f001 fbf5 	bl	8001a68 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(chan1b_GPIO_Port,chan1b_Pin, RESET);
 800027e:	2200      	movs	r2, #0
 8000280:	2102      	movs	r1, #2
 8000282:	486b      	ldr	r0, [pc, #428]	; (8000430 <display7SEGa+0x238>)
 8000284:	f001 fbf0 	bl	8001a68 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(chan1c_GPIO_Port,chan1c_Pin, RESET);
 8000288:	2200      	movs	r2, #0
 800028a:	2104      	movs	r1, #4
 800028c:	4868      	ldr	r0, [pc, #416]	; (8000430 <display7SEGa+0x238>)
 800028e:	f001 fbeb 	bl	8001a68 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(chan1d_GPIO_Port,chan1d_Pin, SET);
 8000292:	2201      	movs	r2, #1
 8000294:	2108      	movs	r1, #8
 8000296:	4866      	ldr	r0, [pc, #408]	; (8000430 <display7SEGa+0x238>)
 8000298:	f001 fbe6 	bl	8001a68 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(chan1e_GPIO_Port,chan1e_Pin, SET);
 800029c:	2201      	movs	r2, #1
 800029e:	2110      	movs	r1, #16
 80002a0:	4863      	ldr	r0, [pc, #396]	; (8000430 <display7SEGa+0x238>)
 80002a2:	f001 fbe1 	bl	8001a68 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(chan1f_GPIO_Port,chan1f_Pin, SET);
 80002a6:	2201      	movs	r2, #1
 80002a8:	2120      	movs	r1, #32
 80002aa:	4861      	ldr	r0, [pc, #388]	; (8000430 <display7SEGa+0x238>)
 80002ac:	f001 fbdc 	bl	8001a68 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(chan1g_GPIO_Port,chan1g_Pin, SET);
 80002b0:	2201      	movs	r2, #1
 80002b2:	2140      	movs	r1, #64	; 0x40
 80002b4:	485e      	ldr	r0, [pc, #376]	; (8000430 <display7SEGa+0x238>)
 80002b6:	f001 fbd7 	bl	8001a68 <HAL_GPIO_WritePin>
  	    break;
 80002ba:	e0b4      	b.n	8000426 <display7SEGa+0x22e>
  	case 2 :
  		HAL_GPIO_WritePin(chan1a_GPIO_Port,chan1a_Pin, RESET);
 80002bc:	2200      	movs	r2, #0
 80002be:	2101      	movs	r1, #1
 80002c0:	485b      	ldr	r0, [pc, #364]	; (8000430 <display7SEGa+0x238>)
 80002c2:	f001 fbd1 	bl	8001a68 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(chan1b_GPIO_Port,chan1b_Pin, RESET);
 80002c6:	2200      	movs	r2, #0
 80002c8:	2102      	movs	r1, #2
 80002ca:	4859      	ldr	r0, [pc, #356]	; (8000430 <display7SEGa+0x238>)
 80002cc:	f001 fbcc 	bl	8001a68 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(chan1c_GPIO_Port,chan1c_Pin, SET);
 80002d0:	2201      	movs	r2, #1
 80002d2:	2104      	movs	r1, #4
 80002d4:	4856      	ldr	r0, [pc, #344]	; (8000430 <display7SEGa+0x238>)
 80002d6:	f001 fbc7 	bl	8001a68 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(chan1d_GPIO_Port,chan1d_Pin, RESET);
 80002da:	2200      	movs	r2, #0
 80002dc:	2108      	movs	r1, #8
 80002de:	4854      	ldr	r0, [pc, #336]	; (8000430 <display7SEGa+0x238>)
 80002e0:	f001 fbc2 	bl	8001a68 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(chan1e_GPIO_Port,chan1e_Pin, RESET);
 80002e4:	2200      	movs	r2, #0
 80002e6:	2110      	movs	r1, #16
 80002e8:	4851      	ldr	r0, [pc, #324]	; (8000430 <display7SEGa+0x238>)
 80002ea:	f001 fbbd 	bl	8001a68 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(chan1f_GPIO_Port,chan1f_Pin, SET);
 80002ee:	2201      	movs	r2, #1
 80002f0:	2120      	movs	r1, #32
 80002f2:	484f      	ldr	r0, [pc, #316]	; (8000430 <display7SEGa+0x238>)
 80002f4:	f001 fbb8 	bl	8001a68 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(chan1g_GPIO_Port,chan1g_Pin, RESET);
 80002f8:	2200      	movs	r2, #0
 80002fa:	2140      	movs	r1, #64	; 0x40
 80002fc:	484c      	ldr	r0, [pc, #304]	; (8000430 <display7SEGa+0x238>)
 80002fe:	f001 fbb3 	bl	8001a68 <HAL_GPIO_WritePin>
  	    break ;
 8000302:	e090      	b.n	8000426 <display7SEGa+0x22e>
  	case 3 :
  		HAL_GPIO_WritePin(chan1a_GPIO_Port,chan1a_Pin, RESET);
 8000304:	2200      	movs	r2, #0
 8000306:	2101      	movs	r1, #1
 8000308:	4849      	ldr	r0, [pc, #292]	; (8000430 <display7SEGa+0x238>)
 800030a:	f001 fbad 	bl	8001a68 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(chan1b_GPIO_Port,chan1b_Pin, RESET);
 800030e:	2200      	movs	r2, #0
 8000310:	2102      	movs	r1, #2
 8000312:	4847      	ldr	r0, [pc, #284]	; (8000430 <display7SEGa+0x238>)
 8000314:	f001 fba8 	bl	8001a68 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(chan1c_GPIO_Port,chan1c_Pin, RESET);
 8000318:	2200      	movs	r2, #0
 800031a:	2104      	movs	r1, #4
 800031c:	4844      	ldr	r0, [pc, #272]	; (8000430 <display7SEGa+0x238>)
 800031e:	f001 fba3 	bl	8001a68 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(chan1d_GPIO_Port,chan1d_Pin, RESET);
 8000322:	2200      	movs	r2, #0
 8000324:	2108      	movs	r1, #8
 8000326:	4842      	ldr	r0, [pc, #264]	; (8000430 <display7SEGa+0x238>)
 8000328:	f001 fb9e 	bl	8001a68 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(chan1e_GPIO_Port,chan1e_Pin, SET);
 800032c:	2201      	movs	r2, #1
 800032e:	2110      	movs	r1, #16
 8000330:	483f      	ldr	r0, [pc, #252]	; (8000430 <display7SEGa+0x238>)
 8000332:	f001 fb99 	bl	8001a68 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(chan1f_GPIO_Port,chan1f_Pin, SET);
 8000336:	2201      	movs	r2, #1
 8000338:	2120      	movs	r1, #32
 800033a:	483d      	ldr	r0, [pc, #244]	; (8000430 <display7SEGa+0x238>)
 800033c:	f001 fb94 	bl	8001a68 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(chan1g_GPIO_Port,chan1g_Pin, RESET);
 8000340:	2200      	movs	r2, #0
 8000342:	2140      	movs	r1, #64	; 0x40
 8000344:	483a      	ldr	r0, [pc, #232]	; (8000430 <display7SEGa+0x238>)
 8000346:	f001 fb8f 	bl	8001a68 <HAL_GPIO_WritePin>
  	    break ;
 800034a:	e06c      	b.n	8000426 <display7SEGa+0x22e>
  	case 4 :
  		HAL_GPIO_WritePin(chan1a_GPIO_Port,chan1a_Pin, SET);
 800034c:	2201      	movs	r2, #1
 800034e:	2101      	movs	r1, #1
 8000350:	4837      	ldr	r0, [pc, #220]	; (8000430 <display7SEGa+0x238>)
 8000352:	f001 fb89 	bl	8001a68 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(chan1b_GPIO_Port,chan1b_Pin, RESET);
 8000356:	2200      	movs	r2, #0
 8000358:	2102      	movs	r1, #2
 800035a:	4835      	ldr	r0, [pc, #212]	; (8000430 <display7SEGa+0x238>)
 800035c:	f001 fb84 	bl	8001a68 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(chan1c_GPIO_Port,chan1c_Pin, RESET);
 8000360:	2200      	movs	r2, #0
 8000362:	2104      	movs	r1, #4
 8000364:	4832      	ldr	r0, [pc, #200]	; (8000430 <display7SEGa+0x238>)
 8000366:	f001 fb7f 	bl	8001a68 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(chan1d_GPIO_Port,chan1d_Pin, SET);
 800036a:	2201      	movs	r2, #1
 800036c:	2108      	movs	r1, #8
 800036e:	4830      	ldr	r0, [pc, #192]	; (8000430 <display7SEGa+0x238>)
 8000370:	f001 fb7a 	bl	8001a68 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(chan1e_GPIO_Port,chan1e_Pin, SET);
 8000374:	2201      	movs	r2, #1
 8000376:	2110      	movs	r1, #16
 8000378:	482d      	ldr	r0, [pc, #180]	; (8000430 <display7SEGa+0x238>)
 800037a:	f001 fb75 	bl	8001a68 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(chan1f_GPIO_Port,chan1f_Pin, RESET);
 800037e:	2200      	movs	r2, #0
 8000380:	2120      	movs	r1, #32
 8000382:	482b      	ldr	r0, [pc, #172]	; (8000430 <display7SEGa+0x238>)
 8000384:	f001 fb70 	bl	8001a68 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(chan1g_GPIO_Port,chan1g_Pin, RESET);
 8000388:	2200      	movs	r2, #0
 800038a:	2140      	movs	r1, #64	; 0x40
 800038c:	4828      	ldr	r0, [pc, #160]	; (8000430 <display7SEGa+0x238>)
 800038e:	f001 fb6b 	bl	8001a68 <HAL_GPIO_WritePin>
  		break ;
 8000392:	e048      	b.n	8000426 <display7SEGa+0x22e>
  	case 5 :
  		HAL_GPIO_WritePin(chan1a_GPIO_Port,chan1a_Pin, RESET);
 8000394:	2200      	movs	r2, #0
 8000396:	2101      	movs	r1, #1
 8000398:	4825      	ldr	r0, [pc, #148]	; (8000430 <display7SEGa+0x238>)
 800039a:	f001 fb65 	bl	8001a68 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(chan1b_GPIO_Port,chan1b_Pin, SET);
 800039e:	2201      	movs	r2, #1
 80003a0:	2102      	movs	r1, #2
 80003a2:	4823      	ldr	r0, [pc, #140]	; (8000430 <display7SEGa+0x238>)
 80003a4:	f001 fb60 	bl	8001a68 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(chan1c_GPIO_Port,chan1c_Pin, RESET);
 80003a8:	2200      	movs	r2, #0
 80003aa:	2104      	movs	r1, #4
 80003ac:	4820      	ldr	r0, [pc, #128]	; (8000430 <display7SEGa+0x238>)
 80003ae:	f001 fb5b 	bl	8001a68 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(chan1d_GPIO_Port,chan1d_Pin, RESET);
 80003b2:	2200      	movs	r2, #0
 80003b4:	2108      	movs	r1, #8
 80003b6:	481e      	ldr	r0, [pc, #120]	; (8000430 <display7SEGa+0x238>)
 80003b8:	f001 fb56 	bl	8001a68 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(chan1e_GPIO_Port,chan1e_Pin, SET);
 80003bc:	2201      	movs	r2, #1
 80003be:	2110      	movs	r1, #16
 80003c0:	481b      	ldr	r0, [pc, #108]	; (8000430 <display7SEGa+0x238>)
 80003c2:	f001 fb51 	bl	8001a68 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(chan1f_GPIO_Port,chan1f_Pin, RESET);
 80003c6:	2200      	movs	r2, #0
 80003c8:	2120      	movs	r1, #32
 80003ca:	4819      	ldr	r0, [pc, #100]	; (8000430 <display7SEGa+0x238>)
 80003cc:	f001 fb4c 	bl	8001a68 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(chan1g_GPIO_Port,chan1g_Pin, RESET);
 80003d0:	2200      	movs	r2, #0
 80003d2:	2140      	movs	r1, #64	; 0x40
 80003d4:	4816      	ldr	r0, [pc, #88]	; (8000430 <display7SEGa+0x238>)
 80003d6:	f001 fb47 	bl	8001a68 <HAL_GPIO_WritePin>
  		break ;
 80003da:	e024      	b.n	8000426 <display7SEGa+0x22e>
  	case 6 :
  	  	HAL_GPIO_WritePin(chan1a_GPIO_Port,chan1a_Pin, RESET);
 80003dc:	2200      	movs	r2, #0
 80003de:	2101      	movs	r1, #1
 80003e0:	4813      	ldr	r0, [pc, #76]	; (8000430 <display7SEGa+0x238>)
 80003e2:	f001 fb41 	bl	8001a68 <HAL_GPIO_WritePin>
  	  	HAL_GPIO_WritePin(chan1b_GPIO_Port,chan1b_Pin, SET);
 80003e6:	2201      	movs	r2, #1
 80003e8:	2102      	movs	r1, #2
 80003ea:	4811      	ldr	r0, [pc, #68]	; (8000430 <display7SEGa+0x238>)
 80003ec:	f001 fb3c 	bl	8001a68 <HAL_GPIO_WritePin>
  	  	HAL_GPIO_WritePin(chan1c_GPIO_Port,chan1c_Pin, RESET);
 80003f0:	2200      	movs	r2, #0
 80003f2:	2104      	movs	r1, #4
 80003f4:	480e      	ldr	r0, [pc, #56]	; (8000430 <display7SEGa+0x238>)
 80003f6:	f001 fb37 	bl	8001a68 <HAL_GPIO_WritePin>
  	  	HAL_GPIO_WritePin(chan1d_GPIO_Port,chan1d_Pin, RESET);
 80003fa:	2200      	movs	r2, #0
 80003fc:	2108      	movs	r1, #8
 80003fe:	480c      	ldr	r0, [pc, #48]	; (8000430 <display7SEGa+0x238>)
 8000400:	f001 fb32 	bl	8001a68 <HAL_GPIO_WritePin>
  	  	HAL_GPIO_WritePin(chan1e_GPIO_Port,chan1e_Pin, RESET);
 8000404:	2200      	movs	r2, #0
 8000406:	2110      	movs	r1, #16
 8000408:	4809      	ldr	r0, [pc, #36]	; (8000430 <display7SEGa+0x238>)
 800040a:	f001 fb2d 	bl	8001a68 <HAL_GPIO_WritePin>
  	  	HAL_GPIO_WritePin(chan1f_GPIO_Port,chan1f_Pin, RESET);
 800040e:	2200      	movs	r2, #0
 8000410:	2120      	movs	r1, #32
 8000412:	4807      	ldr	r0, [pc, #28]	; (8000430 <display7SEGa+0x238>)
 8000414:	f001 fb28 	bl	8001a68 <HAL_GPIO_WritePin>
  	  	HAL_GPIO_WritePin(chan1g_GPIO_Port,chan1g_Pin, RESET);
 8000418:	2200      	movs	r2, #0
 800041a:	2140      	movs	r1, #64	; 0x40
 800041c:	4804      	ldr	r0, [pc, #16]	; (8000430 <display7SEGa+0x238>)
 800041e:	f001 fb23 	bl	8001a68 <HAL_GPIO_WritePin>
  	  	break ;
 8000422:	e000      	b.n	8000426 <display7SEGa+0x22e>
  	default : break;
 8000424:	bf00      	nop
  	}
  }
 8000426:	bf00      	nop
 8000428:	3708      	adds	r7, #8
 800042a:	46bd      	mov	sp, r7
 800042c:	bd80      	pop	{r7, pc}
 800042e:	bf00      	nop
 8000430:	40010c00 	.word	0x40010c00

08000434 <display7SEGb>:


  void display7SEGb(int index)
   {
 8000434:	b580      	push	{r7, lr}
 8000436:	b082      	sub	sp, #8
 8000438:	af00      	add	r7, sp, #0
 800043a:	6078      	str	r0, [r7, #4]
   	switch (index)
 800043c:	687b      	ldr	r3, [r7, #4]
 800043e:	2b06      	cmp	r3, #6
 8000440:	f200 8138 	bhi.w	80006b4 <display7SEGb+0x280>
 8000444:	a201      	add	r2, pc, #4	; (adr r2, 800044c <display7SEGb+0x18>)
 8000446:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800044a:	bf00      	nop
 800044c:	08000469 	.word	0x08000469
 8000450:	080004bd 	.word	0x080004bd
 8000454:	08000511 	.word	0x08000511
 8000458:	08000565 	.word	0x08000565
 800045c:	080005b9 	.word	0x080005b9
 8000460:	0800060d 	.word	0x0800060d
 8000464:	08000661 	.word	0x08000661
   	{
   	case 0 :
   		HAL_GPIO_WritePin(chan2a_GPIO_Port,chan2a_Pin, RESET);
 8000468:	2200      	movs	r2, #0
 800046a:	2180      	movs	r1, #128	; 0x80
 800046c:	4894      	ldr	r0, [pc, #592]	; (80006c0 <display7SEGb+0x28c>)
 800046e:	f001 fafb 	bl	8001a68 <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(chan2b_GPIO_Port,chan2b_Pin, RESET);
 8000472:	2200      	movs	r2, #0
 8000474:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000478:	4891      	ldr	r0, [pc, #580]	; (80006c0 <display7SEGb+0x28c>)
 800047a:	f001 faf5 	bl	8001a68 <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(chan2c_GPIO_Port,chan2c_Pin, RESET);
 800047e:	2200      	movs	r2, #0
 8000480:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000484:	488e      	ldr	r0, [pc, #568]	; (80006c0 <display7SEGb+0x28c>)
 8000486:	f001 faef 	bl	8001a68 <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(chan2d_GPIO_Port,chan2d_Pin, RESET);
 800048a:	2200      	movs	r2, #0
 800048c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000490:	488b      	ldr	r0, [pc, #556]	; (80006c0 <display7SEGb+0x28c>)
 8000492:	f001 fae9 	bl	8001a68 <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(chan2e_GPIO_Port,chan2e_Pin, RESET);
 8000496:	2200      	movs	r2, #0
 8000498:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800049c:	4888      	ldr	r0, [pc, #544]	; (80006c0 <display7SEGb+0x28c>)
 800049e:	f001 fae3 	bl	8001a68 <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(chan2f_GPIO_Port,chan2f_Pin, RESET);
 80004a2:	2200      	movs	r2, #0
 80004a4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80004a8:	4886      	ldr	r0, [pc, #536]	; (80006c4 <display7SEGb+0x290>)
 80004aa:	f001 fadd 	bl	8001a68 <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(chan2g_GPIO_Port,chan2g_Pin, SET);
 80004ae:	2201      	movs	r2, #1
 80004b0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004b4:	4883      	ldr	r0, [pc, #524]	; (80006c4 <display7SEGb+0x290>)
 80004b6:	f001 fad7 	bl	8001a68 <HAL_GPIO_WritePin>
   	    break ;
 80004ba:	e0fc      	b.n	80006b6 <display7SEGb+0x282>
   	case 1 :
   		HAL_GPIO_WritePin(chan2a_GPIO_Port,chan2a_Pin, SET);
 80004bc:	2201      	movs	r2, #1
 80004be:	2180      	movs	r1, #128	; 0x80
 80004c0:	487f      	ldr	r0, [pc, #508]	; (80006c0 <display7SEGb+0x28c>)
 80004c2:	f001 fad1 	bl	8001a68 <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(chan2b_GPIO_Port,chan2b_Pin, RESET);
 80004c6:	2200      	movs	r2, #0
 80004c8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80004cc:	487c      	ldr	r0, [pc, #496]	; (80006c0 <display7SEGb+0x28c>)
 80004ce:	f001 facb 	bl	8001a68 <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(chan2c_GPIO_Port,chan2c_Pin, RESET);
 80004d2:	2200      	movs	r2, #0
 80004d4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80004d8:	4879      	ldr	r0, [pc, #484]	; (80006c0 <display7SEGb+0x28c>)
 80004da:	f001 fac5 	bl	8001a68 <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(chan2d_GPIO_Port,chan2d_Pin, SET);
 80004de:	2201      	movs	r2, #1
 80004e0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80004e4:	4876      	ldr	r0, [pc, #472]	; (80006c0 <display7SEGb+0x28c>)
 80004e6:	f001 fabf 	bl	8001a68 <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(chan2e_GPIO_Port,chan2e_Pin, SET);
 80004ea:	2201      	movs	r2, #1
 80004ec:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80004f0:	4873      	ldr	r0, [pc, #460]	; (80006c0 <display7SEGb+0x28c>)
 80004f2:	f001 fab9 	bl	8001a68 <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(chan2f_GPIO_Port,chan2f_Pin, SET);
 80004f6:	2201      	movs	r2, #1
 80004f8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80004fc:	4871      	ldr	r0, [pc, #452]	; (80006c4 <display7SEGb+0x290>)
 80004fe:	f001 fab3 	bl	8001a68 <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(chan2g_GPIO_Port,chan2g_Pin, SET);
 8000502:	2201      	movs	r2, #1
 8000504:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000508:	486e      	ldr	r0, [pc, #440]	; (80006c4 <display7SEGb+0x290>)
 800050a:	f001 faad 	bl	8001a68 <HAL_GPIO_WritePin>
   	    break;
 800050e:	e0d2      	b.n	80006b6 <display7SEGb+0x282>
   	case 2 :
   		HAL_GPIO_WritePin(chan2a_GPIO_Port,chan2a_Pin, RESET);
 8000510:	2200      	movs	r2, #0
 8000512:	2180      	movs	r1, #128	; 0x80
 8000514:	486a      	ldr	r0, [pc, #424]	; (80006c0 <display7SEGb+0x28c>)
 8000516:	f001 faa7 	bl	8001a68 <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(chan2b_GPIO_Port,chan2b_Pin, RESET);
 800051a:	2200      	movs	r2, #0
 800051c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000520:	4867      	ldr	r0, [pc, #412]	; (80006c0 <display7SEGb+0x28c>)
 8000522:	f001 faa1 	bl	8001a68 <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(chan2c_GPIO_Port,chan2c_Pin, SET);
 8000526:	2201      	movs	r2, #1
 8000528:	f44f 7100 	mov.w	r1, #512	; 0x200
 800052c:	4864      	ldr	r0, [pc, #400]	; (80006c0 <display7SEGb+0x28c>)
 800052e:	f001 fa9b 	bl	8001a68 <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(chan2d_GPIO_Port,chan2d_Pin, RESET);
 8000532:	2200      	movs	r2, #0
 8000534:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000538:	4861      	ldr	r0, [pc, #388]	; (80006c0 <display7SEGb+0x28c>)
 800053a:	f001 fa95 	bl	8001a68 <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(chan2e_GPIO_Port,chan2e_Pin, RESET);
 800053e:	2200      	movs	r2, #0
 8000540:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000544:	485e      	ldr	r0, [pc, #376]	; (80006c0 <display7SEGb+0x28c>)
 8000546:	f001 fa8f 	bl	8001a68 <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(chan2f_GPIO_Port,chan2f_Pin, SET);
 800054a:	2201      	movs	r2, #1
 800054c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000550:	485c      	ldr	r0, [pc, #368]	; (80006c4 <display7SEGb+0x290>)
 8000552:	f001 fa89 	bl	8001a68 <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(chan2g_GPIO_Port,chan2g_Pin, RESET);
 8000556:	2200      	movs	r2, #0
 8000558:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800055c:	4859      	ldr	r0, [pc, #356]	; (80006c4 <display7SEGb+0x290>)
 800055e:	f001 fa83 	bl	8001a68 <HAL_GPIO_WritePin>
   	    break ;
 8000562:	e0a8      	b.n	80006b6 <display7SEGb+0x282>
   	case 3 :
   		HAL_GPIO_WritePin(chan2a_GPIO_Port,chan2a_Pin, RESET);
 8000564:	2200      	movs	r2, #0
 8000566:	2180      	movs	r1, #128	; 0x80
 8000568:	4855      	ldr	r0, [pc, #340]	; (80006c0 <display7SEGb+0x28c>)
 800056a:	f001 fa7d 	bl	8001a68 <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(chan2b_GPIO_Port,chan2b_Pin, RESET);
 800056e:	2200      	movs	r2, #0
 8000570:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000574:	4852      	ldr	r0, [pc, #328]	; (80006c0 <display7SEGb+0x28c>)
 8000576:	f001 fa77 	bl	8001a68 <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(chan2c_GPIO_Port,chan2c_Pin, RESET);
 800057a:	2200      	movs	r2, #0
 800057c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000580:	484f      	ldr	r0, [pc, #316]	; (80006c0 <display7SEGb+0x28c>)
 8000582:	f001 fa71 	bl	8001a68 <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(chan2d_GPIO_Port,chan2d_Pin, RESET);
 8000586:	2200      	movs	r2, #0
 8000588:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800058c:	484c      	ldr	r0, [pc, #304]	; (80006c0 <display7SEGb+0x28c>)
 800058e:	f001 fa6b 	bl	8001a68 <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(chan2e_GPIO_Port,chan2e_Pin, SET);
 8000592:	2201      	movs	r2, #1
 8000594:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000598:	4849      	ldr	r0, [pc, #292]	; (80006c0 <display7SEGb+0x28c>)
 800059a:	f001 fa65 	bl	8001a68 <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(chan2f_GPIO_Port,chan2f_Pin, SET);
 800059e:	2201      	movs	r2, #1
 80005a0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005a4:	4847      	ldr	r0, [pc, #284]	; (80006c4 <display7SEGb+0x290>)
 80005a6:	f001 fa5f 	bl	8001a68 <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(chan2g_GPIO_Port,chan2g_Pin, RESET);
 80005aa:	2200      	movs	r2, #0
 80005ac:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005b0:	4844      	ldr	r0, [pc, #272]	; (80006c4 <display7SEGb+0x290>)
 80005b2:	f001 fa59 	bl	8001a68 <HAL_GPIO_WritePin>
   	    break ;
 80005b6:	e07e      	b.n	80006b6 <display7SEGb+0x282>
   	case 4 :
   		HAL_GPIO_WritePin(chan2a_GPIO_Port,chan2a_Pin, SET);
 80005b8:	2201      	movs	r2, #1
 80005ba:	2180      	movs	r1, #128	; 0x80
 80005bc:	4840      	ldr	r0, [pc, #256]	; (80006c0 <display7SEGb+0x28c>)
 80005be:	f001 fa53 	bl	8001a68 <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(chan2b_GPIO_Port,chan2b_Pin, RESET);
 80005c2:	2200      	movs	r2, #0
 80005c4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005c8:	483d      	ldr	r0, [pc, #244]	; (80006c0 <display7SEGb+0x28c>)
 80005ca:	f001 fa4d 	bl	8001a68 <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(chan2c_GPIO_Port,chan2c_Pin, RESET);
 80005ce:	2200      	movs	r2, #0
 80005d0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005d4:	483a      	ldr	r0, [pc, #232]	; (80006c0 <display7SEGb+0x28c>)
 80005d6:	f001 fa47 	bl	8001a68 <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(chan2d_GPIO_Port,chan2d_Pin, SET);
 80005da:	2201      	movs	r2, #1
 80005dc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005e0:	4837      	ldr	r0, [pc, #220]	; (80006c0 <display7SEGb+0x28c>)
 80005e2:	f001 fa41 	bl	8001a68 <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(chan2e_GPIO_Port,chan2e_Pin, SET);
 80005e6:	2201      	movs	r2, #1
 80005e8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80005ec:	4834      	ldr	r0, [pc, #208]	; (80006c0 <display7SEGb+0x28c>)
 80005ee:	f001 fa3b 	bl	8001a68 <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(chan2f_GPIO_Port,chan2f_Pin, RESET);
 80005f2:	2200      	movs	r2, #0
 80005f4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005f8:	4832      	ldr	r0, [pc, #200]	; (80006c4 <display7SEGb+0x290>)
 80005fa:	f001 fa35 	bl	8001a68 <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(chan2g_GPIO_Port,chan2g_Pin, RESET);
 80005fe:	2200      	movs	r2, #0
 8000600:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000604:	482f      	ldr	r0, [pc, #188]	; (80006c4 <display7SEGb+0x290>)
 8000606:	f001 fa2f 	bl	8001a68 <HAL_GPIO_WritePin>
   		break ;
 800060a:	e054      	b.n	80006b6 <display7SEGb+0x282>
   	case 5 :
   		HAL_GPIO_WritePin(chan2a_GPIO_Port,chan2a_Pin, RESET);
 800060c:	2200      	movs	r2, #0
 800060e:	2180      	movs	r1, #128	; 0x80
 8000610:	482b      	ldr	r0, [pc, #172]	; (80006c0 <display7SEGb+0x28c>)
 8000612:	f001 fa29 	bl	8001a68 <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(chan2b_GPIO_Port,chan2b_Pin, SET);
 8000616:	2201      	movs	r2, #1
 8000618:	f44f 7180 	mov.w	r1, #256	; 0x100
 800061c:	4828      	ldr	r0, [pc, #160]	; (80006c0 <display7SEGb+0x28c>)
 800061e:	f001 fa23 	bl	8001a68 <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(chan2c_GPIO_Port,chan2c_Pin, RESET);
 8000622:	2200      	movs	r2, #0
 8000624:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000628:	4825      	ldr	r0, [pc, #148]	; (80006c0 <display7SEGb+0x28c>)
 800062a:	f001 fa1d 	bl	8001a68 <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(chan2d_GPIO_Port,chan2d_Pin, RESET);
 800062e:	2200      	movs	r2, #0
 8000630:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000634:	4822      	ldr	r0, [pc, #136]	; (80006c0 <display7SEGb+0x28c>)
 8000636:	f001 fa17 	bl	8001a68 <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(chan2e_GPIO_Port,chan2e_Pin, SET);
 800063a:	2201      	movs	r2, #1
 800063c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000640:	481f      	ldr	r0, [pc, #124]	; (80006c0 <display7SEGb+0x28c>)
 8000642:	f001 fa11 	bl	8001a68 <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(chan2f_GPIO_Port,chan2f_Pin, RESET);
 8000646:	2200      	movs	r2, #0
 8000648:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800064c:	481d      	ldr	r0, [pc, #116]	; (80006c4 <display7SEGb+0x290>)
 800064e:	f001 fa0b 	bl	8001a68 <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(chan2g_GPIO_Port,chan2g_Pin, RESET);
 8000652:	2200      	movs	r2, #0
 8000654:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000658:	481a      	ldr	r0, [pc, #104]	; (80006c4 <display7SEGb+0x290>)
 800065a:	f001 fa05 	bl	8001a68 <HAL_GPIO_WritePin>
   		break ;
 800065e:	e02a      	b.n	80006b6 <display7SEGb+0x282>
   	case 6 :
   	   	HAL_GPIO_WritePin(chan2a_GPIO_Port,chan2a_Pin, RESET);
 8000660:	2200      	movs	r2, #0
 8000662:	2180      	movs	r1, #128	; 0x80
 8000664:	4816      	ldr	r0, [pc, #88]	; (80006c0 <display7SEGb+0x28c>)
 8000666:	f001 f9ff 	bl	8001a68 <HAL_GPIO_WritePin>
   	   	HAL_GPIO_WritePin(chan2b_GPIO_Port,chan2b_Pin, SET);
 800066a:	2201      	movs	r2, #1
 800066c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000670:	4813      	ldr	r0, [pc, #76]	; (80006c0 <display7SEGb+0x28c>)
 8000672:	f001 f9f9 	bl	8001a68 <HAL_GPIO_WritePin>
   	   	HAL_GPIO_WritePin(chan2c_GPIO_Port,chan2c_Pin, RESET);
 8000676:	2200      	movs	r2, #0
 8000678:	f44f 7100 	mov.w	r1, #512	; 0x200
 800067c:	4810      	ldr	r0, [pc, #64]	; (80006c0 <display7SEGb+0x28c>)
 800067e:	f001 f9f3 	bl	8001a68 <HAL_GPIO_WritePin>
   	   	HAL_GPIO_WritePin(chan2d_GPIO_Port,chan2d_Pin, RESET);
 8000682:	2200      	movs	r2, #0
 8000684:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000688:	480d      	ldr	r0, [pc, #52]	; (80006c0 <display7SEGb+0x28c>)
 800068a:	f001 f9ed 	bl	8001a68 <HAL_GPIO_WritePin>
   	   	HAL_GPIO_WritePin(chan2e_GPIO_Port,chan2e_Pin, RESET);
 800068e:	2200      	movs	r2, #0
 8000690:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000694:	480a      	ldr	r0, [pc, #40]	; (80006c0 <display7SEGb+0x28c>)
 8000696:	f001 f9e7 	bl	8001a68 <HAL_GPIO_WritePin>
   	   	HAL_GPIO_WritePin(chan2f_GPIO_Port,chan2f_Pin, RESET);
 800069a:	2200      	movs	r2, #0
 800069c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006a0:	4808      	ldr	r0, [pc, #32]	; (80006c4 <display7SEGb+0x290>)
 80006a2:	f001 f9e1 	bl	8001a68 <HAL_GPIO_WritePin>
   	   	HAL_GPIO_WritePin(chan2g_GPIO_Port,chan2g_Pin, RESET);
 80006a6:	2200      	movs	r2, #0
 80006a8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006ac:	4805      	ldr	r0, [pc, #20]	; (80006c4 <display7SEGb+0x290>)
 80006ae:	f001 f9db 	bl	8001a68 <HAL_GPIO_WritePin>
   	   	break;
 80006b2:	e000      	b.n	80006b6 <display7SEGb+0x282>
   	default : break;
 80006b4:	bf00      	nop
   	}
   }
 80006b6:	bf00      	nop
 80006b8:	3708      	adds	r7, #8
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	bf00      	nop
 80006c0:	40010c00 	.word	0x40010c00
 80006c4:	40010800 	.word	0x40010800

080006c8 <fsm_run1>:

int duration =0 ;
int duration2 =0 ;

void fsm_run1()
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	af00      	add	r7, sp, #0
	switch(status1)
 80006cc:	4b33      	ldr	r3, [pc, #204]	; (800079c <fsm_run1+0xd4>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	2b03      	cmp	r3, #3
 80006d2:	d85a      	bhi.n	800078a <fsm_run1+0xc2>
 80006d4:	a201      	add	r2, pc, #4	; (adr r2, 80006dc <fsm_run1+0x14>)
 80006d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006da:	bf00      	nop
 80006dc:	080006ed 	.word	0x080006ed
 80006e0:	0800070d 	.word	0x0800070d
 80006e4:	08000737 	.word	0x08000737
 80006e8:	08000761 	.word	0x08000761
	{
	case INIT :
		turn_off();
 80006ec:	f000 f8e0 	bl	80008b0 <turn_off>
		status1=auto_red;
 80006f0:	4b2a      	ldr	r3, [pc, #168]	; (800079c <fsm_run1+0xd4>)
 80006f2:	2201      	movs	r2, #1
 80006f4:	601a      	str	r2, [r3, #0]
		duration=timer1+50;
 80006f6:	4b2a      	ldr	r3, [pc, #168]	; (80007a0 <fsm_run1+0xd8>)
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	3332      	adds	r3, #50	; 0x32
 80006fc:	4a29      	ldr	r2, [pc, #164]	; (80007a4 <fsm_run1+0xdc>)
 80006fe:	6013      	str	r3, [r2, #0]
		settimer1(duration);
 8000700:	4b28      	ldr	r3, [pc, #160]	; (80007a4 <fsm_run1+0xdc>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	4618      	mov	r0, r3
 8000706:	f000 fa9d 	bl	8000c44 <settimer1>
		break;
 800070a:	e045      	b.n	8000798 <fsm_run1+0xd0>
	case auto_red:
		turn_on(0);
 800070c:	2000      	movs	r0, #0
 800070e:	f000 f8f3 	bl	80008f8 <turn_on>
		if(timer1_flag==1)
 8000712:	4b25      	ldr	r3, [pc, #148]	; (80007a8 <fsm_run1+0xe0>)
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	2b01      	cmp	r3, #1
 8000718:	d139      	bne.n	800078e <fsm_run1+0xc6>
		{
			status1=auto_green;
 800071a:	4b20      	ldr	r3, [pc, #128]	; (800079c <fsm_run1+0xd4>)
 800071c:	2202      	movs	r2, #2
 800071e:	601a      	str	r2, [r3, #0]
			duration=timer2+50;
 8000720:	4b22      	ldr	r3, [pc, #136]	; (80007ac <fsm_run1+0xe4>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	3332      	adds	r3, #50	; 0x32
 8000726:	4a1f      	ldr	r2, [pc, #124]	; (80007a4 <fsm_run1+0xdc>)
 8000728:	6013      	str	r3, [r2, #0]
			settimer1(duration);
 800072a:	4b1e      	ldr	r3, [pc, #120]	; (80007a4 <fsm_run1+0xdc>)
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	4618      	mov	r0, r3
 8000730:	f000 fa88 	bl	8000c44 <settimer1>
		}
		break;
 8000734:	e02b      	b.n	800078e <fsm_run1+0xc6>
	case auto_green :
		turn_on(1);
 8000736:	2001      	movs	r0, #1
 8000738:	f000 f8de 	bl	80008f8 <turn_on>
		if(timer1_flag==1)
 800073c:	4b1a      	ldr	r3, [pc, #104]	; (80007a8 <fsm_run1+0xe0>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	2b01      	cmp	r3, #1
 8000742:	d126      	bne.n	8000792 <fsm_run1+0xca>
		{
			status1=auto_yellow;
 8000744:	4b15      	ldr	r3, [pc, #84]	; (800079c <fsm_run1+0xd4>)
 8000746:	2203      	movs	r2, #3
 8000748:	601a      	str	r2, [r3, #0]
			duration=timer3+50;
 800074a:	4b19      	ldr	r3, [pc, #100]	; (80007b0 <fsm_run1+0xe8>)
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	3332      	adds	r3, #50	; 0x32
 8000750:	4a14      	ldr	r2, [pc, #80]	; (80007a4 <fsm_run1+0xdc>)
 8000752:	6013      	str	r3, [r2, #0]
			settimer1(duration);
 8000754:	4b13      	ldr	r3, [pc, #76]	; (80007a4 <fsm_run1+0xdc>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	4618      	mov	r0, r3
 800075a:	f000 fa73 	bl	8000c44 <settimer1>
		}
		break;
 800075e:	e018      	b.n	8000792 <fsm_run1+0xca>
	case auto_yellow :
		turn_on(2);
 8000760:	2002      	movs	r0, #2
 8000762:	f000 f8c9 	bl	80008f8 <turn_on>
		if(timer1_flag==1)
 8000766:	4b10      	ldr	r3, [pc, #64]	; (80007a8 <fsm_run1+0xe0>)
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	2b01      	cmp	r3, #1
 800076c:	d113      	bne.n	8000796 <fsm_run1+0xce>
		{
			status1=auto_red;
 800076e:	4b0b      	ldr	r3, [pc, #44]	; (800079c <fsm_run1+0xd4>)
 8000770:	2201      	movs	r2, #1
 8000772:	601a      	str	r2, [r3, #0]
			duration=timer1+50;
 8000774:	4b0a      	ldr	r3, [pc, #40]	; (80007a0 <fsm_run1+0xd8>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	3332      	adds	r3, #50	; 0x32
 800077a:	4a0a      	ldr	r2, [pc, #40]	; (80007a4 <fsm_run1+0xdc>)
 800077c:	6013      	str	r3, [r2, #0]
			settimer1(duration);
 800077e:	4b09      	ldr	r3, [pc, #36]	; (80007a4 <fsm_run1+0xdc>)
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	4618      	mov	r0, r3
 8000784:	f000 fa5e 	bl	8000c44 <settimer1>
		}
		break;
 8000788:	e005      	b.n	8000796 <fsm_run1+0xce>
	default :  break;
 800078a:	bf00      	nop
 800078c:	e004      	b.n	8000798 <fsm_run1+0xd0>
		break;
 800078e:	bf00      	nop
 8000790:	e002      	b.n	8000798 <fsm_run1+0xd0>
		break;
 8000792:	bf00      	nop
 8000794:	e000      	b.n	8000798 <fsm_run1+0xd0>
		break;
 8000796:	bf00      	nop
	}
}
 8000798:	bf00      	nop
 800079a:	bd80      	pop	{r7, pc}
 800079c:	2000003c 	.word	0x2000003c
 80007a0:	20000000 	.word	0x20000000
 80007a4:	20000034 	.word	0x20000034
 80007a8:	20000098 	.word	0x20000098
 80007ac:	20000004 	.word	0x20000004
 80007b0:	20000008 	.word	0x20000008

080007b4 <fsm_run2>:

void fsm_run2()
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	af00      	add	r7, sp, #0
	switch(status2)
 80007b8:	4b33      	ldr	r3, [pc, #204]	; (8000888 <fsm_run2+0xd4>)
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	2b03      	cmp	r3, #3
 80007be:	d85a      	bhi.n	8000876 <fsm_run2+0xc2>
 80007c0:	a201      	add	r2, pc, #4	; (adr r2, 80007c8 <fsm_run2+0x14>)
 80007c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007c6:	bf00      	nop
 80007c8:	080007d9 	.word	0x080007d9
 80007cc:	080007f9 	.word	0x080007f9
 80007d0:	08000823 	.word	0x08000823
 80007d4:	0800084d 	.word	0x0800084d
	{
	case INIT :
		turn_off();
 80007d8:	f000 f86a 	bl	80008b0 <turn_off>
		status2=auto_green;
 80007dc:	4b2a      	ldr	r3, [pc, #168]	; (8000888 <fsm_run2+0xd4>)
 80007de:	2202      	movs	r2, #2
 80007e0:	601a      	str	r2, [r3, #0]
		duration2=timer2+50;
 80007e2:	4b2a      	ldr	r3, [pc, #168]	; (800088c <fsm_run2+0xd8>)
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	3332      	adds	r3, #50	; 0x32
 80007e8:	4a29      	ldr	r2, [pc, #164]	; (8000890 <fsm_run2+0xdc>)
 80007ea:	6013      	str	r3, [r2, #0]
		settimer2(duration2);
 80007ec:	4b28      	ldr	r3, [pc, #160]	; (8000890 <fsm_run2+0xdc>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	4618      	mov	r0, r3
 80007f2:	f000 fa3b 	bl	8000c6c <settimer2>
		break;
 80007f6:	e045      	b.n	8000884 <fsm_run2+0xd0>
	case auto_red:
		turn_on2(0);
 80007f8:	2000      	movs	r0, #0
 80007fa:	f000 f8c5 	bl	8000988 <turn_on2>
		if(timer2_flag==1)
 80007fe:	4b25      	ldr	r3, [pc, #148]	; (8000894 <fsm_run2+0xe0>)
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	2b01      	cmp	r3, #1
 8000804:	d139      	bne.n	800087a <fsm_run2+0xc6>
		{
			status2=auto_green;
 8000806:	4b20      	ldr	r3, [pc, #128]	; (8000888 <fsm_run2+0xd4>)
 8000808:	2202      	movs	r2, #2
 800080a:	601a      	str	r2, [r3, #0]
			duration2=timer2+50;
 800080c:	4b1f      	ldr	r3, [pc, #124]	; (800088c <fsm_run2+0xd8>)
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	3332      	adds	r3, #50	; 0x32
 8000812:	4a1f      	ldr	r2, [pc, #124]	; (8000890 <fsm_run2+0xdc>)
 8000814:	6013      	str	r3, [r2, #0]
			settimer2(duration2);
 8000816:	4b1e      	ldr	r3, [pc, #120]	; (8000890 <fsm_run2+0xdc>)
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	4618      	mov	r0, r3
 800081c:	f000 fa26 	bl	8000c6c <settimer2>
		}
		break;
 8000820:	e02b      	b.n	800087a <fsm_run2+0xc6>
	case auto_green :
		turn_on2(1);
 8000822:	2001      	movs	r0, #1
 8000824:	f000 f8b0 	bl	8000988 <turn_on2>
		if(timer2_flag==1)
 8000828:	4b1a      	ldr	r3, [pc, #104]	; (8000894 <fsm_run2+0xe0>)
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	2b01      	cmp	r3, #1
 800082e:	d126      	bne.n	800087e <fsm_run2+0xca>
		{
			status2=auto_yellow;
 8000830:	4b15      	ldr	r3, [pc, #84]	; (8000888 <fsm_run2+0xd4>)
 8000832:	2203      	movs	r2, #3
 8000834:	601a      	str	r2, [r3, #0]
			duration2=timer3+50;
 8000836:	4b18      	ldr	r3, [pc, #96]	; (8000898 <fsm_run2+0xe4>)
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	3332      	adds	r3, #50	; 0x32
 800083c:	4a14      	ldr	r2, [pc, #80]	; (8000890 <fsm_run2+0xdc>)
 800083e:	6013      	str	r3, [r2, #0]
			settimer2(duration2);
 8000840:	4b13      	ldr	r3, [pc, #76]	; (8000890 <fsm_run2+0xdc>)
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	4618      	mov	r0, r3
 8000846:	f000 fa11 	bl	8000c6c <settimer2>
		}
		break;
 800084a:	e018      	b.n	800087e <fsm_run2+0xca>
	case auto_yellow :
		turn_on2(2);
 800084c:	2002      	movs	r0, #2
 800084e:	f000 f89b 	bl	8000988 <turn_on2>
		if(timer2_flag==1)
 8000852:	4b10      	ldr	r3, [pc, #64]	; (8000894 <fsm_run2+0xe0>)
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	2b01      	cmp	r3, #1
 8000858:	d113      	bne.n	8000882 <fsm_run2+0xce>
		{
			status2=auto_red;
 800085a:	4b0b      	ldr	r3, [pc, #44]	; (8000888 <fsm_run2+0xd4>)
 800085c:	2201      	movs	r2, #1
 800085e:	601a      	str	r2, [r3, #0]
			duration2=timer1+50;
 8000860:	4b0e      	ldr	r3, [pc, #56]	; (800089c <fsm_run2+0xe8>)
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	3332      	adds	r3, #50	; 0x32
 8000866:	4a0a      	ldr	r2, [pc, #40]	; (8000890 <fsm_run2+0xdc>)
 8000868:	6013      	str	r3, [r2, #0]
			settimer2(duration2);
 800086a:	4b09      	ldr	r3, [pc, #36]	; (8000890 <fsm_run2+0xdc>)
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	4618      	mov	r0, r3
 8000870:	f000 f9fc 	bl	8000c6c <settimer2>
		}
		break;
 8000874:	e005      	b.n	8000882 <fsm_run2+0xce>
	default :  break;
 8000876:	bf00      	nop
 8000878:	e004      	b.n	8000884 <fsm_run2+0xd0>
		break;
 800087a:	bf00      	nop
 800087c:	e002      	b.n	8000884 <fsm_run2+0xd0>
		break;
 800087e:	bf00      	nop
 8000880:	e000      	b.n	8000884 <fsm_run2+0xd0>
		break;
 8000882:	bf00      	nop
	}
}
 8000884:	bf00      	nop
 8000886:	bd80      	pop	{r7, pc}
 8000888:	20000040 	.word	0x20000040
 800088c:	20000004 	.word	0x20000004
 8000890:	20000038 	.word	0x20000038
 8000894:	200000a0 	.word	0x200000a0
 8000898:	20000008 	.word	0x20000008
 800089c:	20000000 	.word	0x20000000

080008a0 <fsm_run>:

void fsm_run()
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	af00      	add	r7, sp, #0
	fsm_run1();
 80008a4:	f7ff ff10 	bl	80006c8 <fsm_run1>
	fsm_run2();
 80008a8:	f7ff ff84 	bl	80007b4 <fsm_run2>
}
 80008ac:	bf00      	nop
 80008ae:	bd80      	pop	{r7, pc}

080008b0 <turn_off>:
 */

#include "fsm_auto_help.h"

void turn_off()
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(led_red1_GPIO_Port, led_red1_Pin, SET);
 80008b4:	2201      	movs	r2, #1
 80008b6:	2101      	movs	r1, #1
 80008b8:	480e      	ldr	r0, [pc, #56]	; (80008f4 <turn_off+0x44>)
 80008ba:	f001 f8d5 	bl	8001a68 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(led_green1_GPIO_Port, led_green1_Pin, SET);
 80008be:	2201      	movs	r2, #1
 80008c0:	2102      	movs	r1, #2
 80008c2:	480c      	ldr	r0, [pc, #48]	; (80008f4 <turn_off+0x44>)
 80008c4:	f001 f8d0 	bl	8001a68 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(led_yellow1_GPIO_Port, led_yellow1_Pin, SET);
 80008c8:	2201      	movs	r2, #1
 80008ca:	2104      	movs	r1, #4
 80008cc:	4809      	ldr	r0, [pc, #36]	; (80008f4 <turn_off+0x44>)
 80008ce:	f001 f8cb 	bl	8001a68 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(led_red2_GPIO_Port, led_red2_Pin, SET);
 80008d2:	2201      	movs	r2, #1
 80008d4:	2108      	movs	r1, #8
 80008d6:	4807      	ldr	r0, [pc, #28]	; (80008f4 <turn_off+0x44>)
 80008d8:	f001 f8c6 	bl	8001a68 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(led_green2_GPIO_Port, led_green2_Pin, SET);
 80008dc:	2201      	movs	r2, #1
 80008de:	2110      	movs	r1, #16
 80008e0:	4804      	ldr	r0, [pc, #16]	; (80008f4 <turn_off+0x44>)
 80008e2:	f001 f8c1 	bl	8001a68 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(led_yellow2_GPIO_Port, led_yellow2_Pin, SET);
 80008e6:	2201      	movs	r2, #1
 80008e8:	2120      	movs	r1, #32
 80008ea:	4802      	ldr	r0, [pc, #8]	; (80008f4 <turn_off+0x44>)
 80008ec:	f001 f8bc 	bl	8001a68 <HAL_GPIO_WritePin>
}
 80008f0:	bf00      	nop
 80008f2:	bd80      	pop	{r7, pc}
 80008f4:	40010800 	.word	0x40010800

080008f8 <turn_on>:

void turn_on(int index)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b082      	sub	sp, #8
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
	switch (index)
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	2b02      	cmp	r3, #2
 8000904:	d029      	beq.n	800095a <turn_on+0x62>
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	2b02      	cmp	r3, #2
 800090a:	dc36      	bgt.n	800097a <turn_on+0x82>
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	2b00      	cmp	r3, #0
 8000910:	d003      	beq.n	800091a <turn_on+0x22>
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	2b01      	cmp	r3, #1
 8000916:	d010      	beq.n	800093a <turn_on+0x42>
	case 2 :
		HAL_GPIO_WritePin(led_red1_GPIO_Port, led_red1_Pin, SET);
		HAL_GPIO_WritePin(led_green1_GPIO_Port, led_green1_Pin, SET);
		HAL_GPIO_WritePin(led_yellow1_GPIO_Port, led_yellow1_Pin, RESET);
		break ;
	default : break;
 8000918:	e02f      	b.n	800097a <turn_on+0x82>
		HAL_GPIO_WritePin(led_red1_GPIO_Port, led_red1_Pin, RESET);
 800091a:	2200      	movs	r2, #0
 800091c:	2101      	movs	r1, #1
 800091e:	4819      	ldr	r0, [pc, #100]	; (8000984 <turn_on+0x8c>)
 8000920:	f001 f8a2 	bl	8001a68 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(led_green1_GPIO_Port, led_green1_Pin, SET);
 8000924:	2201      	movs	r2, #1
 8000926:	2102      	movs	r1, #2
 8000928:	4816      	ldr	r0, [pc, #88]	; (8000984 <turn_on+0x8c>)
 800092a:	f001 f89d 	bl	8001a68 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(led_yellow1_GPIO_Port, led_yellow1_Pin, SET);
 800092e:	2201      	movs	r2, #1
 8000930:	2104      	movs	r1, #4
 8000932:	4814      	ldr	r0, [pc, #80]	; (8000984 <turn_on+0x8c>)
 8000934:	f001 f898 	bl	8001a68 <HAL_GPIO_WritePin>
		break ;
 8000938:	e020      	b.n	800097c <turn_on+0x84>
		HAL_GPIO_WritePin(led_red1_GPIO_Port, led_red1_Pin, SET);
 800093a:	2201      	movs	r2, #1
 800093c:	2101      	movs	r1, #1
 800093e:	4811      	ldr	r0, [pc, #68]	; (8000984 <turn_on+0x8c>)
 8000940:	f001 f892 	bl	8001a68 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(led_green1_GPIO_Port, led_green1_Pin, RESET);
 8000944:	2200      	movs	r2, #0
 8000946:	2102      	movs	r1, #2
 8000948:	480e      	ldr	r0, [pc, #56]	; (8000984 <turn_on+0x8c>)
 800094a:	f001 f88d 	bl	8001a68 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(led_yellow1_GPIO_Port, led_yellow1_Pin, SET);
 800094e:	2201      	movs	r2, #1
 8000950:	2104      	movs	r1, #4
 8000952:	480c      	ldr	r0, [pc, #48]	; (8000984 <turn_on+0x8c>)
 8000954:	f001 f888 	bl	8001a68 <HAL_GPIO_WritePin>
		break;
 8000958:	e010      	b.n	800097c <turn_on+0x84>
		HAL_GPIO_WritePin(led_red1_GPIO_Port, led_red1_Pin, SET);
 800095a:	2201      	movs	r2, #1
 800095c:	2101      	movs	r1, #1
 800095e:	4809      	ldr	r0, [pc, #36]	; (8000984 <turn_on+0x8c>)
 8000960:	f001 f882 	bl	8001a68 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(led_green1_GPIO_Port, led_green1_Pin, SET);
 8000964:	2201      	movs	r2, #1
 8000966:	2102      	movs	r1, #2
 8000968:	4806      	ldr	r0, [pc, #24]	; (8000984 <turn_on+0x8c>)
 800096a:	f001 f87d 	bl	8001a68 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(led_yellow1_GPIO_Port, led_yellow1_Pin, RESET);
 800096e:	2200      	movs	r2, #0
 8000970:	2104      	movs	r1, #4
 8000972:	4804      	ldr	r0, [pc, #16]	; (8000984 <turn_on+0x8c>)
 8000974:	f001 f878 	bl	8001a68 <HAL_GPIO_WritePin>
		break ;
 8000978:	e000      	b.n	800097c <turn_on+0x84>
	default : break;
 800097a:	bf00      	nop
	}
}
 800097c:	bf00      	nop
 800097e:	3708      	adds	r7, #8
 8000980:	46bd      	mov	sp, r7
 8000982:	bd80      	pop	{r7, pc}
 8000984:	40010800 	.word	0x40010800

08000988 <turn_on2>:

void turn_on2(int index)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b082      	sub	sp, #8
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
	switch (index)
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	2b02      	cmp	r3, #2
 8000994:	d029      	beq.n	80009ea <turn_on2+0x62>
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	2b02      	cmp	r3, #2
 800099a:	dc36      	bgt.n	8000a0a <turn_on2+0x82>
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d003      	beq.n	80009aa <turn_on2+0x22>
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	2b01      	cmp	r3, #1
 80009a6:	d010      	beq.n	80009ca <turn_on2+0x42>
	case 2 :
		HAL_GPIO_WritePin(led_red2_GPIO_Port, led_red2_Pin, SET);
		HAL_GPIO_WritePin(led_green2_GPIO_Port, led_green2_Pin, SET);
		HAL_GPIO_WritePin(led_yellow2_GPIO_Port, led_yellow2_Pin, RESET);
		break ;
	default : break;
 80009a8:	e02f      	b.n	8000a0a <turn_on2+0x82>
		HAL_GPIO_WritePin(led_red2_GPIO_Port, led_red2_Pin, RESET);
 80009aa:	2200      	movs	r2, #0
 80009ac:	2108      	movs	r1, #8
 80009ae:	4819      	ldr	r0, [pc, #100]	; (8000a14 <turn_on2+0x8c>)
 80009b0:	f001 f85a 	bl	8001a68 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(led_green2_GPIO_Port, led_green2_Pin, SET);
 80009b4:	2201      	movs	r2, #1
 80009b6:	2110      	movs	r1, #16
 80009b8:	4816      	ldr	r0, [pc, #88]	; (8000a14 <turn_on2+0x8c>)
 80009ba:	f001 f855 	bl	8001a68 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(led_yellow2_GPIO_Port, led_yellow2_Pin, SET);
 80009be:	2201      	movs	r2, #1
 80009c0:	2120      	movs	r1, #32
 80009c2:	4814      	ldr	r0, [pc, #80]	; (8000a14 <turn_on2+0x8c>)
 80009c4:	f001 f850 	bl	8001a68 <HAL_GPIO_WritePin>
		break ;
 80009c8:	e020      	b.n	8000a0c <turn_on2+0x84>
		HAL_GPIO_WritePin(led_red2_GPIO_Port, led_red2_Pin, SET);
 80009ca:	2201      	movs	r2, #1
 80009cc:	2108      	movs	r1, #8
 80009ce:	4811      	ldr	r0, [pc, #68]	; (8000a14 <turn_on2+0x8c>)
 80009d0:	f001 f84a 	bl	8001a68 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(led_green2_GPIO_Port, led_green2_Pin, RESET);
 80009d4:	2200      	movs	r2, #0
 80009d6:	2110      	movs	r1, #16
 80009d8:	480e      	ldr	r0, [pc, #56]	; (8000a14 <turn_on2+0x8c>)
 80009da:	f001 f845 	bl	8001a68 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(led_yellow2_GPIO_Port, led_yellow2_Pin, SET);
 80009de:	2201      	movs	r2, #1
 80009e0:	2120      	movs	r1, #32
 80009e2:	480c      	ldr	r0, [pc, #48]	; (8000a14 <turn_on2+0x8c>)
 80009e4:	f001 f840 	bl	8001a68 <HAL_GPIO_WritePin>
		break;
 80009e8:	e010      	b.n	8000a0c <turn_on2+0x84>
		HAL_GPIO_WritePin(led_red2_GPIO_Port, led_red2_Pin, SET);
 80009ea:	2201      	movs	r2, #1
 80009ec:	2108      	movs	r1, #8
 80009ee:	4809      	ldr	r0, [pc, #36]	; (8000a14 <turn_on2+0x8c>)
 80009f0:	f001 f83a 	bl	8001a68 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(led_green2_GPIO_Port, led_green2_Pin, SET);
 80009f4:	2201      	movs	r2, #1
 80009f6:	2110      	movs	r1, #16
 80009f8:	4806      	ldr	r0, [pc, #24]	; (8000a14 <turn_on2+0x8c>)
 80009fa:	f001 f835 	bl	8001a68 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(led_yellow2_GPIO_Port, led_yellow2_Pin, RESET);
 80009fe:	2200      	movs	r2, #0
 8000a00:	2120      	movs	r1, #32
 8000a02:	4804      	ldr	r0, [pc, #16]	; (8000a14 <turn_on2+0x8c>)
 8000a04:	f001 f830 	bl	8001a68 <HAL_GPIO_WritePin>
		break ;
 8000a08:	e000      	b.n	8000a0c <turn_on2+0x84>
	default : break;
 8000a0a:	bf00      	nop
	}
}
 8000a0c:	bf00      	nop
 8000a0e:	3708      	adds	r7, #8
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bd80      	pop	{r7, pc}
 8000a14:	40010800 	.word	0x40010800

08000a18 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a1c:	f000 fd38 	bl	8001490 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a20:	f000 f822 	bl	8000a68 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a24:	f000 f8a8 	bl	8000b78 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000a28:	f000 f85a 	bl	8000ae0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000a2c:	4809      	ldr	r0, [pc, #36]	; (8000a54 <main+0x3c>)
 8000a2e:	f001 fc61 	bl	80022f4 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  status1=INIT;
 8000a32:	4b09      	ldr	r3, [pc, #36]	; (8000a58 <main+0x40>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	601a      	str	r2, [r3, #0]
  status2=INIT;
 8000a38:	4b08      	ldr	r3, [pc, #32]	; (8000a5c <main+0x44>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	601a      	str	r2, [r3, #0]
  status3=INIT;
 8000a3e:	4b08      	ldr	r3, [pc, #32]	; (8000a60 <main+0x48>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	601a      	str	r2, [r3, #0]
  status4=INIT;
 8000a44:	4b07      	ldr	r3, [pc, #28]	; (8000a64 <main+0x4c>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	601a      	str	r2, [r3, #0]
  while (1)
  {
    /* USER CODE END WHILE */
    fsm_run();
 8000a4a:	f7ff ff29 	bl	80008a0 <fsm_run>
    display_traffic();
 8000a4e:	f000 fcf1 	bl	8001434 <display_traffic>
    fsm_run();
 8000a52:	e7fa      	b.n	8000a4a <main+0x32>
 8000a54:	2000004c 	.word	0x2000004c
 8000a58:	2000003c 	.word	0x2000003c
 8000a5c:	20000040 	.word	0x20000040
 8000a60:	20000044 	.word	0x20000044
 8000a64:	20000048 	.word	0x20000048

08000a68 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b090      	sub	sp, #64	; 0x40
 8000a6c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a6e:	f107 0318 	add.w	r3, r7, #24
 8000a72:	2228      	movs	r2, #40	; 0x28
 8000a74:	2100      	movs	r1, #0
 8000a76:	4618      	mov	r0, r3
 8000a78:	f001 ffd4 	bl	8002a24 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a7c:	1d3b      	adds	r3, r7, #4
 8000a7e:	2200      	movs	r2, #0
 8000a80:	601a      	str	r2, [r3, #0]
 8000a82:	605a      	str	r2, [r3, #4]
 8000a84:	609a      	str	r2, [r3, #8]
 8000a86:	60da      	str	r2, [r3, #12]
 8000a88:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a8a:	2302      	movs	r3, #2
 8000a8c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a8e:	2301      	movs	r3, #1
 8000a90:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a92:	2310      	movs	r3, #16
 8000a94:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000a96:	2300      	movs	r3, #0
 8000a98:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a9a:	f107 0318 	add.w	r3, r7, #24
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	f000 fffa 	bl	8001a98 <HAL_RCC_OscConfig>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d001      	beq.n	8000aae <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000aaa:	f000 f8c5 	bl	8000c38 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000aae:	230f      	movs	r3, #15
 8000ab0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000aba:	2300      	movs	r3, #0
 8000abc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000ac2:	1d3b      	adds	r3, r7, #4
 8000ac4:	2100      	movs	r1, #0
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	f001 fa68 	bl	8001f9c <HAL_RCC_ClockConfig>
 8000acc:	4603      	mov	r3, r0
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d001      	beq.n	8000ad6 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000ad2:	f000 f8b1 	bl	8000c38 <Error_Handler>
  }
}
 8000ad6:	bf00      	nop
 8000ad8:	3740      	adds	r7, #64	; 0x40
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}
	...

08000ae0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b086      	sub	sp, #24
 8000ae4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ae6:	f107 0308 	add.w	r3, r7, #8
 8000aea:	2200      	movs	r2, #0
 8000aec:	601a      	str	r2, [r3, #0]
 8000aee:	605a      	str	r2, [r3, #4]
 8000af0:	609a      	str	r2, [r3, #8]
 8000af2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000af4:	463b      	mov	r3, r7
 8000af6:	2200      	movs	r2, #0
 8000af8:	601a      	str	r2, [r3, #0]
 8000afa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000afc:	4b1d      	ldr	r3, [pc, #116]	; (8000b74 <MX_TIM2_Init+0x94>)
 8000afe:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b02:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000b04:	4b1b      	ldr	r3, [pc, #108]	; (8000b74 <MX_TIM2_Init+0x94>)
 8000b06:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000b0a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b0c:	4b19      	ldr	r3, [pc, #100]	; (8000b74 <MX_TIM2_Init+0x94>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000b12:	4b18      	ldr	r3, [pc, #96]	; (8000b74 <MX_TIM2_Init+0x94>)
 8000b14:	2209      	movs	r2, #9
 8000b16:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b18:	4b16      	ldr	r3, [pc, #88]	; (8000b74 <MX_TIM2_Init+0x94>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b1e:	4b15      	ldr	r3, [pc, #84]	; (8000b74 <MX_TIM2_Init+0x94>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000b24:	4813      	ldr	r0, [pc, #76]	; (8000b74 <MX_TIM2_Init+0x94>)
 8000b26:	f001 fb95 	bl	8002254 <HAL_TIM_Base_Init>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d001      	beq.n	8000b34 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000b30:	f000 f882 	bl	8000c38 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b34:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b38:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000b3a:	f107 0308 	add.w	r3, r7, #8
 8000b3e:	4619      	mov	r1, r3
 8000b40:	480c      	ldr	r0, [pc, #48]	; (8000b74 <MX_TIM2_Init+0x94>)
 8000b42:	f001 fd2b 	bl	800259c <HAL_TIM_ConfigClockSource>
 8000b46:	4603      	mov	r3, r0
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d001      	beq.n	8000b50 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000b4c:	f000 f874 	bl	8000c38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b50:	2300      	movs	r3, #0
 8000b52:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b54:	2300      	movs	r3, #0
 8000b56:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000b58:	463b      	mov	r3, r7
 8000b5a:	4619      	mov	r1, r3
 8000b5c:	4805      	ldr	r0, [pc, #20]	; (8000b74 <MX_TIM2_Init+0x94>)
 8000b5e:	f001 fef7 	bl	8002950 <HAL_TIMEx_MasterConfigSynchronization>
 8000b62:	4603      	mov	r3, r0
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d001      	beq.n	8000b6c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000b68:	f000 f866 	bl	8000c38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000b6c:	bf00      	nop
 8000b6e:	3718      	adds	r7, #24
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bd80      	pop	{r7, pc}
 8000b74:	2000004c 	.word	0x2000004c

08000b78 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b086      	sub	sp, #24
 8000b7c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b7e:	f107 0308 	add.w	r3, r7, #8
 8000b82:	2200      	movs	r2, #0
 8000b84:	601a      	str	r2, [r3, #0]
 8000b86:	605a      	str	r2, [r3, #4]
 8000b88:	609a      	str	r2, [r3, #8]
 8000b8a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b8c:	4b22      	ldr	r3, [pc, #136]	; (8000c18 <MX_GPIO_Init+0xa0>)
 8000b8e:	699b      	ldr	r3, [r3, #24]
 8000b90:	4a21      	ldr	r2, [pc, #132]	; (8000c18 <MX_GPIO_Init+0xa0>)
 8000b92:	f043 0304 	orr.w	r3, r3, #4
 8000b96:	6193      	str	r3, [r2, #24]
 8000b98:	4b1f      	ldr	r3, [pc, #124]	; (8000c18 <MX_GPIO_Init+0xa0>)
 8000b9a:	699b      	ldr	r3, [r3, #24]
 8000b9c:	f003 0304 	and.w	r3, r3, #4
 8000ba0:	607b      	str	r3, [r7, #4]
 8000ba2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ba4:	4b1c      	ldr	r3, [pc, #112]	; (8000c18 <MX_GPIO_Init+0xa0>)
 8000ba6:	699b      	ldr	r3, [r3, #24]
 8000ba8:	4a1b      	ldr	r2, [pc, #108]	; (8000c18 <MX_GPIO_Init+0xa0>)
 8000baa:	f043 0308 	orr.w	r3, r3, #8
 8000bae:	6193      	str	r3, [r2, #24]
 8000bb0:	4b19      	ldr	r3, [pc, #100]	; (8000c18 <MX_GPIO_Init+0xa0>)
 8000bb2:	699b      	ldr	r3, [r3, #24]
 8000bb4:	f003 0308 	and.w	r3, r3, #8
 8000bb8:	603b      	str	r3, [r7, #0]
 8000bba:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, led_red1_Pin|led_green1_Pin|led_yellow1_Pin|led_red2_Pin
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	f243 71bf 	movw	r1, #14271	; 0x37bf
 8000bc2:	4816      	ldr	r0, [pc, #88]	; (8000c1c <MX_GPIO_Init+0xa4>)
 8000bc4:	f000 ff50 	bl	8001a68 <HAL_GPIO_WritePin>
                          |led_green2_Pin|led_yellow2_Pin|en0_Pin|en1_Pin
                          |en2_Pin|en3_Pin|chan2f_Pin|chan2g_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, chan1a_Pin|chan1b_Pin|chan1c_Pin|chan2d_Pin
 8000bc8:	2200      	movs	r2, #0
 8000bca:	f640 71ff 	movw	r1, #4095	; 0xfff
 8000bce:	4814      	ldr	r0, [pc, #80]	; (8000c20 <MX_GPIO_Init+0xa8>)
 8000bd0:	f000 ff4a 	bl	8001a68 <HAL_GPIO_WritePin>
                          |chan1g_Pin|chan2a_Pin|chan2b_Pin|chan2c_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : led_red1_Pin led_green1_Pin led_yellow1_Pin led_red2_Pin
                           led_green2_Pin led_yellow2_Pin en0_Pin en1_Pin
                           en2_Pin en3_Pin chan2f_Pin chan2g_Pin */
  GPIO_InitStruct.Pin = led_red1_Pin|led_green1_Pin|led_yellow1_Pin|led_red2_Pin
 8000bd4:	f243 73bf 	movw	r3, #14271	; 0x37bf
 8000bd8:	60bb      	str	r3, [r7, #8]
                          |led_green2_Pin|led_yellow2_Pin|en0_Pin|en1_Pin
                          |en2_Pin|en3_Pin|chan2f_Pin|chan2g_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bda:	2301      	movs	r3, #1
 8000bdc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bde:	2300      	movs	r3, #0
 8000be0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be2:	2302      	movs	r3, #2
 8000be4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000be6:	f107 0308 	add.w	r3, r7, #8
 8000bea:	4619      	mov	r1, r3
 8000bec:	480b      	ldr	r0, [pc, #44]	; (8000c1c <MX_GPIO_Init+0xa4>)
 8000bee:	f000 fdbf 	bl	8001770 <HAL_GPIO_Init>

  /*Configure GPIO pins : chan1a_Pin chan1b_Pin chan1c_Pin chan2d_Pin
                           chan2e_Pin chan1d_Pin chan1e_Pin chan1f_Pin
                           chan1g_Pin chan2a_Pin chan2b_Pin chan2c_Pin */
  GPIO_InitStruct.Pin = chan1a_Pin|chan1b_Pin|chan1c_Pin|chan2d_Pin
 8000bf2:	f640 73ff 	movw	r3, #4095	; 0xfff
 8000bf6:	60bb      	str	r3, [r7, #8]
                          |chan2e_Pin|chan1d_Pin|chan1e_Pin|chan1f_Pin
                          |chan1g_Pin|chan2a_Pin|chan2b_Pin|chan2c_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bf8:	2301      	movs	r3, #1
 8000bfa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c00:	2302      	movs	r3, #2
 8000c02:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c04:	f107 0308 	add.w	r3, r7, #8
 8000c08:	4619      	mov	r1, r3
 8000c0a:	4805      	ldr	r0, [pc, #20]	; (8000c20 <MX_GPIO_Init+0xa8>)
 8000c0c:	f000 fdb0 	bl	8001770 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c10:	bf00      	nop
 8000c12:	3718      	adds	r7, #24
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bd80      	pop	{r7, pc}
 8000c18:	40021000 	.word	0x40021000
 8000c1c:	40010800 	.word	0x40010800
 8000c20:	40010c00 	.word	0x40010c00

08000c24 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b082      	sub	sp, #8
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
	timerrun();
 8000c2c:	f000 f882 	bl	8000d34 <timerrun>
}
 8000c30:	bf00      	nop
 8000c32:	3708      	adds	r7, #8
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bd80      	pop	{r7, pc}

08000c38 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c3c:	b672      	cpsid	i
}
 8000c3e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c40:	e7fe      	b.n	8000c40 <Error_Handler+0x8>
	...

08000c44 <settimer1>:
int timer5_flag=0;
int timer6_counter=0;
int timer6_flag=0;

void settimer1(int duration)
{
 8000c44:	b480      	push	{r7}
 8000c46:	b083      	sub	sp, #12
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
	timer1_counter=duration;
 8000c4c:	4a05      	ldr	r2, [pc, #20]	; (8000c64 <settimer1+0x20>)
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	6013      	str	r3, [r2, #0]
	timer1_flag=0;
 8000c52:	4b05      	ldr	r3, [pc, #20]	; (8000c68 <settimer1+0x24>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	601a      	str	r2, [r3, #0]
}
 8000c58:	bf00      	nop
 8000c5a:	370c      	adds	r7, #12
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bc80      	pop	{r7}
 8000c60:	4770      	bx	lr
 8000c62:	bf00      	nop
 8000c64:	20000094 	.word	0x20000094
 8000c68:	20000098 	.word	0x20000098

08000c6c <settimer2>:
void settimer2(int duration)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	b083      	sub	sp, #12
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
	timer2_counter=duration;
 8000c74:	4a05      	ldr	r2, [pc, #20]	; (8000c8c <settimer2+0x20>)
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	6013      	str	r3, [r2, #0]
	timer2_flag=0;
 8000c7a:	4b05      	ldr	r3, [pc, #20]	; (8000c90 <settimer2+0x24>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	601a      	str	r2, [r3, #0]
}
 8000c80:	bf00      	nop
 8000c82:	370c      	adds	r7, #12
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bc80      	pop	{r7}
 8000c88:	4770      	bx	lr
 8000c8a:	bf00      	nop
 8000c8c:	2000009c 	.word	0x2000009c
 8000c90:	200000a0 	.word	0x200000a0

08000c94 <settimer3>:
void settimer3(int duration)
{
 8000c94:	b480      	push	{r7}
 8000c96:	b083      	sub	sp, #12
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
	timer3_counter=duration;
 8000c9c:	4a05      	ldr	r2, [pc, #20]	; (8000cb4 <settimer3+0x20>)
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	6013      	str	r3, [r2, #0]
	timer3_flag=0;
 8000ca2:	4b05      	ldr	r3, [pc, #20]	; (8000cb8 <settimer3+0x24>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	601a      	str	r2, [r3, #0]
}
 8000ca8:	bf00      	nop
 8000caa:	370c      	adds	r7, #12
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bc80      	pop	{r7}
 8000cb0:	4770      	bx	lr
 8000cb2:	bf00      	nop
 8000cb4:	200000a4 	.word	0x200000a4
 8000cb8:	200000a8 	.word	0x200000a8

08000cbc <settimer4>:
void settimer4(int duration)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	b083      	sub	sp, #12
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
	timer4_counter=duration;
 8000cc4:	4a05      	ldr	r2, [pc, #20]	; (8000cdc <settimer4+0x20>)
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	6013      	str	r3, [r2, #0]
	timer4_flag=0;
 8000cca:	4b05      	ldr	r3, [pc, #20]	; (8000ce0 <settimer4+0x24>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	601a      	str	r2, [r3, #0]
}
 8000cd0:	bf00      	nop
 8000cd2:	370c      	adds	r7, #12
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bc80      	pop	{r7}
 8000cd8:	4770      	bx	lr
 8000cda:	bf00      	nop
 8000cdc:	200000ac 	.word	0x200000ac
 8000ce0:	200000b0 	.word	0x200000b0

08000ce4 <settimer5>:
void settimer5(int duration)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	b083      	sub	sp, #12
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
	timer5_counter=duration;
 8000cec:	4a05      	ldr	r2, [pc, #20]	; (8000d04 <settimer5+0x20>)
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	6013      	str	r3, [r2, #0]
	timer5_flag=0;
 8000cf2:	4b05      	ldr	r3, [pc, #20]	; (8000d08 <settimer5+0x24>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	601a      	str	r2, [r3, #0]
}
 8000cf8:	bf00      	nop
 8000cfa:	370c      	adds	r7, #12
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bc80      	pop	{r7}
 8000d00:	4770      	bx	lr
 8000d02:	bf00      	nop
 8000d04:	200000b4 	.word	0x200000b4
 8000d08:	200000b8 	.word	0x200000b8

08000d0c <settimer6>:
void settimer6(int duration)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	b083      	sub	sp, #12
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
	timer6_counter=duration;
 8000d14:	4a05      	ldr	r2, [pc, #20]	; (8000d2c <settimer6+0x20>)
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	6013      	str	r3, [r2, #0]
	timer6_flag=0;
 8000d1a:	4b05      	ldr	r3, [pc, #20]	; (8000d30 <settimer6+0x24>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	601a      	str	r2, [r3, #0]
}
 8000d20:	bf00      	nop
 8000d22:	370c      	adds	r7, #12
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bc80      	pop	{r7}
 8000d28:	4770      	bx	lr
 8000d2a:	bf00      	nop
 8000d2c:	200000bc 	.word	0x200000bc
 8000d30:	200000c0 	.word	0x200000c0

08000d34 <timerrun>:

void timerrun()
{
 8000d34:	b480      	push	{r7}
 8000d36:	af00      	add	r7, sp, #0
	if(timer1_counter>0)
 8000d38:	4b31      	ldr	r3, [pc, #196]	; (8000e00 <timerrun+0xcc>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	dd04      	ble.n	8000d4a <timerrun+0x16>
	{
		timer1_counter--;
 8000d40:	4b2f      	ldr	r3, [pc, #188]	; (8000e00 <timerrun+0xcc>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	3b01      	subs	r3, #1
 8000d46:	4a2e      	ldr	r2, [pc, #184]	; (8000e00 <timerrun+0xcc>)
 8000d48:	6013      	str	r3, [r2, #0]
	}
	if(timer1_counter<=0)
 8000d4a:	4b2d      	ldr	r3, [pc, #180]	; (8000e00 <timerrun+0xcc>)
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	dc02      	bgt.n	8000d58 <timerrun+0x24>
	{
		timer1_flag=1;
 8000d52:	4b2c      	ldr	r3, [pc, #176]	; (8000e04 <timerrun+0xd0>)
 8000d54:	2201      	movs	r2, #1
 8000d56:	601a      	str	r2, [r3, #0]
	}
	if(timer2_counter>0)
 8000d58:	4b2b      	ldr	r3, [pc, #172]	; (8000e08 <timerrun+0xd4>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	dd04      	ble.n	8000d6a <timerrun+0x36>
	{
		timer2_counter--;
 8000d60:	4b29      	ldr	r3, [pc, #164]	; (8000e08 <timerrun+0xd4>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	3b01      	subs	r3, #1
 8000d66:	4a28      	ldr	r2, [pc, #160]	; (8000e08 <timerrun+0xd4>)
 8000d68:	6013      	str	r3, [r2, #0]
	}
	if(timer2_counter<=0)
 8000d6a:	4b27      	ldr	r3, [pc, #156]	; (8000e08 <timerrun+0xd4>)
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	dc02      	bgt.n	8000d78 <timerrun+0x44>
	{
		timer2_flag=1;
 8000d72:	4b26      	ldr	r3, [pc, #152]	; (8000e0c <timerrun+0xd8>)
 8000d74:	2201      	movs	r2, #1
 8000d76:	601a      	str	r2, [r3, #0]
	}
	if(timer3_counter>0)
 8000d78:	4b25      	ldr	r3, [pc, #148]	; (8000e10 <timerrun+0xdc>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	dd04      	ble.n	8000d8a <timerrun+0x56>
	{
		timer3_counter--;
 8000d80:	4b23      	ldr	r3, [pc, #140]	; (8000e10 <timerrun+0xdc>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	3b01      	subs	r3, #1
 8000d86:	4a22      	ldr	r2, [pc, #136]	; (8000e10 <timerrun+0xdc>)
 8000d88:	6013      	str	r3, [r2, #0]
	}
	if(timer3_counter<=0)
 8000d8a:	4b21      	ldr	r3, [pc, #132]	; (8000e10 <timerrun+0xdc>)
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	dc02      	bgt.n	8000d98 <timerrun+0x64>
	{
		timer3_flag=1;
 8000d92:	4b20      	ldr	r3, [pc, #128]	; (8000e14 <timerrun+0xe0>)
 8000d94:	2201      	movs	r2, #1
 8000d96:	601a      	str	r2, [r3, #0]
	}
	if(timer4_counter>0)
 8000d98:	4b1f      	ldr	r3, [pc, #124]	; (8000e18 <timerrun+0xe4>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	dd04      	ble.n	8000daa <timerrun+0x76>
	{
		timer4_counter--;
 8000da0:	4b1d      	ldr	r3, [pc, #116]	; (8000e18 <timerrun+0xe4>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	3b01      	subs	r3, #1
 8000da6:	4a1c      	ldr	r2, [pc, #112]	; (8000e18 <timerrun+0xe4>)
 8000da8:	6013      	str	r3, [r2, #0]
	}
	if(timer4_counter<=0)
 8000daa:	4b1b      	ldr	r3, [pc, #108]	; (8000e18 <timerrun+0xe4>)
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	dc02      	bgt.n	8000db8 <timerrun+0x84>
	{
		timer4_flag=1;
 8000db2:	4b1a      	ldr	r3, [pc, #104]	; (8000e1c <timerrun+0xe8>)
 8000db4:	2201      	movs	r2, #1
 8000db6:	601a      	str	r2, [r3, #0]
	}
	if(timer5_counter>0)
 8000db8:	4b19      	ldr	r3, [pc, #100]	; (8000e20 <timerrun+0xec>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	dd04      	ble.n	8000dca <timerrun+0x96>
	{
		timer5_counter--;
 8000dc0:	4b17      	ldr	r3, [pc, #92]	; (8000e20 <timerrun+0xec>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	3b01      	subs	r3, #1
 8000dc6:	4a16      	ldr	r2, [pc, #88]	; (8000e20 <timerrun+0xec>)
 8000dc8:	6013      	str	r3, [r2, #0]
	}
	if(timer5_counter<=0)
 8000dca:	4b15      	ldr	r3, [pc, #84]	; (8000e20 <timerrun+0xec>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	dc02      	bgt.n	8000dd8 <timerrun+0xa4>
	{
		timer5_flag=1;
 8000dd2:	4b14      	ldr	r3, [pc, #80]	; (8000e24 <timerrun+0xf0>)
 8000dd4:	2201      	movs	r2, #1
 8000dd6:	601a      	str	r2, [r3, #0]
	}
	if(timer6_counter>0)
 8000dd8:	4b13      	ldr	r3, [pc, #76]	; (8000e28 <timerrun+0xf4>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	dd04      	ble.n	8000dea <timerrun+0xb6>
	{
		timer6_counter--;
 8000de0:	4b11      	ldr	r3, [pc, #68]	; (8000e28 <timerrun+0xf4>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	3b01      	subs	r3, #1
 8000de6:	4a10      	ldr	r2, [pc, #64]	; (8000e28 <timerrun+0xf4>)
 8000de8:	6013      	str	r3, [r2, #0]
	}
	if(timer6_counter<=0)
 8000dea:	4b0f      	ldr	r3, [pc, #60]	; (8000e28 <timerrun+0xf4>)
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	dc02      	bgt.n	8000df8 <timerrun+0xc4>
	{
		timer6_flag=1;
 8000df2:	4b0e      	ldr	r3, [pc, #56]	; (8000e2c <timerrun+0xf8>)
 8000df4:	2201      	movs	r2, #1
 8000df6:	601a      	str	r2, [r3, #0]
	}
}
 8000df8:	bf00      	nop
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bc80      	pop	{r7}
 8000dfe:	4770      	bx	lr
 8000e00:	20000094 	.word	0x20000094
 8000e04:	20000098 	.word	0x20000098
 8000e08:	2000009c 	.word	0x2000009c
 8000e0c:	200000a0 	.word	0x200000a0
 8000e10:	200000a4 	.word	0x200000a4
 8000e14:	200000a8 	.word	0x200000a8
 8000e18:	200000ac 	.word	0x200000ac
 8000e1c:	200000b0 	.word	0x200000b0
 8000e20:	200000b4 	.word	0x200000b4
 8000e24:	200000b8 	.word	0x200000b8
 8000e28:	200000bc 	.word	0x200000bc
 8000e2c:	200000c0 	.word	0x200000c0

08000e30 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e30:	b480      	push	{r7}
 8000e32:	b083      	sub	sp, #12
 8000e34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000e36:	4b0e      	ldr	r3, [pc, #56]	; (8000e70 <HAL_MspInit+0x40>)
 8000e38:	699b      	ldr	r3, [r3, #24]
 8000e3a:	4a0d      	ldr	r2, [pc, #52]	; (8000e70 <HAL_MspInit+0x40>)
 8000e3c:	f043 0301 	orr.w	r3, r3, #1
 8000e40:	6193      	str	r3, [r2, #24]
 8000e42:	4b0b      	ldr	r3, [pc, #44]	; (8000e70 <HAL_MspInit+0x40>)
 8000e44:	699b      	ldr	r3, [r3, #24]
 8000e46:	f003 0301 	and.w	r3, r3, #1
 8000e4a:	607b      	str	r3, [r7, #4]
 8000e4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e4e:	4b08      	ldr	r3, [pc, #32]	; (8000e70 <HAL_MspInit+0x40>)
 8000e50:	69db      	ldr	r3, [r3, #28]
 8000e52:	4a07      	ldr	r2, [pc, #28]	; (8000e70 <HAL_MspInit+0x40>)
 8000e54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e58:	61d3      	str	r3, [r2, #28]
 8000e5a:	4b05      	ldr	r3, [pc, #20]	; (8000e70 <HAL_MspInit+0x40>)
 8000e5c:	69db      	ldr	r3, [r3, #28]
 8000e5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e62:	603b      	str	r3, [r7, #0]
 8000e64:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e66:	bf00      	nop
 8000e68:	370c      	adds	r7, #12
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bc80      	pop	{r7}
 8000e6e:	4770      	bx	lr
 8000e70:	40021000 	.word	0x40021000

08000e74 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b084      	sub	sp, #16
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000e84:	d113      	bne.n	8000eae <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000e86:	4b0c      	ldr	r3, [pc, #48]	; (8000eb8 <HAL_TIM_Base_MspInit+0x44>)
 8000e88:	69db      	ldr	r3, [r3, #28]
 8000e8a:	4a0b      	ldr	r2, [pc, #44]	; (8000eb8 <HAL_TIM_Base_MspInit+0x44>)
 8000e8c:	f043 0301 	orr.w	r3, r3, #1
 8000e90:	61d3      	str	r3, [r2, #28]
 8000e92:	4b09      	ldr	r3, [pc, #36]	; (8000eb8 <HAL_TIM_Base_MspInit+0x44>)
 8000e94:	69db      	ldr	r3, [r3, #28]
 8000e96:	f003 0301 	and.w	r3, r3, #1
 8000e9a:	60fb      	str	r3, [r7, #12]
 8000e9c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	2100      	movs	r1, #0
 8000ea2:	201c      	movs	r0, #28
 8000ea4:	f000 fc2d 	bl	8001702 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000ea8:	201c      	movs	r0, #28
 8000eaa:	f000 fc46 	bl	800173a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000eae:	bf00      	nop
 8000eb0:	3710      	adds	r7, #16
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	40021000 	.word	0x40021000

08000ebc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ec0:	e7fe      	b.n	8000ec0 <NMI_Handler+0x4>

08000ec2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ec2:	b480      	push	{r7}
 8000ec4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ec6:	e7fe      	b.n	8000ec6 <HardFault_Handler+0x4>

08000ec8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ecc:	e7fe      	b.n	8000ecc <MemManage_Handler+0x4>

08000ece <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ece:	b480      	push	{r7}
 8000ed0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ed2:	e7fe      	b.n	8000ed2 <BusFault_Handler+0x4>

08000ed4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ed8:	e7fe      	b.n	8000ed8 <UsageFault_Handler+0x4>

08000eda <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000eda:	b480      	push	{r7}
 8000edc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ede:	bf00      	nop
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bc80      	pop	{r7}
 8000ee4:	4770      	bx	lr

08000ee6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ee6:	b480      	push	{r7}
 8000ee8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000eea:	bf00      	nop
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bc80      	pop	{r7}
 8000ef0:	4770      	bx	lr

08000ef2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ef2:	b480      	push	{r7}
 8000ef4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ef6:	bf00      	nop
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bc80      	pop	{r7}
 8000efc:	4770      	bx	lr

08000efe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000efe:	b580      	push	{r7, lr}
 8000f00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f02:	f000 fb0b 	bl	800151c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f06:	bf00      	nop
 8000f08:	bd80      	pop	{r7, pc}
	...

08000f0c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000f10:	4802      	ldr	r0, [pc, #8]	; (8000f1c <TIM2_IRQHandler+0x10>)
 8000f12:	f001 fa3b 	bl	800238c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000f16:	bf00      	nop
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	2000004c 	.word	0x2000004c

08000f20 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000f20:	b480      	push	{r7}
 8000f22:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f24:	bf00      	nop
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bc80      	pop	{r7}
 8000f2a:	4770      	bx	lr

08000f2c <updateClockBuffer>:
int index_led2=0;
int led_buffer[2] = {0 , 0};
int led_buffer2[2] = {0 , 0};

void updateClockBuffer ()
  {
 8000f2c:	b480      	push	{r7}
 8000f2e:	b083      	sub	sp, #12
 8000f30:	af00      	add	r7, sp, #0
	  int second_tens=second/10;
 8000f32:	4b11      	ldr	r3, [pc, #68]	; (8000f78 <updateClockBuffer+0x4c>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	4a11      	ldr	r2, [pc, #68]	; (8000f7c <updateClockBuffer+0x50>)
 8000f38:	fb82 1203 	smull	r1, r2, r2, r3
 8000f3c:	1092      	asrs	r2, r2, #2
 8000f3e:	17db      	asrs	r3, r3, #31
 8000f40:	1ad3      	subs	r3, r2, r3
 8000f42:	607b      	str	r3, [r7, #4]
	  int second_ones=second%10;
 8000f44:	4b0c      	ldr	r3, [pc, #48]	; (8000f78 <updateClockBuffer+0x4c>)
 8000f46:	681a      	ldr	r2, [r3, #0]
 8000f48:	4b0c      	ldr	r3, [pc, #48]	; (8000f7c <updateClockBuffer+0x50>)
 8000f4a:	fb83 1302 	smull	r1, r3, r3, r2
 8000f4e:	1099      	asrs	r1, r3, #2
 8000f50:	17d3      	asrs	r3, r2, #31
 8000f52:	1ac9      	subs	r1, r1, r3
 8000f54:	460b      	mov	r3, r1
 8000f56:	009b      	lsls	r3, r3, #2
 8000f58:	440b      	add	r3, r1
 8000f5a:	005b      	lsls	r3, r3, #1
 8000f5c:	1ad3      	subs	r3, r2, r3
 8000f5e:	603b      	str	r3, [r7, #0]

	  led_buffer[0] = second_tens;
 8000f60:	4a07      	ldr	r2, [pc, #28]	; (8000f80 <updateClockBuffer+0x54>)
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	6013      	str	r3, [r2, #0]
	  led_buffer[1] = second_ones;
 8000f66:	4a06      	ldr	r2, [pc, #24]	; (8000f80 <updateClockBuffer+0x54>)
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	6053      	str	r3, [r2, #4]
  }
 8000f6c:	bf00      	nop
 8000f6e:	370c      	adds	r7, #12
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bc80      	pop	{r7}
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop
 8000f78:	200000c4 	.word	0x200000c4
 8000f7c:	66666667 	.word	0x66666667
 8000f80:	200000d4 	.word	0x200000d4

08000f84 <updateClockBuffer2>:

void updateClockBuffer2 ()
  {
 8000f84:	b480      	push	{r7}
 8000f86:	b083      	sub	sp, #12
 8000f88:	af00      	add	r7, sp, #0
	  int second_tens=second2/10;
 8000f8a:	4b11      	ldr	r3, [pc, #68]	; (8000fd0 <updateClockBuffer2+0x4c>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	4a11      	ldr	r2, [pc, #68]	; (8000fd4 <updateClockBuffer2+0x50>)
 8000f90:	fb82 1203 	smull	r1, r2, r2, r3
 8000f94:	1092      	asrs	r2, r2, #2
 8000f96:	17db      	asrs	r3, r3, #31
 8000f98:	1ad3      	subs	r3, r2, r3
 8000f9a:	607b      	str	r3, [r7, #4]
	  int second_ones=second2%10;
 8000f9c:	4b0c      	ldr	r3, [pc, #48]	; (8000fd0 <updateClockBuffer2+0x4c>)
 8000f9e:	681a      	ldr	r2, [r3, #0]
 8000fa0:	4b0c      	ldr	r3, [pc, #48]	; (8000fd4 <updateClockBuffer2+0x50>)
 8000fa2:	fb83 1302 	smull	r1, r3, r3, r2
 8000fa6:	1099      	asrs	r1, r3, #2
 8000fa8:	17d3      	asrs	r3, r2, #31
 8000faa:	1ac9      	subs	r1, r1, r3
 8000fac:	460b      	mov	r3, r1
 8000fae:	009b      	lsls	r3, r3, #2
 8000fb0:	440b      	add	r3, r1
 8000fb2:	005b      	lsls	r3, r3, #1
 8000fb4:	1ad3      	subs	r3, r2, r3
 8000fb6:	603b      	str	r3, [r7, #0]

	  led_buffer2[0] = second_tens;
 8000fb8:	4a07      	ldr	r2, [pc, #28]	; (8000fd8 <updateClockBuffer2+0x54>)
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	6013      	str	r3, [r2, #0]
	  led_buffer2[1] = second_ones;
 8000fbe:	4a06      	ldr	r2, [pc, #24]	; (8000fd8 <updateClockBuffer2+0x54>)
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	6053      	str	r3, [r2, #4]
  }
 8000fc4:	bf00      	nop
 8000fc6:	370c      	adds	r7, #12
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bc80      	pop	{r7}
 8000fcc:	4770      	bx	lr
 8000fce:	bf00      	nop
 8000fd0:	200000c8 	.word	0x200000c8
 8000fd4:	66666667 	.word	0x66666667
 8000fd8:	200000dc 	.word	0x200000dc

08000fdc <display_traffic1>:

void display_traffic1()
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	af00      	add	r7, sp, #0
	switch (status3)
 8000fe0:	4b7f      	ldr	r3, [pc, #508]	; (80011e0 <display_traffic1+0x204>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	2b03      	cmp	r3, #3
 8000fe6:	f200 80f1 	bhi.w	80011cc <display_traffic1+0x1f0>
 8000fea:	a201      	add	r2, pc, #4	; (adr r2, 8000ff0 <display_traffic1+0x14>)
 8000fec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ff0:	08001001 	.word	0x08001001
 8000ff4:	0800102d 	.word	0x0800102d
 8000ff8:	080010bd 	.word	0x080010bd
 8000ffc:	08001145 	.word	0x08001145
	{
	case INIT :
	second=timer1/100;
 8001000:	4b78      	ldr	r3, [pc, #480]	; (80011e4 <display_traffic1+0x208>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	4a78      	ldr	r2, [pc, #480]	; (80011e8 <display_traffic1+0x20c>)
 8001006:	fb82 1203 	smull	r1, r2, r2, r3
 800100a:	1152      	asrs	r2, r2, #5
 800100c:	17db      	asrs	r3, r3, #31
 800100e:	1ad3      	subs	r3, r2, r3
 8001010:	4a76      	ldr	r2, [pc, #472]	; (80011ec <display_traffic1+0x210>)
 8001012:	6013      	str	r3, [r2, #0]
	updateClockBuffer ();
 8001014:	f7ff ff8a 	bl	8000f2c <updateClockBuffer>
    status3=auto_red;
 8001018:	4b71      	ldr	r3, [pc, #452]	; (80011e0 <display_traffic1+0x204>)
 800101a:	2201      	movs	r2, #1
 800101c:	601a      	str	r2, [r3, #0]
    settimer3(50);
 800101e:	2032      	movs	r0, #50	; 0x32
 8001020:	f7ff fe38 	bl	8000c94 <settimer3>
    settimer4(100);
 8001024:	2064      	movs	r0, #100	; 0x64
 8001026:	f7ff fe49 	bl	8000cbc <settimer4>
		break;
 800102a:	e0d6      	b.n	80011da <display_traffic1+0x1fe>
	case auto_red :
		if (timer3_flag==1)
 800102c:	4b70      	ldr	r3, [pc, #448]	; (80011f0 <display_traffic1+0x214>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	2b01      	cmp	r3, #1
 8001032:	d11f      	bne.n	8001074 <display_traffic1+0x98>
		{
			settimer3 (50) ;
 8001034:	2032      	movs	r0, #50	; 0x32
 8001036:	f7ff fe2d 	bl	8000c94 <settimer3>
		    if( index_led < 2 )
 800103a:	4b6e      	ldr	r3, [pc, #440]	; (80011f4 <display_traffic1+0x218>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	2b01      	cmp	r3, #1
 8001040:	dc11      	bgt.n	8001066 <display_traffic1+0x8a>
			{
			  update7SEGa ( index_led ) ;
 8001042:	4b6c      	ldr	r3, [pc, #432]	; (80011f4 <display_traffic1+0x218>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	4618      	mov	r0, r3
 8001048:	f7ff f880 	bl	800014c <update7SEGa>
			  display7SEGa ( led_buffer [ index_led ] ) ;
 800104c:	4b69      	ldr	r3, [pc, #420]	; (80011f4 <display_traffic1+0x218>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	4a69      	ldr	r2, [pc, #420]	; (80011f8 <display_traffic1+0x21c>)
 8001052:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001056:	4618      	mov	r0, r3
 8001058:	f7ff f8ce 	bl	80001f8 <display7SEGa>
			  index_led ++ ;
 800105c:	4b65      	ldr	r3, [pc, #404]	; (80011f4 <display_traffic1+0x218>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	3301      	adds	r3, #1
 8001062:	4a64      	ldr	r2, [pc, #400]	; (80011f4 <display_traffic1+0x218>)
 8001064:	6013      	str	r3, [r2, #0]
			}
			if( index_led >= 2 )
 8001066:	4b63      	ldr	r3, [pc, #396]	; (80011f4 <display_traffic1+0x218>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	2b01      	cmp	r3, #1
 800106c:	dd02      	ble.n	8001074 <display_traffic1+0x98>
			{
			  index_led = 0;
 800106e:	4b61      	ldr	r3, [pc, #388]	; (80011f4 <display_traffic1+0x218>)
 8001070:	2200      	movs	r2, #0
 8001072:	601a      	str	r2, [r3, #0]
			}
		}
		if(timer4_flag==1)
 8001074:	4b61      	ldr	r3, [pc, #388]	; (80011fc <display_traffic1+0x220>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	2b01      	cmp	r3, #1
 800107a:	f040 80a9 	bne.w	80011d0 <display_traffic1+0x1f4>
		{
			settimer4 (100) ;
 800107e:	2064      	movs	r0, #100	; 0x64
 8001080:	f7ff fe1c 	bl	8000cbc <settimer4>
			second -- ;
 8001084:	4b59      	ldr	r3, [pc, #356]	; (80011ec <display_traffic1+0x210>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	3b01      	subs	r3, #1
 800108a:	4a58      	ldr	r2, [pc, #352]	; (80011ec <display_traffic1+0x210>)
 800108c:	6013      	str	r3, [r2, #0]
			if(second <= 0 )
 800108e:	4b57      	ldr	r3, [pc, #348]	; (80011ec <display_traffic1+0x210>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	2b00      	cmp	r3, #0
 8001094:	dc0f      	bgt.n	80010b6 <display_traffic1+0xda>
			{
				status3 = auto_green;
 8001096:	4b52      	ldr	r3, [pc, #328]	; (80011e0 <display_traffic1+0x204>)
 8001098:	2202      	movs	r2, #2
 800109a:	601a      	str	r2, [r3, #0]
				second = timer2/100;
 800109c:	4b58      	ldr	r3, [pc, #352]	; (8001200 <display_traffic1+0x224>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	4a51      	ldr	r2, [pc, #324]	; (80011e8 <display_traffic1+0x20c>)
 80010a2:	fb82 1203 	smull	r1, r2, r2, r3
 80010a6:	1152      	asrs	r2, r2, #5
 80010a8:	17db      	asrs	r3, r3, #31
 80010aa:	1ad3      	subs	r3, r2, r3
 80010ac:	4a4f      	ldr	r2, [pc, #316]	; (80011ec <display_traffic1+0x210>)
 80010ae:	6013      	str	r3, [r2, #0]
				updateClockBuffer () ;
 80010b0:	f7ff ff3c 	bl	8000f2c <updateClockBuffer>
				break ;
 80010b4:	e091      	b.n	80011da <display_traffic1+0x1fe>
			}
		   updateClockBuffer () ;
 80010b6:	f7ff ff39 	bl	8000f2c <updateClockBuffer>
		}
		break ;
 80010ba:	e089      	b.n	80011d0 <display_traffic1+0x1f4>
	case auto_green :
		if (timer3_flag==1)
 80010bc:	4b4c      	ldr	r3, [pc, #304]	; (80011f0 <display_traffic1+0x214>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	2b01      	cmp	r3, #1
 80010c2:	d11f      	bne.n	8001104 <display_traffic1+0x128>
		{
			settimer3 (50) ;
 80010c4:	2032      	movs	r0, #50	; 0x32
 80010c6:	f7ff fde5 	bl	8000c94 <settimer3>
		    if( index_led < 2 )
 80010ca:	4b4a      	ldr	r3, [pc, #296]	; (80011f4 <display_traffic1+0x218>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	2b01      	cmp	r3, #1
 80010d0:	dc11      	bgt.n	80010f6 <display_traffic1+0x11a>
			{
			  update7SEGa ( index_led ) ;
 80010d2:	4b48      	ldr	r3, [pc, #288]	; (80011f4 <display_traffic1+0x218>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	4618      	mov	r0, r3
 80010d8:	f7ff f838 	bl	800014c <update7SEGa>
			  display7SEGa ( led_buffer [ index_led ] ) ;
 80010dc:	4b45      	ldr	r3, [pc, #276]	; (80011f4 <display_traffic1+0x218>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	4a45      	ldr	r2, [pc, #276]	; (80011f8 <display_traffic1+0x21c>)
 80010e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010e6:	4618      	mov	r0, r3
 80010e8:	f7ff f886 	bl	80001f8 <display7SEGa>
			  index_led ++ ;
 80010ec:	4b41      	ldr	r3, [pc, #260]	; (80011f4 <display_traffic1+0x218>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	3301      	adds	r3, #1
 80010f2:	4a40      	ldr	r2, [pc, #256]	; (80011f4 <display_traffic1+0x218>)
 80010f4:	6013      	str	r3, [r2, #0]
			}
			if( index_led >= 2 )
 80010f6:	4b3f      	ldr	r3, [pc, #252]	; (80011f4 <display_traffic1+0x218>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	2b01      	cmp	r3, #1
 80010fc:	dd02      	ble.n	8001104 <display_traffic1+0x128>
			{
			  index_led = 0;
 80010fe:	4b3d      	ldr	r3, [pc, #244]	; (80011f4 <display_traffic1+0x218>)
 8001100:	2200      	movs	r2, #0
 8001102:	601a      	str	r2, [r3, #0]
			}
		}
		if(timer4_flag==1)
 8001104:	4b3d      	ldr	r3, [pc, #244]	; (80011fc <display_traffic1+0x220>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	2b01      	cmp	r3, #1
 800110a:	d163      	bne.n	80011d4 <display_traffic1+0x1f8>
		{
			settimer4 (100) ;
 800110c:	2064      	movs	r0, #100	; 0x64
 800110e:	f7ff fdd5 	bl	8000cbc <settimer4>
			second -- ;
 8001112:	4b36      	ldr	r3, [pc, #216]	; (80011ec <display_traffic1+0x210>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	3b01      	subs	r3, #1
 8001118:	4a34      	ldr	r2, [pc, #208]	; (80011ec <display_traffic1+0x210>)
 800111a:	6013      	str	r3, [r2, #0]
			if(second <= 0 )
 800111c:	4b33      	ldr	r3, [pc, #204]	; (80011ec <display_traffic1+0x210>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	2b00      	cmp	r3, #0
 8001122:	dc0c      	bgt.n	800113e <display_traffic1+0x162>
			{
				status3 = auto_yellow;
 8001124:	4b2e      	ldr	r3, [pc, #184]	; (80011e0 <display_traffic1+0x204>)
 8001126:	2203      	movs	r2, #3
 8001128:	601a      	str	r2, [r3, #0]
				second = timer3/100;
 800112a:	4b36      	ldr	r3, [pc, #216]	; (8001204 <display_traffic1+0x228>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	4a2e      	ldr	r2, [pc, #184]	; (80011e8 <display_traffic1+0x20c>)
 8001130:	fb82 1203 	smull	r1, r2, r2, r3
 8001134:	1152      	asrs	r2, r2, #5
 8001136:	17db      	asrs	r3, r3, #31
 8001138:	1ad3      	subs	r3, r2, r3
 800113a:	4a2c      	ldr	r2, [pc, #176]	; (80011ec <display_traffic1+0x210>)
 800113c:	6013      	str	r3, [r2, #0]
			}
		   updateClockBuffer () ;
 800113e:	f7ff fef5 	bl	8000f2c <updateClockBuffer>
		}
		break;
 8001142:	e047      	b.n	80011d4 <display_traffic1+0x1f8>
	case auto_yellow :
		if (timer3_flag==1)
 8001144:	4b2a      	ldr	r3, [pc, #168]	; (80011f0 <display_traffic1+0x214>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	2b01      	cmp	r3, #1
 800114a:	d11f      	bne.n	800118c <display_traffic1+0x1b0>
		{
			settimer3 (50) ;
 800114c:	2032      	movs	r0, #50	; 0x32
 800114e:	f7ff fda1 	bl	8000c94 <settimer3>
		    if( index_led < 2 )
 8001152:	4b28      	ldr	r3, [pc, #160]	; (80011f4 <display_traffic1+0x218>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	2b01      	cmp	r3, #1
 8001158:	dc11      	bgt.n	800117e <display_traffic1+0x1a2>
			{
			  update7SEGa ( index_led ) ;
 800115a:	4b26      	ldr	r3, [pc, #152]	; (80011f4 <display_traffic1+0x218>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	4618      	mov	r0, r3
 8001160:	f7fe fff4 	bl	800014c <update7SEGa>
			  display7SEGa ( led_buffer [ index_led ] ) ;
 8001164:	4b23      	ldr	r3, [pc, #140]	; (80011f4 <display_traffic1+0x218>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	4a23      	ldr	r2, [pc, #140]	; (80011f8 <display_traffic1+0x21c>)
 800116a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800116e:	4618      	mov	r0, r3
 8001170:	f7ff f842 	bl	80001f8 <display7SEGa>
			  index_led ++ ;
 8001174:	4b1f      	ldr	r3, [pc, #124]	; (80011f4 <display_traffic1+0x218>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	3301      	adds	r3, #1
 800117a:	4a1e      	ldr	r2, [pc, #120]	; (80011f4 <display_traffic1+0x218>)
 800117c:	6013      	str	r3, [r2, #0]
			}
			if( index_led >= 2 )
 800117e:	4b1d      	ldr	r3, [pc, #116]	; (80011f4 <display_traffic1+0x218>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	2b01      	cmp	r3, #1
 8001184:	dd02      	ble.n	800118c <display_traffic1+0x1b0>
			{
			  index_led = 0;
 8001186:	4b1b      	ldr	r3, [pc, #108]	; (80011f4 <display_traffic1+0x218>)
 8001188:	2200      	movs	r2, #0
 800118a:	601a      	str	r2, [r3, #0]
			}
		}
		if(timer4_flag==1)
 800118c:	4b1b      	ldr	r3, [pc, #108]	; (80011fc <display_traffic1+0x220>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	2b01      	cmp	r3, #1
 8001192:	d121      	bne.n	80011d8 <display_traffic1+0x1fc>
		{
			settimer4 (100) ;
 8001194:	2064      	movs	r0, #100	; 0x64
 8001196:	f7ff fd91 	bl	8000cbc <settimer4>
			second -- ;
 800119a:	4b14      	ldr	r3, [pc, #80]	; (80011ec <display_traffic1+0x210>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	3b01      	subs	r3, #1
 80011a0:	4a12      	ldr	r2, [pc, #72]	; (80011ec <display_traffic1+0x210>)
 80011a2:	6013      	str	r3, [r2, #0]
			if(second <= 0 )
 80011a4:	4b11      	ldr	r3, [pc, #68]	; (80011ec <display_traffic1+0x210>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	dc0c      	bgt.n	80011c6 <display_traffic1+0x1ea>
			{
				status3 = auto_red;
 80011ac:	4b0c      	ldr	r3, [pc, #48]	; (80011e0 <display_traffic1+0x204>)
 80011ae:	2201      	movs	r2, #1
 80011b0:	601a      	str	r2, [r3, #0]
				second = timer1/100;
 80011b2:	4b0c      	ldr	r3, [pc, #48]	; (80011e4 <display_traffic1+0x208>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	4a0c      	ldr	r2, [pc, #48]	; (80011e8 <display_traffic1+0x20c>)
 80011b8:	fb82 1203 	smull	r1, r2, r2, r3
 80011bc:	1152      	asrs	r2, r2, #5
 80011be:	17db      	asrs	r3, r3, #31
 80011c0:	1ad3      	subs	r3, r2, r3
 80011c2:	4a0a      	ldr	r2, [pc, #40]	; (80011ec <display_traffic1+0x210>)
 80011c4:	6013      	str	r3, [r2, #0]
			}
		   updateClockBuffer () ;
 80011c6:	f7ff feb1 	bl	8000f2c <updateClockBuffer>
		}
		break ;
 80011ca:	e005      	b.n	80011d8 <display_traffic1+0x1fc>
	default : break ;
 80011cc:	bf00      	nop
 80011ce:	e004      	b.n	80011da <display_traffic1+0x1fe>
		break ;
 80011d0:	bf00      	nop
 80011d2:	e002      	b.n	80011da <display_traffic1+0x1fe>
		break;
 80011d4:	bf00      	nop
 80011d6:	e000      	b.n	80011da <display_traffic1+0x1fe>
		break ;
 80011d8:	bf00      	nop
	}
}
 80011da:	bf00      	nop
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	20000044 	.word	0x20000044
 80011e4:	20000000 	.word	0x20000000
 80011e8:	51eb851f 	.word	0x51eb851f
 80011ec:	200000c4 	.word	0x200000c4
 80011f0:	200000a8 	.word	0x200000a8
 80011f4:	200000cc 	.word	0x200000cc
 80011f8:	200000d4 	.word	0x200000d4
 80011fc:	200000b0 	.word	0x200000b0
 8001200:	20000004 	.word	0x20000004
 8001204:	20000008 	.word	0x20000008

08001208 <display_traffic2>:

void display_traffic2()
{
 8001208:	b580      	push	{r7, lr}
 800120a:	af00      	add	r7, sp, #0
	switch (status4)
 800120c:	4b7f      	ldr	r3, [pc, #508]	; (800140c <display_traffic2+0x204>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	2b03      	cmp	r3, #3
 8001212:	f200 80f1 	bhi.w	80013f8 <display_traffic2+0x1f0>
 8001216:	a201      	add	r2, pc, #4	; (adr r2, 800121c <display_traffic2+0x14>)
 8001218:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800121c:	0800122d 	.word	0x0800122d
 8001220:	08001259 	.word	0x08001259
 8001224:	080012e9 	.word	0x080012e9
 8001228:	08001371 	.word	0x08001371
	{
	case INIT :
	second2=timer2/100;
 800122c:	4b78      	ldr	r3, [pc, #480]	; (8001410 <display_traffic2+0x208>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4a78      	ldr	r2, [pc, #480]	; (8001414 <display_traffic2+0x20c>)
 8001232:	fb82 1203 	smull	r1, r2, r2, r3
 8001236:	1152      	asrs	r2, r2, #5
 8001238:	17db      	asrs	r3, r3, #31
 800123a:	1ad3      	subs	r3, r2, r3
 800123c:	4a76      	ldr	r2, [pc, #472]	; (8001418 <display_traffic2+0x210>)
 800123e:	6013      	str	r3, [r2, #0]
	updateClockBuffer2 ();
 8001240:	f7ff fea0 	bl	8000f84 <updateClockBuffer2>
    status4=auto_green;
 8001244:	4b71      	ldr	r3, [pc, #452]	; (800140c <display_traffic2+0x204>)
 8001246:	2202      	movs	r2, #2
 8001248:	601a      	str	r2, [r3, #0]
    settimer5(50);
 800124a:	2032      	movs	r0, #50	; 0x32
 800124c:	f7ff fd4a 	bl	8000ce4 <settimer5>
    settimer6(100);
 8001250:	2064      	movs	r0, #100	; 0x64
 8001252:	f7ff fd5b 	bl	8000d0c <settimer6>
		break;
 8001256:	e0d6      	b.n	8001406 <display_traffic2+0x1fe>
	case auto_red :
		if (timer5_flag==1)
 8001258:	4b70      	ldr	r3, [pc, #448]	; (800141c <display_traffic2+0x214>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	2b01      	cmp	r3, #1
 800125e:	d11f      	bne.n	80012a0 <display_traffic2+0x98>
		{
			settimer5 (50) ;
 8001260:	2032      	movs	r0, #50	; 0x32
 8001262:	f7ff fd3f 	bl	8000ce4 <settimer5>
		    if( index_led2 < 2 )
 8001266:	4b6e      	ldr	r3, [pc, #440]	; (8001420 <display_traffic2+0x218>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	2b01      	cmp	r3, #1
 800126c:	dc11      	bgt.n	8001292 <display_traffic2+0x8a>
			{
			  update7SEGb ( index_led2 ) ;
 800126e:	4b6c      	ldr	r3, [pc, #432]	; (8001420 <display_traffic2+0x218>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	4618      	mov	r0, r3
 8001274:	f7fe ff94 	bl	80001a0 <update7SEGb>
			  display7SEGb ( led_buffer2 [ index_led2 ] ) ;
 8001278:	4b69      	ldr	r3, [pc, #420]	; (8001420 <display_traffic2+0x218>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	4a69      	ldr	r2, [pc, #420]	; (8001424 <display_traffic2+0x21c>)
 800127e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001282:	4618      	mov	r0, r3
 8001284:	f7ff f8d6 	bl	8000434 <display7SEGb>
			  index_led2 ++ ;
 8001288:	4b65      	ldr	r3, [pc, #404]	; (8001420 <display_traffic2+0x218>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	3301      	adds	r3, #1
 800128e:	4a64      	ldr	r2, [pc, #400]	; (8001420 <display_traffic2+0x218>)
 8001290:	6013      	str	r3, [r2, #0]
			}
			if( index_led2 >= 2 )
 8001292:	4b63      	ldr	r3, [pc, #396]	; (8001420 <display_traffic2+0x218>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	2b01      	cmp	r3, #1
 8001298:	dd02      	ble.n	80012a0 <display_traffic2+0x98>
			{
			  index_led2 = 0;
 800129a:	4b61      	ldr	r3, [pc, #388]	; (8001420 <display_traffic2+0x218>)
 800129c:	2200      	movs	r2, #0
 800129e:	601a      	str	r2, [r3, #0]
			}
		}
		if(timer6_flag==1)
 80012a0:	4b61      	ldr	r3, [pc, #388]	; (8001428 <display_traffic2+0x220>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	2b01      	cmp	r3, #1
 80012a6:	f040 80a9 	bne.w	80013fc <display_traffic2+0x1f4>
		{
			settimer6 (100) ;
 80012aa:	2064      	movs	r0, #100	; 0x64
 80012ac:	f7ff fd2e 	bl	8000d0c <settimer6>
			second2 -- ;
 80012b0:	4b59      	ldr	r3, [pc, #356]	; (8001418 <display_traffic2+0x210>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	3b01      	subs	r3, #1
 80012b6:	4a58      	ldr	r2, [pc, #352]	; (8001418 <display_traffic2+0x210>)
 80012b8:	6013      	str	r3, [r2, #0]
			if(second2 <= 0 )
 80012ba:	4b57      	ldr	r3, [pc, #348]	; (8001418 <display_traffic2+0x210>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	dc0f      	bgt.n	80012e2 <display_traffic2+0xda>
			{
				status4 = auto_green;
 80012c2:	4b52      	ldr	r3, [pc, #328]	; (800140c <display_traffic2+0x204>)
 80012c4:	2202      	movs	r2, #2
 80012c6:	601a      	str	r2, [r3, #0]
				second2 = timer2/100;
 80012c8:	4b51      	ldr	r3, [pc, #324]	; (8001410 <display_traffic2+0x208>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	4a51      	ldr	r2, [pc, #324]	; (8001414 <display_traffic2+0x20c>)
 80012ce:	fb82 1203 	smull	r1, r2, r2, r3
 80012d2:	1152      	asrs	r2, r2, #5
 80012d4:	17db      	asrs	r3, r3, #31
 80012d6:	1ad3      	subs	r3, r2, r3
 80012d8:	4a4f      	ldr	r2, [pc, #316]	; (8001418 <display_traffic2+0x210>)
 80012da:	6013      	str	r3, [r2, #0]
				updateClockBuffer2 () ;
 80012dc:	f7ff fe52 	bl	8000f84 <updateClockBuffer2>
				break ;
 80012e0:	e091      	b.n	8001406 <display_traffic2+0x1fe>
			}
		   updateClockBuffer2 () ;
 80012e2:	f7ff fe4f 	bl	8000f84 <updateClockBuffer2>
		}
		break ;
 80012e6:	e089      	b.n	80013fc <display_traffic2+0x1f4>
	case auto_green :
		if (timer5_flag==1)
 80012e8:	4b4c      	ldr	r3, [pc, #304]	; (800141c <display_traffic2+0x214>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	2b01      	cmp	r3, #1
 80012ee:	d11f      	bne.n	8001330 <display_traffic2+0x128>
		{
			settimer5 (50) ;
 80012f0:	2032      	movs	r0, #50	; 0x32
 80012f2:	f7ff fcf7 	bl	8000ce4 <settimer5>
		    if( index_led2 < 2 )
 80012f6:	4b4a      	ldr	r3, [pc, #296]	; (8001420 <display_traffic2+0x218>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	2b01      	cmp	r3, #1
 80012fc:	dc11      	bgt.n	8001322 <display_traffic2+0x11a>
			{
			  update7SEGb ( index_led2 ) ;
 80012fe:	4b48      	ldr	r3, [pc, #288]	; (8001420 <display_traffic2+0x218>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	4618      	mov	r0, r3
 8001304:	f7fe ff4c 	bl	80001a0 <update7SEGb>
			  display7SEGb ( led_buffer2 [ index_led2 ] ) ;
 8001308:	4b45      	ldr	r3, [pc, #276]	; (8001420 <display_traffic2+0x218>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	4a45      	ldr	r2, [pc, #276]	; (8001424 <display_traffic2+0x21c>)
 800130e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001312:	4618      	mov	r0, r3
 8001314:	f7ff f88e 	bl	8000434 <display7SEGb>
			  index_led2 ++ ;
 8001318:	4b41      	ldr	r3, [pc, #260]	; (8001420 <display_traffic2+0x218>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	3301      	adds	r3, #1
 800131e:	4a40      	ldr	r2, [pc, #256]	; (8001420 <display_traffic2+0x218>)
 8001320:	6013      	str	r3, [r2, #0]
			}
			if( index_led2 >= 2 )
 8001322:	4b3f      	ldr	r3, [pc, #252]	; (8001420 <display_traffic2+0x218>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	2b01      	cmp	r3, #1
 8001328:	dd02      	ble.n	8001330 <display_traffic2+0x128>
			{
			  index_led2 = 0;
 800132a:	4b3d      	ldr	r3, [pc, #244]	; (8001420 <display_traffic2+0x218>)
 800132c:	2200      	movs	r2, #0
 800132e:	601a      	str	r2, [r3, #0]
			}
		}
		if(timer6_flag==1)
 8001330:	4b3d      	ldr	r3, [pc, #244]	; (8001428 <display_traffic2+0x220>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	2b01      	cmp	r3, #1
 8001336:	d163      	bne.n	8001400 <display_traffic2+0x1f8>
		{
			settimer6 (100) ;
 8001338:	2064      	movs	r0, #100	; 0x64
 800133a:	f7ff fce7 	bl	8000d0c <settimer6>
			second2 -- ;
 800133e:	4b36      	ldr	r3, [pc, #216]	; (8001418 <display_traffic2+0x210>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	3b01      	subs	r3, #1
 8001344:	4a34      	ldr	r2, [pc, #208]	; (8001418 <display_traffic2+0x210>)
 8001346:	6013      	str	r3, [r2, #0]
			if(second2 <= 0 )
 8001348:	4b33      	ldr	r3, [pc, #204]	; (8001418 <display_traffic2+0x210>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	2b00      	cmp	r3, #0
 800134e:	dc0c      	bgt.n	800136a <display_traffic2+0x162>
			{
				status4 = auto_yellow;
 8001350:	4b2e      	ldr	r3, [pc, #184]	; (800140c <display_traffic2+0x204>)
 8001352:	2203      	movs	r2, #3
 8001354:	601a      	str	r2, [r3, #0]
				second2 = timer3/100;
 8001356:	4b35      	ldr	r3, [pc, #212]	; (800142c <display_traffic2+0x224>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	4a2e      	ldr	r2, [pc, #184]	; (8001414 <display_traffic2+0x20c>)
 800135c:	fb82 1203 	smull	r1, r2, r2, r3
 8001360:	1152      	asrs	r2, r2, #5
 8001362:	17db      	asrs	r3, r3, #31
 8001364:	1ad3      	subs	r3, r2, r3
 8001366:	4a2c      	ldr	r2, [pc, #176]	; (8001418 <display_traffic2+0x210>)
 8001368:	6013      	str	r3, [r2, #0]
			}
		   updateClockBuffer2 () ;
 800136a:	f7ff fe0b 	bl	8000f84 <updateClockBuffer2>
		}
		break;
 800136e:	e047      	b.n	8001400 <display_traffic2+0x1f8>
	case auto_yellow :
		if (timer5_flag==1)
 8001370:	4b2a      	ldr	r3, [pc, #168]	; (800141c <display_traffic2+0x214>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	2b01      	cmp	r3, #1
 8001376:	d11f      	bne.n	80013b8 <display_traffic2+0x1b0>
		{
			settimer5 (50) ;
 8001378:	2032      	movs	r0, #50	; 0x32
 800137a:	f7ff fcb3 	bl	8000ce4 <settimer5>
		    if( index_led2 < 2 )
 800137e:	4b28      	ldr	r3, [pc, #160]	; (8001420 <display_traffic2+0x218>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	2b01      	cmp	r3, #1
 8001384:	dc11      	bgt.n	80013aa <display_traffic2+0x1a2>
			{
			  update7SEGb ( index_led2 ) ;
 8001386:	4b26      	ldr	r3, [pc, #152]	; (8001420 <display_traffic2+0x218>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	4618      	mov	r0, r3
 800138c:	f7fe ff08 	bl	80001a0 <update7SEGb>
			  display7SEGb ( led_buffer2 [ index_led2 ] ) ;
 8001390:	4b23      	ldr	r3, [pc, #140]	; (8001420 <display_traffic2+0x218>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	4a23      	ldr	r2, [pc, #140]	; (8001424 <display_traffic2+0x21c>)
 8001396:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800139a:	4618      	mov	r0, r3
 800139c:	f7ff f84a 	bl	8000434 <display7SEGb>
			  index_led2 ++ ;
 80013a0:	4b1f      	ldr	r3, [pc, #124]	; (8001420 <display_traffic2+0x218>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	3301      	adds	r3, #1
 80013a6:	4a1e      	ldr	r2, [pc, #120]	; (8001420 <display_traffic2+0x218>)
 80013a8:	6013      	str	r3, [r2, #0]
			}
			if( index_led2 >= 2 )
 80013aa:	4b1d      	ldr	r3, [pc, #116]	; (8001420 <display_traffic2+0x218>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	2b01      	cmp	r3, #1
 80013b0:	dd02      	ble.n	80013b8 <display_traffic2+0x1b0>
			{
			  index_led2 = 0;
 80013b2:	4b1b      	ldr	r3, [pc, #108]	; (8001420 <display_traffic2+0x218>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	601a      	str	r2, [r3, #0]
			}
		}
		if(timer6_flag==1)
 80013b8:	4b1b      	ldr	r3, [pc, #108]	; (8001428 <display_traffic2+0x220>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	2b01      	cmp	r3, #1
 80013be:	d121      	bne.n	8001404 <display_traffic2+0x1fc>
		{
			settimer6 (100) ;
 80013c0:	2064      	movs	r0, #100	; 0x64
 80013c2:	f7ff fca3 	bl	8000d0c <settimer6>
			second2 -- ;
 80013c6:	4b14      	ldr	r3, [pc, #80]	; (8001418 <display_traffic2+0x210>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	3b01      	subs	r3, #1
 80013cc:	4a12      	ldr	r2, [pc, #72]	; (8001418 <display_traffic2+0x210>)
 80013ce:	6013      	str	r3, [r2, #0]
			if(second2 <= 0 )
 80013d0:	4b11      	ldr	r3, [pc, #68]	; (8001418 <display_traffic2+0x210>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	dc0c      	bgt.n	80013f2 <display_traffic2+0x1ea>
			{
				status4 = auto_red;
 80013d8:	4b0c      	ldr	r3, [pc, #48]	; (800140c <display_traffic2+0x204>)
 80013da:	2201      	movs	r2, #1
 80013dc:	601a      	str	r2, [r3, #0]
				second2 = timer1/100;
 80013de:	4b14      	ldr	r3, [pc, #80]	; (8001430 <display_traffic2+0x228>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	4a0c      	ldr	r2, [pc, #48]	; (8001414 <display_traffic2+0x20c>)
 80013e4:	fb82 1203 	smull	r1, r2, r2, r3
 80013e8:	1152      	asrs	r2, r2, #5
 80013ea:	17db      	asrs	r3, r3, #31
 80013ec:	1ad3      	subs	r3, r2, r3
 80013ee:	4a0a      	ldr	r2, [pc, #40]	; (8001418 <display_traffic2+0x210>)
 80013f0:	6013      	str	r3, [r2, #0]
			}
		   updateClockBuffer2 () ;
 80013f2:	f7ff fdc7 	bl	8000f84 <updateClockBuffer2>
		}
		break ;
 80013f6:	e005      	b.n	8001404 <display_traffic2+0x1fc>
	default : break ;
 80013f8:	bf00      	nop
 80013fa:	e004      	b.n	8001406 <display_traffic2+0x1fe>
		break ;
 80013fc:	bf00      	nop
 80013fe:	e002      	b.n	8001406 <display_traffic2+0x1fe>
		break;
 8001400:	bf00      	nop
 8001402:	e000      	b.n	8001406 <display_traffic2+0x1fe>
		break ;
 8001404:	bf00      	nop
	}
}
 8001406:	bf00      	nop
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	20000048 	.word	0x20000048
 8001410:	20000004 	.word	0x20000004
 8001414:	51eb851f 	.word	0x51eb851f
 8001418:	200000c8 	.word	0x200000c8
 800141c:	200000b8 	.word	0x200000b8
 8001420:	200000d0 	.word	0x200000d0
 8001424:	200000dc 	.word	0x200000dc
 8001428:	200000c0 	.word	0x200000c0
 800142c:	20000008 	.word	0x20000008
 8001430:	20000000 	.word	0x20000000

08001434 <display_traffic>:

void display_traffic()
{
 8001434:	b580      	push	{r7, lr}
 8001436:	af00      	add	r7, sp, #0
	display_traffic1();
 8001438:	f7ff fdd0 	bl	8000fdc <display_traffic1>
	display_traffic2();
 800143c:	f7ff fee4 	bl	8001208 <display_traffic2>
}
 8001440:	bf00      	nop
 8001442:	bd80      	pop	{r7, pc}

08001444 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001444:	f7ff fd6c 	bl	8000f20 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001448:	480b      	ldr	r0, [pc, #44]	; (8001478 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800144a:	490c      	ldr	r1, [pc, #48]	; (800147c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800144c:	4a0c      	ldr	r2, [pc, #48]	; (8001480 <LoopFillZerobss+0x16>)
  movs r3, #0
 800144e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001450:	e002      	b.n	8001458 <LoopCopyDataInit>

08001452 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001452:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001454:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001456:	3304      	adds	r3, #4

08001458 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001458:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800145a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800145c:	d3f9      	bcc.n	8001452 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800145e:	4a09      	ldr	r2, [pc, #36]	; (8001484 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001460:	4c09      	ldr	r4, [pc, #36]	; (8001488 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001462:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001464:	e001      	b.n	800146a <LoopFillZerobss>

08001466 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001466:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001468:	3204      	adds	r2, #4

0800146a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800146a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800146c:	d3fb      	bcc.n	8001466 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800146e:	f001 fae1 	bl	8002a34 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001472:	f7ff fad1 	bl	8000a18 <main>
  bx lr
 8001476:	4770      	bx	lr
  ldr r0, =_sdata
 8001478:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800147c:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8001480:	08002ac0 	.word	0x08002ac0
  ldr r2, =_sbss
 8001484:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8001488:	200000e8 	.word	0x200000e8

0800148c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800148c:	e7fe      	b.n	800148c <ADC1_2_IRQHandler>
	...

08001490 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001494:	4b08      	ldr	r3, [pc, #32]	; (80014b8 <HAL_Init+0x28>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	4a07      	ldr	r2, [pc, #28]	; (80014b8 <HAL_Init+0x28>)
 800149a:	f043 0310 	orr.w	r3, r3, #16
 800149e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014a0:	2003      	movs	r0, #3
 80014a2:	f000 f923 	bl	80016ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014a6:	200f      	movs	r0, #15
 80014a8:	f000 f808 	bl	80014bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014ac:	f7ff fcc0 	bl	8000e30 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014b0:	2300      	movs	r3, #0
}
 80014b2:	4618      	mov	r0, r3
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	40022000 	.word	0x40022000

080014bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b082      	sub	sp, #8
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014c4:	4b12      	ldr	r3, [pc, #72]	; (8001510 <HAL_InitTick+0x54>)
 80014c6:	681a      	ldr	r2, [r3, #0]
 80014c8:	4b12      	ldr	r3, [pc, #72]	; (8001514 <HAL_InitTick+0x58>)
 80014ca:	781b      	ldrb	r3, [r3, #0]
 80014cc:	4619      	mov	r1, r3
 80014ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80014d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80014da:	4618      	mov	r0, r3
 80014dc:	f000 f93b 	bl	8001756 <HAL_SYSTICK_Config>
 80014e0:	4603      	mov	r3, r0
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d001      	beq.n	80014ea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80014e6:	2301      	movs	r3, #1
 80014e8:	e00e      	b.n	8001508 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	2b0f      	cmp	r3, #15
 80014ee:	d80a      	bhi.n	8001506 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014f0:	2200      	movs	r2, #0
 80014f2:	6879      	ldr	r1, [r7, #4]
 80014f4:	f04f 30ff 	mov.w	r0, #4294967295
 80014f8:	f000 f903 	bl	8001702 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014fc:	4a06      	ldr	r2, [pc, #24]	; (8001518 <HAL_InitTick+0x5c>)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001502:	2300      	movs	r3, #0
 8001504:	e000      	b.n	8001508 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001506:	2301      	movs	r3, #1
}
 8001508:	4618      	mov	r0, r3
 800150a:	3708      	adds	r7, #8
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}
 8001510:	2000000c 	.word	0x2000000c
 8001514:	20000014 	.word	0x20000014
 8001518:	20000010 	.word	0x20000010

0800151c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800151c:	b480      	push	{r7}
 800151e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001520:	4b05      	ldr	r3, [pc, #20]	; (8001538 <HAL_IncTick+0x1c>)
 8001522:	781b      	ldrb	r3, [r3, #0]
 8001524:	461a      	mov	r2, r3
 8001526:	4b05      	ldr	r3, [pc, #20]	; (800153c <HAL_IncTick+0x20>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	4413      	add	r3, r2
 800152c:	4a03      	ldr	r2, [pc, #12]	; (800153c <HAL_IncTick+0x20>)
 800152e:	6013      	str	r3, [r2, #0]
}
 8001530:	bf00      	nop
 8001532:	46bd      	mov	sp, r7
 8001534:	bc80      	pop	{r7}
 8001536:	4770      	bx	lr
 8001538:	20000014 	.word	0x20000014
 800153c:	200000e4 	.word	0x200000e4

08001540 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001540:	b480      	push	{r7}
 8001542:	af00      	add	r7, sp, #0
  return uwTick;
 8001544:	4b02      	ldr	r3, [pc, #8]	; (8001550 <HAL_GetTick+0x10>)
 8001546:	681b      	ldr	r3, [r3, #0]
}
 8001548:	4618      	mov	r0, r3
 800154a:	46bd      	mov	sp, r7
 800154c:	bc80      	pop	{r7}
 800154e:	4770      	bx	lr
 8001550:	200000e4 	.word	0x200000e4

08001554 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001554:	b480      	push	{r7}
 8001556:	b085      	sub	sp, #20
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	f003 0307 	and.w	r3, r3, #7
 8001562:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001564:	4b0c      	ldr	r3, [pc, #48]	; (8001598 <__NVIC_SetPriorityGrouping+0x44>)
 8001566:	68db      	ldr	r3, [r3, #12]
 8001568:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800156a:	68ba      	ldr	r2, [r7, #8]
 800156c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001570:	4013      	ands	r3, r2
 8001572:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001578:	68bb      	ldr	r3, [r7, #8]
 800157a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800157c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001580:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001584:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001586:	4a04      	ldr	r2, [pc, #16]	; (8001598 <__NVIC_SetPriorityGrouping+0x44>)
 8001588:	68bb      	ldr	r3, [r7, #8]
 800158a:	60d3      	str	r3, [r2, #12]
}
 800158c:	bf00      	nop
 800158e:	3714      	adds	r7, #20
 8001590:	46bd      	mov	sp, r7
 8001592:	bc80      	pop	{r7}
 8001594:	4770      	bx	lr
 8001596:	bf00      	nop
 8001598:	e000ed00 	.word	0xe000ed00

0800159c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800159c:	b480      	push	{r7}
 800159e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015a0:	4b04      	ldr	r3, [pc, #16]	; (80015b4 <__NVIC_GetPriorityGrouping+0x18>)
 80015a2:	68db      	ldr	r3, [r3, #12]
 80015a4:	0a1b      	lsrs	r3, r3, #8
 80015a6:	f003 0307 	and.w	r3, r3, #7
}
 80015aa:	4618      	mov	r0, r3
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bc80      	pop	{r7}
 80015b0:	4770      	bx	lr
 80015b2:	bf00      	nop
 80015b4:	e000ed00 	.word	0xe000ed00

080015b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015b8:	b480      	push	{r7}
 80015ba:	b083      	sub	sp, #12
 80015bc:	af00      	add	r7, sp, #0
 80015be:	4603      	mov	r3, r0
 80015c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	db0b      	blt.n	80015e2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015ca:	79fb      	ldrb	r3, [r7, #7]
 80015cc:	f003 021f 	and.w	r2, r3, #31
 80015d0:	4906      	ldr	r1, [pc, #24]	; (80015ec <__NVIC_EnableIRQ+0x34>)
 80015d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015d6:	095b      	lsrs	r3, r3, #5
 80015d8:	2001      	movs	r0, #1
 80015da:	fa00 f202 	lsl.w	r2, r0, r2
 80015de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80015e2:	bf00      	nop
 80015e4:	370c      	adds	r7, #12
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bc80      	pop	{r7}
 80015ea:	4770      	bx	lr
 80015ec:	e000e100 	.word	0xe000e100

080015f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015f0:	b480      	push	{r7}
 80015f2:	b083      	sub	sp, #12
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	4603      	mov	r3, r0
 80015f8:	6039      	str	r1, [r7, #0]
 80015fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001600:	2b00      	cmp	r3, #0
 8001602:	db0a      	blt.n	800161a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	b2da      	uxtb	r2, r3
 8001608:	490c      	ldr	r1, [pc, #48]	; (800163c <__NVIC_SetPriority+0x4c>)
 800160a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800160e:	0112      	lsls	r2, r2, #4
 8001610:	b2d2      	uxtb	r2, r2
 8001612:	440b      	add	r3, r1
 8001614:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001618:	e00a      	b.n	8001630 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	b2da      	uxtb	r2, r3
 800161e:	4908      	ldr	r1, [pc, #32]	; (8001640 <__NVIC_SetPriority+0x50>)
 8001620:	79fb      	ldrb	r3, [r7, #7]
 8001622:	f003 030f 	and.w	r3, r3, #15
 8001626:	3b04      	subs	r3, #4
 8001628:	0112      	lsls	r2, r2, #4
 800162a:	b2d2      	uxtb	r2, r2
 800162c:	440b      	add	r3, r1
 800162e:	761a      	strb	r2, [r3, #24]
}
 8001630:	bf00      	nop
 8001632:	370c      	adds	r7, #12
 8001634:	46bd      	mov	sp, r7
 8001636:	bc80      	pop	{r7}
 8001638:	4770      	bx	lr
 800163a:	bf00      	nop
 800163c:	e000e100 	.word	0xe000e100
 8001640:	e000ed00 	.word	0xe000ed00

08001644 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001644:	b480      	push	{r7}
 8001646:	b089      	sub	sp, #36	; 0x24
 8001648:	af00      	add	r7, sp, #0
 800164a:	60f8      	str	r0, [r7, #12]
 800164c:	60b9      	str	r1, [r7, #8]
 800164e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	f003 0307 	and.w	r3, r3, #7
 8001656:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001658:	69fb      	ldr	r3, [r7, #28]
 800165a:	f1c3 0307 	rsb	r3, r3, #7
 800165e:	2b04      	cmp	r3, #4
 8001660:	bf28      	it	cs
 8001662:	2304      	movcs	r3, #4
 8001664:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001666:	69fb      	ldr	r3, [r7, #28]
 8001668:	3304      	adds	r3, #4
 800166a:	2b06      	cmp	r3, #6
 800166c:	d902      	bls.n	8001674 <NVIC_EncodePriority+0x30>
 800166e:	69fb      	ldr	r3, [r7, #28]
 8001670:	3b03      	subs	r3, #3
 8001672:	e000      	b.n	8001676 <NVIC_EncodePriority+0x32>
 8001674:	2300      	movs	r3, #0
 8001676:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001678:	f04f 32ff 	mov.w	r2, #4294967295
 800167c:	69bb      	ldr	r3, [r7, #24]
 800167e:	fa02 f303 	lsl.w	r3, r2, r3
 8001682:	43da      	mvns	r2, r3
 8001684:	68bb      	ldr	r3, [r7, #8]
 8001686:	401a      	ands	r2, r3
 8001688:	697b      	ldr	r3, [r7, #20]
 800168a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800168c:	f04f 31ff 	mov.w	r1, #4294967295
 8001690:	697b      	ldr	r3, [r7, #20]
 8001692:	fa01 f303 	lsl.w	r3, r1, r3
 8001696:	43d9      	mvns	r1, r3
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800169c:	4313      	orrs	r3, r2
         );
}
 800169e:	4618      	mov	r0, r3
 80016a0:	3724      	adds	r7, #36	; 0x24
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bc80      	pop	{r7}
 80016a6:	4770      	bx	lr

080016a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b082      	sub	sp, #8
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	3b01      	subs	r3, #1
 80016b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80016b8:	d301      	bcc.n	80016be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016ba:	2301      	movs	r3, #1
 80016bc:	e00f      	b.n	80016de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016be:	4a0a      	ldr	r2, [pc, #40]	; (80016e8 <SysTick_Config+0x40>)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	3b01      	subs	r3, #1
 80016c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016c6:	210f      	movs	r1, #15
 80016c8:	f04f 30ff 	mov.w	r0, #4294967295
 80016cc:	f7ff ff90 	bl	80015f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016d0:	4b05      	ldr	r3, [pc, #20]	; (80016e8 <SysTick_Config+0x40>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016d6:	4b04      	ldr	r3, [pc, #16]	; (80016e8 <SysTick_Config+0x40>)
 80016d8:	2207      	movs	r2, #7
 80016da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016dc:	2300      	movs	r3, #0
}
 80016de:	4618      	mov	r0, r3
 80016e0:	3708      	adds	r7, #8
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	e000e010 	.word	0xe000e010

080016ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b082      	sub	sp, #8
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016f4:	6878      	ldr	r0, [r7, #4]
 80016f6:	f7ff ff2d 	bl	8001554 <__NVIC_SetPriorityGrouping>
}
 80016fa:	bf00      	nop
 80016fc:	3708      	adds	r7, #8
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}

08001702 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001702:	b580      	push	{r7, lr}
 8001704:	b086      	sub	sp, #24
 8001706:	af00      	add	r7, sp, #0
 8001708:	4603      	mov	r3, r0
 800170a:	60b9      	str	r1, [r7, #8]
 800170c:	607a      	str	r2, [r7, #4]
 800170e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001710:	2300      	movs	r3, #0
 8001712:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001714:	f7ff ff42 	bl	800159c <__NVIC_GetPriorityGrouping>
 8001718:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800171a:	687a      	ldr	r2, [r7, #4]
 800171c:	68b9      	ldr	r1, [r7, #8]
 800171e:	6978      	ldr	r0, [r7, #20]
 8001720:	f7ff ff90 	bl	8001644 <NVIC_EncodePriority>
 8001724:	4602      	mov	r2, r0
 8001726:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800172a:	4611      	mov	r1, r2
 800172c:	4618      	mov	r0, r3
 800172e:	f7ff ff5f 	bl	80015f0 <__NVIC_SetPriority>
}
 8001732:	bf00      	nop
 8001734:	3718      	adds	r7, #24
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}

0800173a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800173a:	b580      	push	{r7, lr}
 800173c:	b082      	sub	sp, #8
 800173e:	af00      	add	r7, sp, #0
 8001740:	4603      	mov	r3, r0
 8001742:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001744:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001748:	4618      	mov	r0, r3
 800174a:	f7ff ff35 	bl	80015b8 <__NVIC_EnableIRQ>
}
 800174e:	bf00      	nop
 8001750:	3708      	adds	r7, #8
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}

08001756 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001756:	b580      	push	{r7, lr}
 8001758:	b082      	sub	sp, #8
 800175a:	af00      	add	r7, sp, #0
 800175c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800175e:	6878      	ldr	r0, [r7, #4]
 8001760:	f7ff ffa2 	bl	80016a8 <SysTick_Config>
 8001764:	4603      	mov	r3, r0
}
 8001766:	4618      	mov	r0, r3
 8001768:	3708      	adds	r7, #8
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}
	...

08001770 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001770:	b480      	push	{r7}
 8001772:	b08b      	sub	sp, #44	; 0x2c
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
 8001778:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800177a:	2300      	movs	r3, #0
 800177c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800177e:	2300      	movs	r3, #0
 8001780:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001782:	e161      	b.n	8001a48 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001784:	2201      	movs	r2, #1
 8001786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001788:	fa02 f303 	lsl.w	r3, r2, r3
 800178c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	69fa      	ldr	r2, [r7, #28]
 8001794:	4013      	ands	r3, r2
 8001796:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001798:	69ba      	ldr	r2, [r7, #24]
 800179a:	69fb      	ldr	r3, [r7, #28]
 800179c:	429a      	cmp	r2, r3
 800179e:	f040 8150 	bne.w	8001a42 <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	4a97      	ldr	r2, [pc, #604]	; (8001a04 <HAL_GPIO_Init+0x294>)
 80017a8:	4293      	cmp	r3, r2
 80017aa:	d05e      	beq.n	800186a <HAL_GPIO_Init+0xfa>
 80017ac:	4a95      	ldr	r2, [pc, #596]	; (8001a04 <HAL_GPIO_Init+0x294>)
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d875      	bhi.n	800189e <HAL_GPIO_Init+0x12e>
 80017b2:	4a95      	ldr	r2, [pc, #596]	; (8001a08 <HAL_GPIO_Init+0x298>)
 80017b4:	4293      	cmp	r3, r2
 80017b6:	d058      	beq.n	800186a <HAL_GPIO_Init+0xfa>
 80017b8:	4a93      	ldr	r2, [pc, #588]	; (8001a08 <HAL_GPIO_Init+0x298>)
 80017ba:	4293      	cmp	r3, r2
 80017bc:	d86f      	bhi.n	800189e <HAL_GPIO_Init+0x12e>
 80017be:	4a93      	ldr	r2, [pc, #588]	; (8001a0c <HAL_GPIO_Init+0x29c>)
 80017c0:	4293      	cmp	r3, r2
 80017c2:	d052      	beq.n	800186a <HAL_GPIO_Init+0xfa>
 80017c4:	4a91      	ldr	r2, [pc, #580]	; (8001a0c <HAL_GPIO_Init+0x29c>)
 80017c6:	4293      	cmp	r3, r2
 80017c8:	d869      	bhi.n	800189e <HAL_GPIO_Init+0x12e>
 80017ca:	4a91      	ldr	r2, [pc, #580]	; (8001a10 <HAL_GPIO_Init+0x2a0>)
 80017cc:	4293      	cmp	r3, r2
 80017ce:	d04c      	beq.n	800186a <HAL_GPIO_Init+0xfa>
 80017d0:	4a8f      	ldr	r2, [pc, #572]	; (8001a10 <HAL_GPIO_Init+0x2a0>)
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d863      	bhi.n	800189e <HAL_GPIO_Init+0x12e>
 80017d6:	4a8f      	ldr	r2, [pc, #572]	; (8001a14 <HAL_GPIO_Init+0x2a4>)
 80017d8:	4293      	cmp	r3, r2
 80017da:	d046      	beq.n	800186a <HAL_GPIO_Init+0xfa>
 80017dc:	4a8d      	ldr	r2, [pc, #564]	; (8001a14 <HAL_GPIO_Init+0x2a4>)
 80017de:	4293      	cmp	r3, r2
 80017e0:	d85d      	bhi.n	800189e <HAL_GPIO_Init+0x12e>
 80017e2:	2b12      	cmp	r3, #18
 80017e4:	d82a      	bhi.n	800183c <HAL_GPIO_Init+0xcc>
 80017e6:	2b12      	cmp	r3, #18
 80017e8:	d859      	bhi.n	800189e <HAL_GPIO_Init+0x12e>
 80017ea:	a201      	add	r2, pc, #4	; (adr r2, 80017f0 <HAL_GPIO_Init+0x80>)
 80017ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017f0:	0800186b 	.word	0x0800186b
 80017f4:	08001845 	.word	0x08001845
 80017f8:	08001857 	.word	0x08001857
 80017fc:	08001899 	.word	0x08001899
 8001800:	0800189f 	.word	0x0800189f
 8001804:	0800189f 	.word	0x0800189f
 8001808:	0800189f 	.word	0x0800189f
 800180c:	0800189f 	.word	0x0800189f
 8001810:	0800189f 	.word	0x0800189f
 8001814:	0800189f 	.word	0x0800189f
 8001818:	0800189f 	.word	0x0800189f
 800181c:	0800189f 	.word	0x0800189f
 8001820:	0800189f 	.word	0x0800189f
 8001824:	0800189f 	.word	0x0800189f
 8001828:	0800189f 	.word	0x0800189f
 800182c:	0800189f 	.word	0x0800189f
 8001830:	0800189f 	.word	0x0800189f
 8001834:	0800184d 	.word	0x0800184d
 8001838:	08001861 	.word	0x08001861
 800183c:	4a76      	ldr	r2, [pc, #472]	; (8001a18 <HAL_GPIO_Init+0x2a8>)
 800183e:	4293      	cmp	r3, r2
 8001840:	d013      	beq.n	800186a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001842:	e02c      	b.n	800189e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	68db      	ldr	r3, [r3, #12]
 8001848:	623b      	str	r3, [r7, #32]
          break;
 800184a:	e029      	b.n	80018a0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	68db      	ldr	r3, [r3, #12]
 8001850:	3304      	adds	r3, #4
 8001852:	623b      	str	r3, [r7, #32]
          break;
 8001854:	e024      	b.n	80018a0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	68db      	ldr	r3, [r3, #12]
 800185a:	3308      	adds	r3, #8
 800185c:	623b      	str	r3, [r7, #32]
          break;
 800185e:	e01f      	b.n	80018a0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	68db      	ldr	r3, [r3, #12]
 8001864:	330c      	adds	r3, #12
 8001866:	623b      	str	r3, [r7, #32]
          break;
 8001868:	e01a      	b.n	80018a0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	689b      	ldr	r3, [r3, #8]
 800186e:	2b00      	cmp	r3, #0
 8001870:	d102      	bne.n	8001878 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001872:	2304      	movs	r3, #4
 8001874:	623b      	str	r3, [r7, #32]
          break;
 8001876:	e013      	b.n	80018a0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	689b      	ldr	r3, [r3, #8]
 800187c:	2b01      	cmp	r3, #1
 800187e:	d105      	bne.n	800188c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001880:	2308      	movs	r3, #8
 8001882:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	69fa      	ldr	r2, [r7, #28]
 8001888:	611a      	str	r2, [r3, #16]
          break;
 800188a:	e009      	b.n	80018a0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800188c:	2308      	movs	r3, #8
 800188e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	69fa      	ldr	r2, [r7, #28]
 8001894:	615a      	str	r2, [r3, #20]
          break;
 8001896:	e003      	b.n	80018a0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001898:	2300      	movs	r3, #0
 800189a:	623b      	str	r3, [r7, #32]
          break;
 800189c:	e000      	b.n	80018a0 <HAL_GPIO_Init+0x130>
          break;
 800189e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80018a0:	69bb      	ldr	r3, [r7, #24]
 80018a2:	2bff      	cmp	r3, #255	; 0xff
 80018a4:	d801      	bhi.n	80018aa <HAL_GPIO_Init+0x13a>
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	e001      	b.n	80018ae <HAL_GPIO_Init+0x13e>
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	3304      	adds	r3, #4
 80018ae:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80018b0:	69bb      	ldr	r3, [r7, #24]
 80018b2:	2bff      	cmp	r3, #255	; 0xff
 80018b4:	d802      	bhi.n	80018bc <HAL_GPIO_Init+0x14c>
 80018b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018b8:	009b      	lsls	r3, r3, #2
 80018ba:	e002      	b.n	80018c2 <HAL_GPIO_Init+0x152>
 80018bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018be:	3b08      	subs	r3, #8
 80018c0:	009b      	lsls	r3, r3, #2
 80018c2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80018c4:	697b      	ldr	r3, [r7, #20]
 80018c6:	681a      	ldr	r2, [r3, #0]
 80018c8:	210f      	movs	r1, #15
 80018ca:	693b      	ldr	r3, [r7, #16]
 80018cc:	fa01 f303 	lsl.w	r3, r1, r3
 80018d0:	43db      	mvns	r3, r3
 80018d2:	401a      	ands	r2, r3
 80018d4:	6a39      	ldr	r1, [r7, #32]
 80018d6:	693b      	ldr	r3, [r7, #16]
 80018d8:	fa01 f303 	lsl.w	r3, r1, r3
 80018dc:	431a      	orrs	r2, r3
 80018de:	697b      	ldr	r3, [r7, #20]
 80018e0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	f000 80a9 	beq.w	8001a42 <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80018f0:	4b4a      	ldr	r3, [pc, #296]	; (8001a1c <HAL_GPIO_Init+0x2ac>)
 80018f2:	699b      	ldr	r3, [r3, #24]
 80018f4:	4a49      	ldr	r2, [pc, #292]	; (8001a1c <HAL_GPIO_Init+0x2ac>)
 80018f6:	f043 0301 	orr.w	r3, r3, #1
 80018fa:	6193      	str	r3, [r2, #24]
 80018fc:	4b47      	ldr	r3, [pc, #284]	; (8001a1c <HAL_GPIO_Init+0x2ac>)
 80018fe:	699b      	ldr	r3, [r3, #24]
 8001900:	f003 0301 	and.w	r3, r3, #1
 8001904:	60bb      	str	r3, [r7, #8]
 8001906:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001908:	4a45      	ldr	r2, [pc, #276]	; (8001a20 <HAL_GPIO_Init+0x2b0>)
 800190a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800190c:	089b      	lsrs	r3, r3, #2
 800190e:	3302      	adds	r3, #2
 8001910:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001914:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001918:	f003 0303 	and.w	r3, r3, #3
 800191c:	009b      	lsls	r3, r3, #2
 800191e:	220f      	movs	r2, #15
 8001920:	fa02 f303 	lsl.w	r3, r2, r3
 8001924:	43db      	mvns	r3, r3
 8001926:	68fa      	ldr	r2, [r7, #12]
 8001928:	4013      	ands	r3, r2
 800192a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	4a3d      	ldr	r2, [pc, #244]	; (8001a24 <HAL_GPIO_Init+0x2b4>)
 8001930:	4293      	cmp	r3, r2
 8001932:	d00d      	beq.n	8001950 <HAL_GPIO_Init+0x1e0>
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	4a3c      	ldr	r2, [pc, #240]	; (8001a28 <HAL_GPIO_Init+0x2b8>)
 8001938:	4293      	cmp	r3, r2
 800193a:	d007      	beq.n	800194c <HAL_GPIO_Init+0x1dc>
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	4a3b      	ldr	r2, [pc, #236]	; (8001a2c <HAL_GPIO_Init+0x2bc>)
 8001940:	4293      	cmp	r3, r2
 8001942:	d101      	bne.n	8001948 <HAL_GPIO_Init+0x1d8>
 8001944:	2302      	movs	r3, #2
 8001946:	e004      	b.n	8001952 <HAL_GPIO_Init+0x1e2>
 8001948:	2303      	movs	r3, #3
 800194a:	e002      	b.n	8001952 <HAL_GPIO_Init+0x1e2>
 800194c:	2301      	movs	r3, #1
 800194e:	e000      	b.n	8001952 <HAL_GPIO_Init+0x1e2>
 8001950:	2300      	movs	r3, #0
 8001952:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001954:	f002 0203 	and.w	r2, r2, #3
 8001958:	0092      	lsls	r2, r2, #2
 800195a:	4093      	lsls	r3, r2
 800195c:	68fa      	ldr	r2, [r7, #12]
 800195e:	4313      	orrs	r3, r2
 8001960:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001962:	492f      	ldr	r1, [pc, #188]	; (8001a20 <HAL_GPIO_Init+0x2b0>)
 8001964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001966:	089b      	lsrs	r3, r3, #2
 8001968:	3302      	adds	r3, #2
 800196a:	68fa      	ldr	r2, [r7, #12]
 800196c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001978:	2b00      	cmp	r3, #0
 800197a:	d006      	beq.n	800198a <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800197c:	4b2c      	ldr	r3, [pc, #176]	; (8001a30 <HAL_GPIO_Init+0x2c0>)
 800197e:	689a      	ldr	r2, [r3, #8]
 8001980:	492b      	ldr	r1, [pc, #172]	; (8001a30 <HAL_GPIO_Init+0x2c0>)
 8001982:	69bb      	ldr	r3, [r7, #24]
 8001984:	4313      	orrs	r3, r2
 8001986:	608b      	str	r3, [r1, #8]
 8001988:	e006      	b.n	8001998 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800198a:	4b29      	ldr	r3, [pc, #164]	; (8001a30 <HAL_GPIO_Init+0x2c0>)
 800198c:	689a      	ldr	r2, [r3, #8]
 800198e:	69bb      	ldr	r3, [r7, #24]
 8001990:	43db      	mvns	r3, r3
 8001992:	4927      	ldr	r1, [pc, #156]	; (8001a30 <HAL_GPIO_Init+0x2c0>)
 8001994:	4013      	ands	r3, r2
 8001996:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d006      	beq.n	80019b2 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80019a4:	4b22      	ldr	r3, [pc, #136]	; (8001a30 <HAL_GPIO_Init+0x2c0>)
 80019a6:	68da      	ldr	r2, [r3, #12]
 80019a8:	4921      	ldr	r1, [pc, #132]	; (8001a30 <HAL_GPIO_Init+0x2c0>)
 80019aa:	69bb      	ldr	r3, [r7, #24]
 80019ac:	4313      	orrs	r3, r2
 80019ae:	60cb      	str	r3, [r1, #12]
 80019b0:	e006      	b.n	80019c0 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80019b2:	4b1f      	ldr	r3, [pc, #124]	; (8001a30 <HAL_GPIO_Init+0x2c0>)
 80019b4:	68da      	ldr	r2, [r3, #12]
 80019b6:	69bb      	ldr	r3, [r7, #24]
 80019b8:	43db      	mvns	r3, r3
 80019ba:	491d      	ldr	r1, [pc, #116]	; (8001a30 <HAL_GPIO_Init+0x2c0>)
 80019bc:	4013      	ands	r3, r2
 80019be:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d006      	beq.n	80019da <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80019cc:	4b18      	ldr	r3, [pc, #96]	; (8001a30 <HAL_GPIO_Init+0x2c0>)
 80019ce:	685a      	ldr	r2, [r3, #4]
 80019d0:	4917      	ldr	r1, [pc, #92]	; (8001a30 <HAL_GPIO_Init+0x2c0>)
 80019d2:	69bb      	ldr	r3, [r7, #24]
 80019d4:	4313      	orrs	r3, r2
 80019d6:	604b      	str	r3, [r1, #4]
 80019d8:	e006      	b.n	80019e8 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80019da:	4b15      	ldr	r3, [pc, #84]	; (8001a30 <HAL_GPIO_Init+0x2c0>)
 80019dc:	685a      	ldr	r2, [r3, #4]
 80019de:	69bb      	ldr	r3, [r7, #24]
 80019e0:	43db      	mvns	r3, r3
 80019e2:	4913      	ldr	r1, [pc, #76]	; (8001a30 <HAL_GPIO_Init+0x2c0>)
 80019e4:	4013      	ands	r3, r2
 80019e6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d01f      	beq.n	8001a34 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80019f4:	4b0e      	ldr	r3, [pc, #56]	; (8001a30 <HAL_GPIO_Init+0x2c0>)
 80019f6:	681a      	ldr	r2, [r3, #0]
 80019f8:	490d      	ldr	r1, [pc, #52]	; (8001a30 <HAL_GPIO_Init+0x2c0>)
 80019fa:	69bb      	ldr	r3, [r7, #24]
 80019fc:	4313      	orrs	r3, r2
 80019fe:	600b      	str	r3, [r1, #0]
 8001a00:	e01f      	b.n	8001a42 <HAL_GPIO_Init+0x2d2>
 8001a02:	bf00      	nop
 8001a04:	10320000 	.word	0x10320000
 8001a08:	10310000 	.word	0x10310000
 8001a0c:	10220000 	.word	0x10220000
 8001a10:	10210000 	.word	0x10210000
 8001a14:	10120000 	.word	0x10120000
 8001a18:	10110000 	.word	0x10110000
 8001a1c:	40021000 	.word	0x40021000
 8001a20:	40010000 	.word	0x40010000
 8001a24:	40010800 	.word	0x40010800
 8001a28:	40010c00 	.word	0x40010c00
 8001a2c:	40011000 	.word	0x40011000
 8001a30:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001a34:	4b0b      	ldr	r3, [pc, #44]	; (8001a64 <HAL_GPIO_Init+0x2f4>)
 8001a36:	681a      	ldr	r2, [r3, #0]
 8001a38:	69bb      	ldr	r3, [r7, #24]
 8001a3a:	43db      	mvns	r3, r3
 8001a3c:	4909      	ldr	r1, [pc, #36]	; (8001a64 <HAL_GPIO_Init+0x2f4>)
 8001a3e:	4013      	ands	r3, r2
 8001a40:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a44:	3301      	adds	r3, #1
 8001a46:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	681a      	ldr	r2, [r3, #0]
 8001a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a4e:	fa22 f303 	lsr.w	r3, r2, r3
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	f47f ae96 	bne.w	8001784 <HAL_GPIO_Init+0x14>
  }
}
 8001a58:	bf00      	nop
 8001a5a:	bf00      	nop
 8001a5c:	372c      	adds	r7, #44	; 0x2c
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bc80      	pop	{r7}
 8001a62:	4770      	bx	lr
 8001a64:	40010400 	.word	0x40010400

08001a68 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	b083      	sub	sp, #12
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
 8001a70:	460b      	mov	r3, r1
 8001a72:	807b      	strh	r3, [r7, #2]
 8001a74:	4613      	mov	r3, r2
 8001a76:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001a78:	787b      	ldrb	r3, [r7, #1]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d003      	beq.n	8001a86 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a7e:	887a      	ldrh	r2, [r7, #2]
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001a84:	e003      	b.n	8001a8e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001a86:	887b      	ldrh	r3, [r7, #2]
 8001a88:	041a      	lsls	r2, r3, #16
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	611a      	str	r2, [r3, #16]
}
 8001a8e:	bf00      	nop
 8001a90:	370c      	adds	r7, #12
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bc80      	pop	{r7}
 8001a96:	4770      	bx	lr

08001a98 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b086      	sub	sp, #24
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d101      	bne.n	8001aaa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	e272      	b.n	8001f90 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f003 0301 	and.w	r3, r3, #1
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	f000 8087 	beq.w	8001bc6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ab8:	4b92      	ldr	r3, [pc, #584]	; (8001d04 <HAL_RCC_OscConfig+0x26c>)
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	f003 030c 	and.w	r3, r3, #12
 8001ac0:	2b04      	cmp	r3, #4
 8001ac2:	d00c      	beq.n	8001ade <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001ac4:	4b8f      	ldr	r3, [pc, #572]	; (8001d04 <HAL_RCC_OscConfig+0x26c>)
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	f003 030c 	and.w	r3, r3, #12
 8001acc:	2b08      	cmp	r3, #8
 8001ace:	d112      	bne.n	8001af6 <HAL_RCC_OscConfig+0x5e>
 8001ad0:	4b8c      	ldr	r3, [pc, #560]	; (8001d04 <HAL_RCC_OscConfig+0x26c>)
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ad8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001adc:	d10b      	bne.n	8001af6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ade:	4b89      	ldr	r3, [pc, #548]	; (8001d04 <HAL_RCC_OscConfig+0x26c>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d06c      	beq.n	8001bc4 <HAL_RCC_OscConfig+0x12c>
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d168      	bne.n	8001bc4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001af2:	2301      	movs	r3, #1
 8001af4:	e24c      	b.n	8001f90 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001afe:	d106      	bne.n	8001b0e <HAL_RCC_OscConfig+0x76>
 8001b00:	4b80      	ldr	r3, [pc, #512]	; (8001d04 <HAL_RCC_OscConfig+0x26c>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4a7f      	ldr	r2, [pc, #508]	; (8001d04 <HAL_RCC_OscConfig+0x26c>)
 8001b06:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b0a:	6013      	str	r3, [r2, #0]
 8001b0c:	e02e      	b.n	8001b6c <HAL_RCC_OscConfig+0xd4>
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d10c      	bne.n	8001b30 <HAL_RCC_OscConfig+0x98>
 8001b16:	4b7b      	ldr	r3, [pc, #492]	; (8001d04 <HAL_RCC_OscConfig+0x26c>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	4a7a      	ldr	r2, [pc, #488]	; (8001d04 <HAL_RCC_OscConfig+0x26c>)
 8001b1c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b20:	6013      	str	r3, [r2, #0]
 8001b22:	4b78      	ldr	r3, [pc, #480]	; (8001d04 <HAL_RCC_OscConfig+0x26c>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4a77      	ldr	r2, [pc, #476]	; (8001d04 <HAL_RCC_OscConfig+0x26c>)
 8001b28:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b2c:	6013      	str	r3, [r2, #0]
 8001b2e:	e01d      	b.n	8001b6c <HAL_RCC_OscConfig+0xd4>
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b38:	d10c      	bne.n	8001b54 <HAL_RCC_OscConfig+0xbc>
 8001b3a:	4b72      	ldr	r3, [pc, #456]	; (8001d04 <HAL_RCC_OscConfig+0x26c>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	4a71      	ldr	r2, [pc, #452]	; (8001d04 <HAL_RCC_OscConfig+0x26c>)
 8001b40:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b44:	6013      	str	r3, [r2, #0]
 8001b46:	4b6f      	ldr	r3, [pc, #444]	; (8001d04 <HAL_RCC_OscConfig+0x26c>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4a6e      	ldr	r2, [pc, #440]	; (8001d04 <HAL_RCC_OscConfig+0x26c>)
 8001b4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b50:	6013      	str	r3, [r2, #0]
 8001b52:	e00b      	b.n	8001b6c <HAL_RCC_OscConfig+0xd4>
 8001b54:	4b6b      	ldr	r3, [pc, #428]	; (8001d04 <HAL_RCC_OscConfig+0x26c>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4a6a      	ldr	r2, [pc, #424]	; (8001d04 <HAL_RCC_OscConfig+0x26c>)
 8001b5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b5e:	6013      	str	r3, [r2, #0]
 8001b60:	4b68      	ldr	r3, [pc, #416]	; (8001d04 <HAL_RCC_OscConfig+0x26c>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4a67      	ldr	r2, [pc, #412]	; (8001d04 <HAL_RCC_OscConfig+0x26c>)
 8001b66:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b6a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d013      	beq.n	8001b9c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b74:	f7ff fce4 	bl	8001540 <HAL_GetTick>
 8001b78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b7a:	e008      	b.n	8001b8e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b7c:	f7ff fce0 	bl	8001540 <HAL_GetTick>
 8001b80:	4602      	mov	r2, r0
 8001b82:	693b      	ldr	r3, [r7, #16]
 8001b84:	1ad3      	subs	r3, r2, r3
 8001b86:	2b64      	cmp	r3, #100	; 0x64
 8001b88:	d901      	bls.n	8001b8e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001b8a:	2303      	movs	r3, #3
 8001b8c:	e200      	b.n	8001f90 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b8e:	4b5d      	ldr	r3, [pc, #372]	; (8001d04 <HAL_RCC_OscConfig+0x26c>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d0f0      	beq.n	8001b7c <HAL_RCC_OscConfig+0xe4>
 8001b9a:	e014      	b.n	8001bc6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b9c:	f7ff fcd0 	bl	8001540 <HAL_GetTick>
 8001ba0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ba2:	e008      	b.n	8001bb6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ba4:	f7ff fccc 	bl	8001540 <HAL_GetTick>
 8001ba8:	4602      	mov	r2, r0
 8001baa:	693b      	ldr	r3, [r7, #16]
 8001bac:	1ad3      	subs	r3, r2, r3
 8001bae:	2b64      	cmp	r3, #100	; 0x64
 8001bb0:	d901      	bls.n	8001bb6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001bb2:	2303      	movs	r3, #3
 8001bb4:	e1ec      	b.n	8001f90 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bb6:	4b53      	ldr	r3, [pc, #332]	; (8001d04 <HAL_RCC_OscConfig+0x26c>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d1f0      	bne.n	8001ba4 <HAL_RCC_OscConfig+0x10c>
 8001bc2:	e000      	b.n	8001bc6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bc4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f003 0302 	and.w	r3, r3, #2
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d063      	beq.n	8001c9a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001bd2:	4b4c      	ldr	r3, [pc, #304]	; (8001d04 <HAL_RCC_OscConfig+0x26c>)
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	f003 030c 	and.w	r3, r3, #12
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d00b      	beq.n	8001bf6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001bde:	4b49      	ldr	r3, [pc, #292]	; (8001d04 <HAL_RCC_OscConfig+0x26c>)
 8001be0:	685b      	ldr	r3, [r3, #4]
 8001be2:	f003 030c 	and.w	r3, r3, #12
 8001be6:	2b08      	cmp	r3, #8
 8001be8:	d11c      	bne.n	8001c24 <HAL_RCC_OscConfig+0x18c>
 8001bea:	4b46      	ldr	r3, [pc, #280]	; (8001d04 <HAL_RCC_OscConfig+0x26c>)
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d116      	bne.n	8001c24 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bf6:	4b43      	ldr	r3, [pc, #268]	; (8001d04 <HAL_RCC_OscConfig+0x26c>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f003 0302 	and.w	r3, r3, #2
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d005      	beq.n	8001c0e <HAL_RCC_OscConfig+0x176>
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	691b      	ldr	r3, [r3, #16]
 8001c06:	2b01      	cmp	r3, #1
 8001c08:	d001      	beq.n	8001c0e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	e1c0      	b.n	8001f90 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c0e:	4b3d      	ldr	r3, [pc, #244]	; (8001d04 <HAL_RCC_OscConfig+0x26c>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	695b      	ldr	r3, [r3, #20]
 8001c1a:	00db      	lsls	r3, r3, #3
 8001c1c:	4939      	ldr	r1, [pc, #228]	; (8001d04 <HAL_RCC_OscConfig+0x26c>)
 8001c1e:	4313      	orrs	r3, r2
 8001c20:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c22:	e03a      	b.n	8001c9a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	691b      	ldr	r3, [r3, #16]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d020      	beq.n	8001c6e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c2c:	4b36      	ldr	r3, [pc, #216]	; (8001d08 <HAL_RCC_OscConfig+0x270>)
 8001c2e:	2201      	movs	r2, #1
 8001c30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c32:	f7ff fc85 	bl	8001540 <HAL_GetTick>
 8001c36:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c38:	e008      	b.n	8001c4c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c3a:	f7ff fc81 	bl	8001540 <HAL_GetTick>
 8001c3e:	4602      	mov	r2, r0
 8001c40:	693b      	ldr	r3, [r7, #16]
 8001c42:	1ad3      	subs	r3, r2, r3
 8001c44:	2b02      	cmp	r3, #2
 8001c46:	d901      	bls.n	8001c4c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001c48:	2303      	movs	r3, #3
 8001c4a:	e1a1      	b.n	8001f90 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c4c:	4b2d      	ldr	r3, [pc, #180]	; (8001d04 <HAL_RCC_OscConfig+0x26c>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f003 0302 	and.w	r3, r3, #2
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d0f0      	beq.n	8001c3a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c58:	4b2a      	ldr	r3, [pc, #168]	; (8001d04 <HAL_RCC_OscConfig+0x26c>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	695b      	ldr	r3, [r3, #20]
 8001c64:	00db      	lsls	r3, r3, #3
 8001c66:	4927      	ldr	r1, [pc, #156]	; (8001d04 <HAL_RCC_OscConfig+0x26c>)
 8001c68:	4313      	orrs	r3, r2
 8001c6a:	600b      	str	r3, [r1, #0]
 8001c6c:	e015      	b.n	8001c9a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c6e:	4b26      	ldr	r3, [pc, #152]	; (8001d08 <HAL_RCC_OscConfig+0x270>)
 8001c70:	2200      	movs	r2, #0
 8001c72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c74:	f7ff fc64 	bl	8001540 <HAL_GetTick>
 8001c78:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c7a:	e008      	b.n	8001c8e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c7c:	f7ff fc60 	bl	8001540 <HAL_GetTick>
 8001c80:	4602      	mov	r2, r0
 8001c82:	693b      	ldr	r3, [r7, #16]
 8001c84:	1ad3      	subs	r3, r2, r3
 8001c86:	2b02      	cmp	r3, #2
 8001c88:	d901      	bls.n	8001c8e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001c8a:	2303      	movs	r3, #3
 8001c8c:	e180      	b.n	8001f90 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c8e:	4b1d      	ldr	r3, [pc, #116]	; (8001d04 <HAL_RCC_OscConfig+0x26c>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f003 0302 	and.w	r3, r3, #2
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d1f0      	bne.n	8001c7c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f003 0308 	and.w	r3, r3, #8
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d03a      	beq.n	8001d1c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	699b      	ldr	r3, [r3, #24]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d019      	beq.n	8001ce2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001cae:	4b17      	ldr	r3, [pc, #92]	; (8001d0c <HAL_RCC_OscConfig+0x274>)
 8001cb0:	2201      	movs	r2, #1
 8001cb2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cb4:	f7ff fc44 	bl	8001540 <HAL_GetTick>
 8001cb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cba:	e008      	b.n	8001cce <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cbc:	f7ff fc40 	bl	8001540 <HAL_GetTick>
 8001cc0:	4602      	mov	r2, r0
 8001cc2:	693b      	ldr	r3, [r7, #16]
 8001cc4:	1ad3      	subs	r3, r2, r3
 8001cc6:	2b02      	cmp	r3, #2
 8001cc8:	d901      	bls.n	8001cce <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001cca:	2303      	movs	r3, #3
 8001ccc:	e160      	b.n	8001f90 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cce:	4b0d      	ldr	r3, [pc, #52]	; (8001d04 <HAL_RCC_OscConfig+0x26c>)
 8001cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cd2:	f003 0302 	and.w	r3, r3, #2
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d0f0      	beq.n	8001cbc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001cda:	2001      	movs	r0, #1
 8001cdc:	f000 fa9c 	bl	8002218 <RCC_Delay>
 8001ce0:	e01c      	b.n	8001d1c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ce2:	4b0a      	ldr	r3, [pc, #40]	; (8001d0c <HAL_RCC_OscConfig+0x274>)
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ce8:	f7ff fc2a 	bl	8001540 <HAL_GetTick>
 8001cec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cee:	e00f      	b.n	8001d10 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cf0:	f7ff fc26 	bl	8001540 <HAL_GetTick>
 8001cf4:	4602      	mov	r2, r0
 8001cf6:	693b      	ldr	r3, [r7, #16]
 8001cf8:	1ad3      	subs	r3, r2, r3
 8001cfa:	2b02      	cmp	r3, #2
 8001cfc:	d908      	bls.n	8001d10 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001cfe:	2303      	movs	r3, #3
 8001d00:	e146      	b.n	8001f90 <HAL_RCC_OscConfig+0x4f8>
 8001d02:	bf00      	nop
 8001d04:	40021000 	.word	0x40021000
 8001d08:	42420000 	.word	0x42420000
 8001d0c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d10:	4b92      	ldr	r3, [pc, #584]	; (8001f5c <HAL_RCC_OscConfig+0x4c4>)
 8001d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d14:	f003 0302 	and.w	r3, r3, #2
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d1e9      	bne.n	8001cf0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f003 0304 	and.w	r3, r3, #4
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	f000 80a6 	beq.w	8001e76 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d2e:	4b8b      	ldr	r3, [pc, #556]	; (8001f5c <HAL_RCC_OscConfig+0x4c4>)
 8001d30:	69db      	ldr	r3, [r3, #28]
 8001d32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d10d      	bne.n	8001d56 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d3a:	4b88      	ldr	r3, [pc, #544]	; (8001f5c <HAL_RCC_OscConfig+0x4c4>)
 8001d3c:	69db      	ldr	r3, [r3, #28]
 8001d3e:	4a87      	ldr	r2, [pc, #540]	; (8001f5c <HAL_RCC_OscConfig+0x4c4>)
 8001d40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d44:	61d3      	str	r3, [r2, #28]
 8001d46:	4b85      	ldr	r3, [pc, #532]	; (8001f5c <HAL_RCC_OscConfig+0x4c4>)
 8001d48:	69db      	ldr	r3, [r3, #28]
 8001d4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d4e:	60bb      	str	r3, [r7, #8]
 8001d50:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d52:	2301      	movs	r3, #1
 8001d54:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d56:	4b82      	ldr	r3, [pc, #520]	; (8001f60 <HAL_RCC_OscConfig+0x4c8>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d118      	bne.n	8001d94 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d62:	4b7f      	ldr	r3, [pc, #508]	; (8001f60 <HAL_RCC_OscConfig+0x4c8>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4a7e      	ldr	r2, [pc, #504]	; (8001f60 <HAL_RCC_OscConfig+0x4c8>)
 8001d68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d6c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d6e:	f7ff fbe7 	bl	8001540 <HAL_GetTick>
 8001d72:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d74:	e008      	b.n	8001d88 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d76:	f7ff fbe3 	bl	8001540 <HAL_GetTick>
 8001d7a:	4602      	mov	r2, r0
 8001d7c:	693b      	ldr	r3, [r7, #16]
 8001d7e:	1ad3      	subs	r3, r2, r3
 8001d80:	2b64      	cmp	r3, #100	; 0x64
 8001d82:	d901      	bls.n	8001d88 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001d84:	2303      	movs	r3, #3
 8001d86:	e103      	b.n	8001f90 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d88:	4b75      	ldr	r3, [pc, #468]	; (8001f60 <HAL_RCC_OscConfig+0x4c8>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d0f0      	beq.n	8001d76 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	68db      	ldr	r3, [r3, #12]
 8001d98:	2b01      	cmp	r3, #1
 8001d9a:	d106      	bne.n	8001daa <HAL_RCC_OscConfig+0x312>
 8001d9c:	4b6f      	ldr	r3, [pc, #444]	; (8001f5c <HAL_RCC_OscConfig+0x4c4>)
 8001d9e:	6a1b      	ldr	r3, [r3, #32]
 8001da0:	4a6e      	ldr	r2, [pc, #440]	; (8001f5c <HAL_RCC_OscConfig+0x4c4>)
 8001da2:	f043 0301 	orr.w	r3, r3, #1
 8001da6:	6213      	str	r3, [r2, #32]
 8001da8:	e02d      	b.n	8001e06 <HAL_RCC_OscConfig+0x36e>
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	68db      	ldr	r3, [r3, #12]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d10c      	bne.n	8001dcc <HAL_RCC_OscConfig+0x334>
 8001db2:	4b6a      	ldr	r3, [pc, #424]	; (8001f5c <HAL_RCC_OscConfig+0x4c4>)
 8001db4:	6a1b      	ldr	r3, [r3, #32]
 8001db6:	4a69      	ldr	r2, [pc, #420]	; (8001f5c <HAL_RCC_OscConfig+0x4c4>)
 8001db8:	f023 0301 	bic.w	r3, r3, #1
 8001dbc:	6213      	str	r3, [r2, #32]
 8001dbe:	4b67      	ldr	r3, [pc, #412]	; (8001f5c <HAL_RCC_OscConfig+0x4c4>)
 8001dc0:	6a1b      	ldr	r3, [r3, #32]
 8001dc2:	4a66      	ldr	r2, [pc, #408]	; (8001f5c <HAL_RCC_OscConfig+0x4c4>)
 8001dc4:	f023 0304 	bic.w	r3, r3, #4
 8001dc8:	6213      	str	r3, [r2, #32]
 8001dca:	e01c      	b.n	8001e06 <HAL_RCC_OscConfig+0x36e>
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	68db      	ldr	r3, [r3, #12]
 8001dd0:	2b05      	cmp	r3, #5
 8001dd2:	d10c      	bne.n	8001dee <HAL_RCC_OscConfig+0x356>
 8001dd4:	4b61      	ldr	r3, [pc, #388]	; (8001f5c <HAL_RCC_OscConfig+0x4c4>)
 8001dd6:	6a1b      	ldr	r3, [r3, #32]
 8001dd8:	4a60      	ldr	r2, [pc, #384]	; (8001f5c <HAL_RCC_OscConfig+0x4c4>)
 8001dda:	f043 0304 	orr.w	r3, r3, #4
 8001dde:	6213      	str	r3, [r2, #32]
 8001de0:	4b5e      	ldr	r3, [pc, #376]	; (8001f5c <HAL_RCC_OscConfig+0x4c4>)
 8001de2:	6a1b      	ldr	r3, [r3, #32]
 8001de4:	4a5d      	ldr	r2, [pc, #372]	; (8001f5c <HAL_RCC_OscConfig+0x4c4>)
 8001de6:	f043 0301 	orr.w	r3, r3, #1
 8001dea:	6213      	str	r3, [r2, #32]
 8001dec:	e00b      	b.n	8001e06 <HAL_RCC_OscConfig+0x36e>
 8001dee:	4b5b      	ldr	r3, [pc, #364]	; (8001f5c <HAL_RCC_OscConfig+0x4c4>)
 8001df0:	6a1b      	ldr	r3, [r3, #32]
 8001df2:	4a5a      	ldr	r2, [pc, #360]	; (8001f5c <HAL_RCC_OscConfig+0x4c4>)
 8001df4:	f023 0301 	bic.w	r3, r3, #1
 8001df8:	6213      	str	r3, [r2, #32]
 8001dfa:	4b58      	ldr	r3, [pc, #352]	; (8001f5c <HAL_RCC_OscConfig+0x4c4>)
 8001dfc:	6a1b      	ldr	r3, [r3, #32]
 8001dfe:	4a57      	ldr	r2, [pc, #348]	; (8001f5c <HAL_RCC_OscConfig+0x4c4>)
 8001e00:	f023 0304 	bic.w	r3, r3, #4
 8001e04:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	68db      	ldr	r3, [r3, #12]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d015      	beq.n	8001e3a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e0e:	f7ff fb97 	bl	8001540 <HAL_GetTick>
 8001e12:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e14:	e00a      	b.n	8001e2c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e16:	f7ff fb93 	bl	8001540 <HAL_GetTick>
 8001e1a:	4602      	mov	r2, r0
 8001e1c:	693b      	ldr	r3, [r7, #16]
 8001e1e:	1ad3      	subs	r3, r2, r3
 8001e20:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e24:	4293      	cmp	r3, r2
 8001e26:	d901      	bls.n	8001e2c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001e28:	2303      	movs	r3, #3
 8001e2a:	e0b1      	b.n	8001f90 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e2c:	4b4b      	ldr	r3, [pc, #300]	; (8001f5c <HAL_RCC_OscConfig+0x4c4>)
 8001e2e:	6a1b      	ldr	r3, [r3, #32]
 8001e30:	f003 0302 	and.w	r3, r3, #2
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d0ee      	beq.n	8001e16 <HAL_RCC_OscConfig+0x37e>
 8001e38:	e014      	b.n	8001e64 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e3a:	f7ff fb81 	bl	8001540 <HAL_GetTick>
 8001e3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e40:	e00a      	b.n	8001e58 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e42:	f7ff fb7d 	bl	8001540 <HAL_GetTick>
 8001e46:	4602      	mov	r2, r0
 8001e48:	693b      	ldr	r3, [r7, #16]
 8001e4a:	1ad3      	subs	r3, r2, r3
 8001e4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e50:	4293      	cmp	r3, r2
 8001e52:	d901      	bls.n	8001e58 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001e54:	2303      	movs	r3, #3
 8001e56:	e09b      	b.n	8001f90 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e58:	4b40      	ldr	r3, [pc, #256]	; (8001f5c <HAL_RCC_OscConfig+0x4c4>)
 8001e5a:	6a1b      	ldr	r3, [r3, #32]
 8001e5c:	f003 0302 	and.w	r3, r3, #2
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d1ee      	bne.n	8001e42 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001e64:	7dfb      	ldrb	r3, [r7, #23]
 8001e66:	2b01      	cmp	r3, #1
 8001e68:	d105      	bne.n	8001e76 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e6a:	4b3c      	ldr	r3, [pc, #240]	; (8001f5c <HAL_RCC_OscConfig+0x4c4>)
 8001e6c:	69db      	ldr	r3, [r3, #28]
 8001e6e:	4a3b      	ldr	r2, [pc, #236]	; (8001f5c <HAL_RCC_OscConfig+0x4c4>)
 8001e70:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e74:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	69db      	ldr	r3, [r3, #28]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	f000 8087 	beq.w	8001f8e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e80:	4b36      	ldr	r3, [pc, #216]	; (8001f5c <HAL_RCC_OscConfig+0x4c4>)
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	f003 030c 	and.w	r3, r3, #12
 8001e88:	2b08      	cmp	r3, #8
 8001e8a:	d061      	beq.n	8001f50 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	69db      	ldr	r3, [r3, #28]
 8001e90:	2b02      	cmp	r3, #2
 8001e92:	d146      	bne.n	8001f22 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e94:	4b33      	ldr	r3, [pc, #204]	; (8001f64 <HAL_RCC_OscConfig+0x4cc>)
 8001e96:	2200      	movs	r2, #0
 8001e98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e9a:	f7ff fb51 	bl	8001540 <HAL_GetTick>
 8001e9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ea0:	e008      	b.n	8001eb4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ea2:	f7ff fb4d 	bl	8001540 <HAL_GetTick>
 8001ea6:	4602      	mov	r2, r0
 8001ea8:	693b      	ldr	r3, [r7, #16]
 8001eaa:	1ad3      	subs	r3, r2, r3
 8001eac:	2b02      	cmp	r3, #2
 8001eae:	d901      	bls.n	8001eb4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001eb0:	2303      	movs	r3, #3
 8001eb2:	e06d      	b.n	8001f90 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001eb4:	4b29      	ldr	r3, [pc, #164]	; (8001f5c <HAL_RCC_OscConfig+0x4c4>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d1f0      	bne.n	8001ea2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6a1b      	ldr	r3, [r3, #32]
 8001ec4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ec8:	d108      	bne.n	8001edc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001eca:	4b24      	ldr	r3, [pc, #144]	; (8001f5c <HAL_RCC_OscConfig+0x4c4>)
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	689b      	ldr	r3, [r3, #8]
 8001ed6:	4921      	ldr	r1, [pc, #132]	; (8001f5c <HAL_RCC_OscConfig+0x4c4>)
 8001ed8:	4313      	orrs	r3, r2
 8001eda:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001edc:	4b1f      	ldr	r3, [pc, #124]	; (8001f5c <HAL_RCC_OscConfig+0x4c4>)
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6a19      	ldr	r1, [r3, #32]
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eec:	430b      	orrs	r3, r1
 8001eee:	491b      	ldr	r1, [pc, #108]	; (8001f5c <HAL_RCC_OscConfig+0x4c4>)
 8001ef0:	4313      	orrs	r3, r2
 8001ef2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ef4:	4b1b      	ldr	r3, [pc, #108]	; (8001f64 <HAL_RCC_OscConfig+0x4cc>)
 8001ef6:	2201      	movs	r2, #1
 8001ef8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001efa:	f7ff fb21 	bl	8001540 <HAL_GetTick>
 8001efe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f00:	e008      	b.n	8001f14 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f02:	f7ff fb1d 	bl	8001540 <HAL_GetTick>
 8001f06:	4602      	mov	r2, r0
 8001f08:	693b      	ldr	r3, [r7, #16]
 8001f0a:	1ad3      	subs	r3, r2, r3
 8001f0c:	2b02      	cmp	r3, #2
 8001f0e:	d901      	bls.n	8001f14 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001f10:	2303      	movs	r3, #3
 8001f12:	e03d      	b.n	8001f90 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f14:	4b11      	ldr	r3, [pc, #68]	; (8001f5c <HAL_RCC_OscConfig+0x4c4>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d0f0      	beq.n	8001f02 <HAL_RCC_OscConfig+0x46a>
 8001f20:	e035      	b.n	8001f8e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f22:	4b10      	ldr	r3, [pc, #64]	; (8001f64 <HAL_RCC_OscConfig+0x4cc>)
 8001f24:	2200      	movs	r2, #0
 8001f26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f28:	f7ff fb0a 	bl	8001540 <HAL_GetTick>
 8001f2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f2e:	e008      	b.n	8001f42 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f30:	f7ff fb06 	bl	8001540 <HAL_GetTick>
 8001f34:	4602      	mov	r2, r0
 8001f36:	693b      	ldr	r3, [r7, #16]
 8001f38:	1ad3      	subs	r3, r2, r3
 8001f3a:	2b02      	cmp	r3, #2
 8001f3c:	d901      	bls.n	8001f42 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001f3e:	2303      	movs	r3, #3
 8001f40:	e026      	b.n	8001f90 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f42:	4b06      	ldr	r3, [pc, #24]	; (8001f5c <HAL_RCC_OscConfig+0x4c4>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d1f0      	bne.n	8001f30 <HAL_RCC_OscConfig+0x498>
 8001f4e:	e01e      	b.n	8001f8e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	69db      	ldr	r3, [r3, #28]
 8001f54:	2b01      	cmp	r3, #1
 8001f56:	d107      	bne.n	8001f68 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001f58:	2301      	movs	r3, #1
 8001f5a:	e019      	b.n	8001f90 <HAL_RCC_OscConfig+0x4f8>
 8001f5c:	40021000 	.word	0x40021000
 8001f60:	40007000 	.word	0x40007000
 8001f64:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001f68:	4b0b      	ldr	r3, [pc, #44]	; (8001f98 <HAL_RCC_OscConfig+0x500>)
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6a1b      	ldr	r3, [r3, #32]
 8001f78:	429a      	cmp	r2, r3
 8001f7a:	d106      	bne.n	8001f8a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f86:	429a      	cmp	r2, r3
 8001f88:	d001      	beq.n	8001f8e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	e000      	b.n	8001f90 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001f8e:	2300      	movs	r3, #0
}
 8001f90:	4618      	mov	r0, r3
 8001f92:	3718      	adds	r7, #24
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bd80      	pop	{r7, pc}
 8001f98:	40021000 	.word	0x40021000

08001f9c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b084      	sub	sp, #16
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
 8001fa4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d101      	bne.n	8001fb0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001fac:	2301      	movs	r3, #1
 8001fae:	e0d0      	b.n	8002152 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001fb0:	4b6a      	ldr	r3, [pc, #424]	; (800215c <HAL_RCC_ClockConfig+0x1c0>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f003 0307 	and.w	r3, r3, #7
 8001fb8:	683a      	ldr	r2, [r7, #0]
 8001fba:	429a      	cmp	r2, r3
 8001fbc:	d910      	bls.n	8001fe0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fbe:	4b67      	ldr	r3, [pc, #412]	; (800215c <HAL_RCC_ClockConfig+0x1c0>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f023 0207 	bic.w	r2, r3, #7
 8001fc6:	4965      	ldr	r1, [pc, #404]	; (800215c <HAL_RCC_ClockConfig+0x1c0>)
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	4313      	orrs	r3, r2
 8001fcc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fce:	4b63      	ldr	r3, [pc, #396]	; (800215c <HAL_RCC_ClockConfig+0x1c0>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f003 0307 	and.w	r3, r3, #7
 8001fd6:	683a      	ldr	r2, [r7, #0]
 8001fd8:	429a      	cmp	r2, r3
 8001fda:	d001      	beq.n	8001fe0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001fdc:	2301      	movs	r3, #1
 8001fde:	e0b8      	b.n	8002152 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f003 0302 	and.w	r3, r3, #2
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d020      	beq.n	800202e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f003 0304 	and.w	r3, r3, #4
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d005      	beq.n	8002004 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ff8:	4b59      	ldr	r3, [pc, #356]	; (8002160 <HAL_RCC_ClockConfig+0x1c4>)
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	4a58      	ldr	r2, [pc, #352]	; (8002160 <HAL_RCC_ClockConfig+0x1c4>)
 8001ffe:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002002:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f003 0308 	and.w	r3, r3, #8
 800200c:	2b00      	cmp	r3, #0
 800200e:	d005      	beq.n	800201c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002010:	4b53      	ldr	r3, [pc, #332]	; (8002160 <HAL_RCC_ClockConfig+0x1c4>)
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	4a52      	ldr	r2, [pc, #328]	; (8002160 <HAL_RCC_ClockConfig+0x1c4>)
 8002016:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800201a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800201c:	4b50      	ldr	r3, [pc, #320]	; (8002160 <HAL_RCC_ClockConfig+0x1c4>)
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	689b      	ldr	r3, [r3, #8]
 8002028:	494d      	ldr	r1, [pc, #308]	; (8002160 <HAL_RCC_ClockConfig+0x1c4>)
 800202a:	4313      	orrs	r3, r2
 800202c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f003 0301 	and.w	r3, r3, #1
 8002036:	2b00      	cmp	r3, #0
 8002038:	d040      	beq.n	80020bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	685b      	ldr	r3, [r3, #4]
 800203e:	2b01      	cmp	r3, #1
 8002040:	d107      	bne.n	8002052 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002042:	4b47      	ldr	r3, [pc, #284]	; (8002160 <HAL_RCC_ClockConfig+0x1c4>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800204a:	2b00      	cmp	r3, #0
 800204c:	d115      	bne.n	800207a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800204e:	2301      	movs	r3, #1
 8002050:	e07f      	b.n	8002152 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	2b02      	cmp	r3, #2
 8002058:	d107      	bne.n	800206a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800205a:	4b41      	ldr	r3, [pc, #260]	; (8002160 <HAL_RCC_ClockConfig+0x1c4>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002062:	2b00      	cmp	r3, #0
 8002064:	d109      	bne.n	800207a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002066:	2301      	movs	r3, #1
 8002068:	e073      	b.n	8002152 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800206a:	4b3d      	ldr	r3, [pc, #244]	; (8002160 <HAL_RCC_ClockConfig+0x1c4>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f003 0302 	and.w	r3, r3, #2
 8002072:	2b00      	cmp	r3, #0
 8002074:	d101      	bne.n	800207a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002076:	2301      	movs	r3, #1
 8002078:	e06b      	b.n	8002152 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800207a:	4b39      	ldr	r3, [pc, #228]	; (8002160 <HAL_RCC_ClockConfig+0x1c4>)
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	f023 0203 	bic.w	r2, r3, #3
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	4936      	ldr	r1, [pc, #216]	; (8002160 <HAL_RCC_ClockConfig+0x1c4>)
 8002088:	4313      	orrs	r3, r2
 800208a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800208c:	f7ff fa58 	bl	8001540 <HAL_GetTick>
 8002090:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002092:	e00a      	b.n	80020aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002094:	f7ff fa54 	bl	8001540 <HAL_GetTick>
 8002098:	4602      	mov	r2, r0
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	1ad3      	subs	r3, r2, r3
 800209e:	f241 3288 	movw	r2, #5000	; 0x1388
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d901      	bls.n	80020aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80020a6:	2303      	movs	r3, #3
 80020a8:	e053      	b.n	8002152 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020aa:	4b2d      	ldr	r3, [pc, #180]	; (8002160 <HAL_RCC_ClockConfig+0x1c4>)
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	f003 020c 	and.w	r2, r3, #12
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	009b      	lsls	r3, r3, #2
 80020b8:	429a      	cmp	r2, r3
 80020ba:	d1eb      	bne.n	8002094 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80020bc:	4b27      	ldr	r3, [pc, #156]	; (800215c <HAL_RCC_ClockConfig+0x1c0>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f003 0307 	and.w	r3, r3, #7
 80020c4:	683a      	ldr	r2, [r7, #0]
 80020c6:	429a      	cmp	r2, r3
 80020c8:	d210      	bcs.n	80020ec <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020ca:	4b24      	ldr	r3, [pc, #144]	; (800215c <HAL_RCC_ClockConfig+0x1c0>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f023 0207 	bic.w	r2, r3, #7
 80020d2:	4922      	ldr	r1, [pc, #136]	; (800215c <HAL_RCC_ClockConfig+0x1c0>)
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	4313      	orrs	r3, r2
 80020d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020da:	4b20      	ldr	r3, [pc, #128]	; (800215c <HAL_RCC_ClockConfig+0x1c0>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f003 0307 	and.w	r3, r3, #7
 80020e2:	683a      	ldr	r2, [r7, #0]
 80020e4:	429a      	cmp	r2, r3
 80020e6:	d001      	beq.n	80020ec <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80020e8:	2301      	movs	r3, #1
 80020ea:	e032      	b.n	8002152 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f003 0304 	and.w	r3, r3, #4
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d008      	beq.n	800210a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80020f8:	4b19      	ldr	r3, [pc, #100]	; (8002160 <HAL_RCC_ClockConfig+0x1c4>)
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	68db      	ldr	r3, [r3, #12]
 8002104:	4916      	ldr	r1, [pc, #88]	; (8002160 <HAL_RCC_ClockConfig+0x1c4>)
 8002106:	4313      	orrs	r3, r2
 8002108:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f003 0308 	and.w	r3, r3, #8
 8002112:	2b00      	cmp	r3, #0
 8002114:	d009      	beq.n	800212a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002116:	4b12      	ldr	r3, [pc, #72]	; (8002160 <HAL_RCC_ClockConfig+0x1c4>)
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	691b      	ldr	r3, [r3, #16]
 8002122:	00db      	lsls	r3, r3, #3
 8002124:	490e      	ldr	r1, [pc, #56]	; (8002160 <HAL_RCC_ClockConfig+0x1c4>)
 8002126:	4313      	orrs	r3, r2
 8002128:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800212a:	f000 f821 	bl	8002170 <HAL_RCC_GetSysClockFreq>
 800212e:	4602      	mov	r2, r0
 8002130:	4b0b      	ldr	r3, [pc, #44]	; (8002160 <HAL_RCC_ClockConfig+0x1c4>)
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	091b      	lsrs	r3, r3, #4
 8002136:	f003 030f 	and.w	r3, r3, #15
 800213a:	490a      	ldr	r1, [pc, #40]	; (8002164 <HAL_RCC_ClockConfig+0x1c8>)
 800213c:	5ccb      	ldrb	r3, [r1, r3]
 800213e:	fa22 f303 	lsr.w	r3, r2, r3
 8002142:	4a09      	ldr	r2, [pc, #36]	; (8002168 <HAL_RCC_ClockConfig+0x1cc>)
 8002144:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002146:	4b09      	ldr	r3, [pc, #36]	; (800216c <HAL_RCC_ClockConfig+0x1d0>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4618      	mov	r0, r3
 800214c:	f7ff f9b6 	bl	80014bc <HAL_InitTick>

  return HAL_OK;
 8002150:	2300      	movs	r3, #0
}
 8002152:	4618      	mov	r0, r3
 8002154:	3710      	adds	r7, #16
 8002156:	46bd      	mov	sp, r7
 8002158:	bd80      	pop	{r7, pc}
 800215a:	bf00      	nop
 800215c:	40022000 	.word	0x40022000
 8002160:	40021000 	.word	0x40021000
 8002164:	08002a94 	.word	0x08002a94
 8002168:	2000000c 	.word	0x2000000c
 800216c:	20000010 	.word	0x20000010

08002170 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002170:	b480      	push	{r7}
 8002172:	b087      	sub	sp, #28
 8002174:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002176:	2300      	movs	r3, #0
 8002178:	60fb      	str	r3, [r7, #12]
 800217a:	2300      	movs	r3, #0
 800217c:	60bb      	str	r3, [r7, #8]
 800217e:	2300      	movs	r3, #0
 8002180:	617b      	str	r3, [r7, #20]
 8002182:	2300      	movs	r3, #0
 8002184:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002186:	2300      	movs	r3, #0
 8002188:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800218a:	4b1e      	ldr	r3, [pc, #120]	; (8002204 <HAL_RCC_GetSysClockFreq+0x94>)
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	f003 030c 	and.w	r3, r3, #12
 8002196:	2b04      	cmp	r3, #4
 8002198:	d002      	beq.n	80021a0 <HAL_RCC_GetSysClockFreq+0x30>
 800219a:	2b08      	cmp	r3, #8
 800219c:	d003      	beq.n	80021a6 <HAL_RCC_GetSysClockFreq+0x36>
 800219e:	e027      	b.n	80021f0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80021a0:	4b19      	ldr	r3, [pc, #100]	; (8002208 <HAL_RCC_GetSysClockFreq+0x98>)
 80021a2:	613b      	str	r3, [r7, #16]
      break;
 80021a4:	e027      	b.n	80021f6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	0c9b      	lsrs	r3, r3, #18
 80021aa:	f003 030f 	and.w	r3, r3, #15
 80021ae:	4a17      	ldr	r2, [pc, #92]	; (800220c <HAL_RCC_GetSysClockFreq+0x9c>)
 80021b0:	5cd3      	ldrb	r3, [r2, r3]
 80021b2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d010      	beq.n	80021e0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80021be:	4b11      	ldr	r3, [pc, #68]	; (8002204 <HAL_RCC_GetSysClockFreq+0x94>)
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	0c5b      	lsrs	r3, r3, #17
 80021c4:	f003 0301 	and.w	r3, r3, #1
 80021c8:	4a11      	ldr	r2, [pc, #68]	; (8002210 <HAL_RCC_GetSysClockFreq+0xa0>)
 80021ca:	5cd3      	ldrb	r3, [r2, r3]
 80021cc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	4a0d      	ldr	r2, [pc, #52]	; (8002208 <HAL_RCC_GetSysClockFreq+0x98>)
 80021d2:	fb03 f202 	mul.w	r2, r3, r2
 80021d6:	68bb      	ldr	r3, [r7, #8]
 80021d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80021dc:	617b      	str	r3, [r7, #20]
 80021de:	e004      	b.n	80021ea <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	4a0c      	ldr	r2, [pc, #48]	; (8002214 <HAL_RCC_GetSysClockFreq+0xa4>)
 80021e4:	fb02 f303 	mul.w	r3, r2, r3
 80021e8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80021ea:	697b      	ldr	r3, [r7, #20]
 80021ec:	613b      	str	r3, [r7, #16]
      break;
 80021ee:	e002      	b.n	80021f6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80021f0:	4b05      	ldr	r3, [pc, #20]	; (8002208 <HAL_RCC_GetSysClockFreq+0x98>)
 80021f2:	613b      	str	r3, [r7, #16]
      break;
 80021f4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80021f6:	693b      	ldr	r3, [r7, #16]
}
 80021f8:	4618      	mov	r0, r3
 80021fa:	371c      	adds	r7, #28
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bc80      	pop	{r7}
 8002200:	4770      	bx	lr
 8002202:	bf00      	nop
 8002204:	40021000 	.word	0x40021000
 8002208:	007a1200 	.word	0x007a1200
 800220c:	08002aa4 	.word	0x08002aa4
 8002210:	08002ab4 	.word	0x08002ab4
 8002214:	003d0900 	.word	0x003d0900

08002218 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002218:	b480      	push	{r7}
 800221a:	b085      	sub	sp, #20
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002220:	4b0a      	ldr	r3, [pc, #40]	; (800224c <RCC_Delay+0x34>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4a0a      	ldr	r2, [pc, #40]	; (8002250 <RCC_Delay+0x38>)
 8002226:	fba2 2303 	umull	r2, r3, r2, r3
 800222a:	0a5b      	lsrs	r3, r3, #9
 800222c:	687a      	ldr	r2, [r7, #4]
 800222e:	fb02 f303 	mul.w	r3, r2, r3
 8002232:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002234:	bf00      	nop
  }
  while (Delay --);
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	1e5a      	subs	r2, r3, #1
 800223a:	60fa      	str	r2, [r7, #12]
 800223c:	2b00      	cmp	r3, #0
 800223e:	d1f9      	bne.n	8002234 <RCC_Delay+0x1c>
}
 8002240:	bf00      	nop
 8002242:	bf00      	nop
 8002244:	3714      	adds	r7, #20
 8002246:	46bd      	mov	sp, r7
 8002248:	bc80      	pop	{r7}
 800224a:	4770      	bx	lr
 800224c:	2000000c 	.word	0x2000000c
 8002250:	10624dd3 	.word	0x10624dd3

08002254 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b082      	sub	sp, #8
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2b00      	cmp	r3, #0
 8002260:	d101      	bne.n	8002266 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002262:	2301      	movs	r3, #1
 8002264:	e041      	b.n	80022ea <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800226c:	b2db      	uxtb	r3, r3
 800226e:	2b00      	cmp	r3, #0
 8002270:	d106      	bne.n	8002280 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	2200      	movs	r2, #0
 8002276:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800227a:	6878      	ldr	r0, [r7, #4]
 800227c:	f7fe fdfa 	bl	8000e74 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2202      	movs	r2, #2
 8002284:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681a      	ldr	r2, [r3, #0]
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	3304      	adds	r3, #4
 8002290:	4619      	mov	r1, r3
 8002292:	4610      	mov	r0, r2
 8002294:	f000 fa6e 	bl	8002774 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2201      	movs	r2, #1
 800229c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2201      	movs	r2, #1
 80022a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2201      	movs	r2, #1
 80022ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2201      	movs	r2, #1
 80022b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2201      	movs	r2, #1
 80022bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2201      	movs	r2, #1
 80022c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2201      	movs	r2, #1
 80022cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2201      	movs	r2, #1
 80022d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2201      	movs	r2, #1
 80022dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2201      	movs	r2, #1
 80022e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80022e8:	2300      	movs	r3, #0
}
 80022ea:	4618      	mov	r0, r3
 80022ec:	3708      	adds	r7, #8
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}
	...

080022f4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80022f4:	b480      	push	{r7}
 80022f6:	b085      	sub	sp, #20
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002302:	b2db      	uxtb	r3, r3
 8002304:	2b01      	cmp	r3, #1
 8002306:	d001      	beq.n	800230c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002308:	2301      	movs	r3, #1
 800230a:	e035      	b.n	8002378 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2202      	movs	r2, #2
 8002310:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	68da      	ldr	r2, [r3, #12]
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f042 0201 	orr.w	r2, r2, #1
 8002322:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4a16      	ldr	r2, [pc, #88]	; (8002384 <HAL_TIM_Base_Start_IT+0x90>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d009      	beq.n	8002342 <HAL_TIM_Base_Start_IT+0x4e>
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002336:	d004      	beq.n	8002342 <HAL_TIM_Base_Start_IT+0x4e>
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4a12      	ldr	r2, [pc, #72]	; (8002388 <HAL_TIM_Base_Start_IT+0x94>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d111      	bne.n	8002366 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	689b      	ldr	r3, [r3, #8]
 8002348:	f003 0307 	and.w	r3, r3, #7
 800234c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	2b06      	cmp	r3, #6
 8002352:	d010      	beq.n	8002376 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	681a      	ldr	r2, [r3, #0]
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f042 0201 	orr.w	r2, r2, #1
 8002362:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002364:	e007      	b.n	8002376 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	681a      	ldr	r2, [r3, #0]
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f042 0201 	orr.w	r2, r2, #1
 8002374:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002376:	2300      	movs	r3, #0
}
 8002378:	4618      	mov	r0, r3
 800237a:	3714      	adds	r7, #20
 800237c:	46bd      	mov	sp, r7
 800237e:	bc80      	pop	{r7}
 8002380:	4770      	bx	lr
 8002382:	bf00      	nop
 8002384:	40012c00 	.word	0x40012c00
 8002388:	40000400 	.word	0x40000400

0800238c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b082      	sub	sp, #8
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	691b      	ldr	r3, [r3, #16]
 800239a:	f003 0302 	and.w	r3, r3, #2
 800239e:	2b02      	cmp	r3, #2
 80023a0:	d122      	bne.n	80023e8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	68db      	ldr	r3, [r3, #12]
 80023a8:	f003 0302 	and.w	r3, r3, #2
 80023ac:	2b02      	cmp	r3, #2
 80023ae:	d11b      	bne.n	80023e8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f06f 0202 	mvn.w	r2, #2
 80023b8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	2201      	movs	r2, #1
 80023be:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	699b      	ldr	r3, [r3, #24]
 80023c6:	f003 0303 	and.w	r3, r3, #3
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d003      	beq.n	80023d6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80023ce:	6878      	ldr	r0, [r7, #4]
 80023d0:	f000 f9b4 	bl	800273c <HAL_TIM_IC_CaptureCallback>
 80023d4:	e005      	b.n	80023e2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80023d6:	6878      	ldr	r0, [r7, #4]
 80023d8:	f000 f9a7 	bl	800272a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023dc:	6878      	ldr	r0, [r7, #4]
 80023de:	f000 f9b6 	bl	800274e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2200      	movs	r2, #0
 80023e6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	691b      	ldr	r3, [r3, #16]
 80023ee:	f003 0304 	and.w	r3, r3, #4
 80023f2:	2b04      	cmp	r3, #4
 80023f4:	d122      	bne.n	800243c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	68db      	ldr	r3, [r3, #12]
 80023fc:	f003 0304 	and.w	r3, r3, #4
 8002400:	2b04      	cmp	r3, #4
 8002402:	d11b      	bne.n	800243c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f06f 0204 	mvn.w	r2, #4
 800240c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	2202      	movs	r2, #2
 8002412:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	699b      	ldr	r3, [r3, #24]
 800241a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800241e:	2b00      	cmp	r3, #0
 8002420:	d003      	beq.n	800242a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002422:	6878      	ldr	r0, [r7, #4]
 8002424:	f000 f98a 	bl	800273c <HAL_TIM_IC_CaptureCallback>
 8002428:	e005      	b.n	8002436 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800242a:	6878      	ldr	r0, [r7, #4]
 800242c:	f000 f97d 	bl	800272a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002430:	6878      	ldr	r0, [r7, #4]
 8002432:	f000 f98c 	bl	800274e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2200      	movs	r2, #0
 800243a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	691b      	ldr	r3, [r3, #16]
 8002442:	f003 0308 	and.w	r3, r3, #8
 8002446:	2b08      	cmp	r3, #8
 8002448:	d122      	bne.n	8002490 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	68db      	ldr	r3, [r3, #12]
 8002450:	f003 0308 	and.w	r3, r3, #8
 8002454:	2b08      	cmp	r3, #8
 8002456:	d11b      	bne.n	8002490 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f06f 0208 	mvn.w	r2, #8
 8002460:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2204      	movs	r2, #4
 8002466:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	69db      	ldr	r3, [r3, #28]
 800246e:	f003 0303 	and.w	r3, r3, #3
 8002472:	2b00      	cmp	r3, #0
 8002474:	d003      	beq.n	800247e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002476:	6878      	ldr	r0, [r7, #4]
 8002478:	f000 f960 	bl	800273c <HAL_TIM_IC_CaptureCallback>
 800247c:	e005      	b.n	800248a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800247e:	6878      	ldr	r0, [r7, #4]
 8002480:	f000 f953 	bl	800272a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002484:	6878      	ldr	r0, [r7, #4]
 8002486:	f000 f962 	bl	800274e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2200      	movs	r2, #0
 800248e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	691b      	ldr	r3, [r3, #16]
 8002496:	f003 0310 	and.w	r3, r3, #16
 800249a:	2b10      	cmp	r3, #16
 800249c:	d122      	bne.n	80024e4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	68db      	ldr	r3, [r3, #12]
 80024a4:	f003 0310 	and.w	r3, r3, #16
 80024a8:	2b10      	cmp	r3, #16
 80024aa:	d11b      	bne.n	80024e4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f06f 0210 	mvn.w	r2, #16
 80024b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2208      	movs	r2, #8
 80024ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	69db      	ldr	r3, [r3, #28]
 80024c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d003      	beq.n	80024d2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80024ca:	6878      	ldr	r0, [r7, #4]
 80024cc:	f000 f936 	bl	800273c <HAL_TIM_IC_CaptureCallback>
 80024d0:	e005      	b.n	80024de <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024d2:	6878      	ldr	r0, [r7, #4]
 80024d4:	f000 f929 	bl	800272a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024d8:	6878      	ldr	r0, [r7, #4]
 80024da:	f000 f938 	bl	800274e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2200      	movs	r2, #0
 80024e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	691b      	ldr	r3, [r3, #16]
 80024ea:	f003 0301 	and.w	r3, r3, #1
 80024ee:	2b01      	cmp	r3, #1
 80024f0:	d10e      	bne.n	8002510 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	68db      	ldr	r3, [r3, #12]
 80024f8:	f003 0301 	and.w	r3, r3, #1
 80024fc:	2b01      	cmp	r3, #1
 80024fe:	d107      	bne.n	8002510 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f06f 0201 	mvn.w	r2, #1
 8002508:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800250a:	6878      	ldr	r0, [r7, #4]
 800250c:	f7fe fb8a 	bl	8000c24 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	691b      	ldr	r3, [r3, #16]
 8002516:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800251a:	2b80      	cmp	r3, #128	; 0x80
 800251c:	d10e      	bne.n	800253c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	68db      	ldr	r3, [r3, #12]
 8002524:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002528:	2b80      	cmp	r3, #128	; 0x80
 800252a:	d107      	bne.n	800253c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002534:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002536:	6878      	ldr	r0, [r7, #4]
 8002538:	f000 fa6b 	bl	8002a12 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	691b      	ldr	r3, [r3, #16]
 8002542:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002546:	2b40      	cmp	r3, #64	; 0x40
 8002548:	d10e      	bne.n	8002568 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	68db      	ldr	r3, [r3, #12]
 8002550:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002554:	2b40      	cmp	r3, #64	; 0x40
 8002556:	d107      	bne.n	8002568 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002560:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002562:	6878      	ldr	r0, [r7, #4]
 8002564:	f000 f8fc 	bl	8002760 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	691b      	ldr	r3, [r3, #16]
 800256e:	f003 0320 	and.w	r3, r3, #32
 8002572:	2b20      	cmp	r3, #32
 8002574:	d10e      	bne.n	8002594 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	68db      	ldr	r3, [r3, #12]
 800257c:	f003 0320 	and.w	r3, r3, #32
 8002580:	2b20      	cmp	r3, #32
 8002582:	d107      	bne.n	8002594 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f06f 0220 	mvn.w	r2, #32
 800258c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800258e:	6878      	ldr	r0, [r7, #4]
 8002590:	f000 fa36 	bl	8002a00 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002594:	bf00      	nop
 8002596:	3708      	adds	r7, #8
 8002598:	46bd      	mov	sp, r7
 800259a:	bd80      	pop	{r7, pc}

0800259c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b084      	sub	sp, #16
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
 80025a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80025a6:	2300      	movs	r3, #0
 80025a8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025b0:	2b01      	cmp	r3, #1
 80025b2:	d101      	bne.n	80025b8 <HAL_TIM_ConfigClockSource+0x1c>
 80025b4:	2302      	movs	r3, #2
 80025b6:	e0b4      	b.n	8002722 <HAL_TIM_ConfigClockSource+0x186>
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2201      	movs	r2, #1
 80025bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2202      	movs	r2, #2
 80025c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	689b      	ldr	r3, [r3, #8]
 80025ce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80025d0:	68bb      	ldr	r3, [r7, #8]
 80025d2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80025d6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80025d8:	68bb      	ldr	r3, [r7, #8]
 80025da:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80025de:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	68ba      	ldr	r2, [r7, #8]
 80025e6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80025f0:	d03e      	beq.n	8002670 <HAL_TIM_ConfigClockSource+0xd4>
 80025f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80025f6:	f200 8087 	bhi.w	8002708 <HAL_TIM_ConfigClockSource+0x16c>
 80025fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025fe:	f000 8086 	beq.w	800270e <HAL_TIM_ConfigClockSource+0x172>
 8002602:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002606:	d87f      	bhi.n	8002708 <HAL_TIM_ConfigClockSource+0x16c>
 8002608:	2b70      	cmp	r3, #112	; 0x70
 800260a:	d01a      	beq.n	8002642 <HAL_TIM_ConfigClockSource+0xa6>
 800260c:	2b70      	cmp	r3, #112	; 0x70
 800260e:	d87b      	bhi.n	8002708 <HAL_TIM_ConfigClockSource+0x16c>
 8002610:	2b60      	cmp	r3, #96	; 0x60
 8002612:	d050      	beq.n	80026b6 <HAL_TIM_ConfigClockSource+0x11a>
 8002614:	2b60      	cmp	r3, #96	; 0x60
 8002616:	d877      	bhi.n	8002708 <HAL_TIM_ConfigClockSource+0x16c>
 8002618:	2b50      	cmp	r3, #80	; 0x50
 800261a:	d03c      	beq.n	8002696 <HAL_TIM_ConfigClockSource+0xfa>
 800261c:	2b50      	cmp	r3, #80	; 0x50
 800261e:	d873      	bhi.n	8002708 <HAL_TIM_ConfigClockSource+0x16c>
 8002620:	2b40      	cmp	r3, #64	; 0x40
 8002622:	d058      	beq.n	80026d6 <HAL_TIM_ConfigClockSource+0x13a>
 8002624:	2b40      	cmp	r3, #64	; 0x40
 8002626:	d86f      	bhi.n	8002708 <HAL_TIM_ConfigClockSource+0x16c>
 8002628:	2b30      	cmp	r3, #48	; 0x30
 800262a:	d064      	beq.n	80026f6 <HAL_TIM_ConfigClockSource+0x15a>
 800262c:	2b30      	cmp	r3, #48	; 0x30
 800262e:	d86b      	bhi.n	8002708 <HAL_TIM_ConfigClockSource+0x16c>
 8002630:	2b20      	cmp	r3, #32
 8002632:	d060      	beq.n	80026f6 <HAL_TIM_ConfigClockSource+0x15a>
 8002634:	2b20      	cmp	r3, #32
 8002636:	d867      	bhi.n	8002708 <HAL_TIM_ConfigClockSource+0x16c>
 8002638:	2b00      	cmp	r3, #0
 800263a:	d05c      	beq.n	80026f6 <HAL_TIM_ConfigClockSource+0x15a>
 800263c:	2b10      	cmp	r3, #16
 800263e:	d05a      	beq.n	80026f6 <HAL_TIM_ConfigClockSource+0x15a>
 8002640:	e062      	b.n	8002708 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002652:	f000 f95e 	bl	8002912 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	689b      	ldr	r3, [r3, #8]
 800265c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800265e:	68bb      	ldr	r3, [r7, #8]
 8002660:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002664:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	68ba      	ldr	r2, [r7, #8]
 800266c:	609a      	str	r2, [r3, #8]
      break;
 800266e:	e04f      	b.n	8002710 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002680:	f000 f947 	bl	8002912 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	689a      	ldr	r2, [r3, #8]
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002692:	609a      	str	r2, [r3, #8]
      break;
 8002694:	e03c      	b.n	8002710 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80026a2:	461a      	mov	r2, r3
 80026a4:	f000 f8be 	bl	8002824 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	2150      	movs	r1, #80	; 0x50
 80026ae:	4618      	mov	r0, r3
 80026b0:	f000 f915 	bl	80028de <TIM_ITRx_SetConfig>
      break;
 80026b4:	e02c      	b.n	8002710 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80026c2:	461a      	mov	r2, r3
 80026c4:	f000 f8dc 	bl	8002880 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	2160      	movs	r1, #96	; 0x60
 80026ce:	4618      	mov	r0, r3
 80026d0:	f000 f905 	bl	80028de <TIM_ITRx_SetConfig>
      break;
 80026d4:	e01c      	b.n	8002710 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80026e2:	461a      	mov	r2, r3
 80026e4:	f000 f89e 	bl	8002824 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	2140      	movs	r1, #64	; 0x40
 80026ee:	4618      	mov	r0, r3
 80026f0:	f000 f8f5 	bl	80028de <TIM_ITRx_SetConfig>
      break;
 80026f4:	e00c      	b.n	8002710 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681a      	ldr	r2, [r3, #0]
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4619      	mov	r1, r3
 8002700:	4610      	mov	r0, r2
 8002702:	f000 f8ec 	bl	80028de <TIM_ITRx_SetConfig>
      break;
 8002706:	e003      	b.n	8002710 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002708:	2301      	movs	r3, #1
 800270a:	73fb      	strb	r3, [r7, #15]
      break;
 800270c:	e000      	b.n	8002710 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800270e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2201      	movs	r2, #1
 8002714:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2200      	movs	r2, #0
 800271c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002720:	7bfb      	ldrb	r3, [r7, #15]
}
 8002722:	4618      	mov	r0, r3
 8002724:	3710      	adds	r7, #16
 8002726:	46bd      	mov	sp, r7
 8002728:	bd80      	pop	{r7, pc}

0800272a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800272a:	b480      	push	{r7}
 800272c:	b083      	sub	sp, #12
 800272e:	af00      	add	r7, sp, #0
 8002730:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002732:	bf00      	nop
 8002734:	370c      	adds	r7, #12
 8002736:	46bd      	mov	sp, r7
 8002738:	bc80      	pop	{r7}
 800273a:	4770      	bx	lr

0800273c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800273c:	b480      	push	{r7}
 800273e:	b083      	sub	sp, #12
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002744:	bf00      	nop
 8002746:	370c      	adds	r7, #12
 8002748:	46bd      	mov	sp, r7
 800274a:	bc80      	pop	{r7}
 800274c:	4770      	bx	lr

0800274e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800274e:	b480      	push	{r7}
 8002750:	b083      	sub	sp, #12
 8002752:	af00      	add	r7, sp, #0
 8002754:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002756:	bf00      	nop
 8002758:	370c      	adds	r7, #12
 800275a:	46bd      	mov	sp, r7
 800275c:	bc80      	pop	{r7}
 800275e:	4770      	bx	lr

08002760 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002760:	b480      	push	{r7}
 8002762:	b083      	sub	sp, #12
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002768:	bf00      	nop
 800276a:	370c      	adds	r7, #12
 800276c:	46bd      	mov	sp, r7
 800276e:	bc80      	pop	{r7}
 8002770:	4770      	bx	lr
	...

08002774 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002774:	b480      	push	{r7}
 8002776:	b085      	sub	sp, #20
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
 800277c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	4a25      	ldr	r2, [pc, #148]	; (800281c <TIM_Base_SetConfig+0xa8>)
 8002788:	4293      	cmp	r3, r2
 800278a:	d007      	beq.n	800279c <TIM_Base_SetConfig+0x28>
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002792:	d003      	beq.n	800279c <TIM_Base_SetConfig+0x28>
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	4a22      	ldr	r2, [pc, #136]	; (8002820 <TIM_Base_SetConfig+0xac>)
 8002798:	4293      	cmp	r3, r2
 800279a:	d108      	bne.n	80027ae <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	68fa      	ldr	r2, [r7, #12]
 80027aa:	4313      	orrs	r3, r2
 80027ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	4a1a      	ldr	r2, [pc, #104]	; (800281c <TIM_Base_SetConfig+0xa8>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d007      	beq.n	80027c6 <TIM_Base_SetConfig+0x52>
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027bc:	d003      	beq.n	80027c6 <TIM_Base_SetConfig+0x52>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	4a17      	ldr	r2, [pc, #92]	; (8002820 <TIM_Base_SetConfig+0xac>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d108      	bne.n	80027d8 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	68db      	ldr	r3, [r3, #12]
 80027d2:	68fa      	ldr	r2, [r7, #12]
 80027d4:	4313      	orrs	r3, r2
 80027d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	695b      	ldr	r3, [r3, #20]
 80027e2:	4313      	orrs	r3, r2
 80027e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	68fa      	ldr	r2, [r7, #12]
 80027ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	689a      	ldr	r2, [r3, #8]
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	681a      	ldr	r2, [r3, #0]
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	4a07      	ldr	r2, [pc, #28]	; (800281c <TIM_Base_SetConfig+0xa8>)
 8002800:	4293      	cmp	r3, r2
 8002802:	d103      	bne.n	800280c <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	691a      	ldr	r2, [r3, #16]
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2201      	movs	r2, #1
 8002810:	615a      	str	r2, [r3, #20]
}
 8002812:	bf00      	nop
 8002814:	3714      	adds	r7, #20
 8002816:	46bd      	mov	sp, r7
 8002818:	bc80      	pop	{r7}
 800281a:	4770      	bx	lr
 800281c:	40012c00 	.word	0x40012c00
 8002820:	40000400 	.word	0x40000400

08002824 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002824:	b480      	push	{r7}
 8002826:	b087      	sub	sp, #28
 8002828:	af00      	add	r7, sp, #0
 800282a:	60f8      	str	r0, [r7, #12]
 800282c:	60b9      	str	r1, [r7, #8]
 800282e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	6a1b      	ldr	r3, [r3, #32]
 8002834:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	6a1b      	ldr	r3, [r3, #32]
 800283a:	f023 0201 	bic.w	r2, r3, #1
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	699b      	ldr	r3, [r3, #24]
 8002846:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002848:	693b      	ldr	r3, [r7, #16]
 800284a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800284e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	011b      	lsls	r3, r3, #4
 8002854:	693a      	ldr	r2, [r7, #16]
 8002856:	4313      	orrs	r3, r2
 8002858:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800285a:	697b      	ldr	r3, [r7, #20]
 800285c:	f023 030a 	bic.w	r3, r3, #10
 8002860:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002862:	697a      	ldr	r2, [r7, #20]
 8002864:	68bb      	ldr	r3, [r7, #8]
 8002866:	4313      	orrs	r3, r2
 8002868:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	693a      	ldr	r2, [r7, #16]
 800286e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	697a      	ldr	r2, [r7, #20]
 8002874:	621a      	str	r2, [r3, #32]
}
 8002876:	bf00      	nop
 8002878:	371c      	adds	r7, #28
 800287a:	46bd      	mov	sp, r7
 800287c:	bc80      	pop	{r7}
 800287e:	4770      	bx	lr

08002880 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002880:	b480      	push	{r7}
 8002882:	b087      	sub	sp, #28
 8002884:	af00      	add	r7, sp, #0
 8002886:	60f8      	str	r0, [r7, #12]
 8002888:	60b9      	str	r1, [r7, #8]
 800288a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	6a1b      	ldr	r3, [r3, #32]
 8002890:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	6a1b      	ldr	r3, [r3, #32]
 8002896:	f023 0210 	bic.w	r2, r3, #16
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	699b      	ldr	r3, [r3, #24]
 80028a2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80028a4:	693b      	ldr	r3, [r7, #16]
 80028a6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80028aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	031b      	lsls	r3, r3, #12
 80028b0:	693a      	ldr	r2, [r7, #16]
 80028b2:	4313      	orrs	r3, r2
 80028b4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80028b6:	697b      	ldr	r3, [r7, #20]
 80028b8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80028bc:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80028be:	68bb      	ldr	r3, [r7, #8]
 80028c0:	011b      	lsls	r3, r3, #4
 80028c2:	697a      	ldr	r2, [r7, #20]
 80028c4:	4313      	orrs	r3, r2
 80028c6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	693a      	ldr	r2, [r7, #16]
 80028cc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	697a      	ldr	r2, [r7, #20]
 80028d2:	621a      	str	r2, [r3, #32]
}
 80028d4:	bf00      	nop
 80028d6:	371c      	adds	r7, #28
 80028d8:	46bd      	mov	sp, r7
 80028da:	bc80      	pop	{r7}
 80028dc:	4770      	bx	lr

080028de <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80028de:	b480      	push	{r7}
 80028e0:	b085      	sub	sp, #20
 80028e2:	af00      	add	r7, sp, #0
 80028e4:	6078      	str	r0, [r7, #4]
 80028e6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	689b      	ldr	r3, [r3, #8]
 80028ec:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028f4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80028f6:	683a      	ldr	r2, [r7, #0]
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	4313      	orrs	r3, r2
 80028fc:	f043 0307 	orr.w	r3, r3, #7
 8002900:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	68fa      	ldr	r2, [r7, #12]
 8002906:	609a      	str	r2, [r3, #8]
}
 8002908:	bf00      	nop
 800290a:	3714      	adds	r7, #20
 800290c:	46bd      	mov	sp, r7
 800290e:	bc80      	pop	{r7}
 8002910:	4770      	bx	lr

08002912 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002912:	b480      	push	{r7}
 8002914:	b087      	sub	sp, #28
 8002916:	af00      	add	r7, sp, #0
 8002918:	60f8      	str	r0, [r7, #12]
 800291a:	60b9      	str	r1, [r7, #8]
 800291c:	607a      	str	r2, [r7, #4]
 800291e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	689b      	ldr	r3, [r3, #8]
 8002924:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002926:	697b      	ldr	r3, [r7, #20]
 8002928:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800292c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	021a      	lsls	r2, r3, #8
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	431a      	orrs	r2, r3
 8002936:	68bb      	ldr	r3, [r7, #8]
 8002938:	4313      	orrs	r3, r2
 800293a:	697a      	ldr	r2, [r7, #20]
 800293c:	4313      	orrs	r3, r2
 800293e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	697a      	ldr	r2, [r7, #20]
 8002944:	609a      	str	r2, [r3, #8]
}
 8002946:	bf00      	nop
 8002948:	371c      	adds	r7, #28
 800294a:	46bd      	mov	sp, r7
 800294c:	bc80      	pop	{r7}
 800294e:	4770      	bx	lr

08002950 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002950:	b480      	push	{r7}
 8002952:	b085      	sub	sp, #20
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
 8002958:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002960:	2b01      	cmp	r3, #1
 8002962:	d101      	bne.n	8002968 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002964:	2302      	movs	r3, #2
 8002966:	e041      	b.n	80029ec <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2201      	movs	r2, #1
 800296c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2202      	movs	r2, #2
 8002974:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	689b      	ldr	r3, [r3, #8]
 8002986:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800298e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	68fa      	ldr	r2, [r7, #12]
 8002996:	4313      	orrs	r3, r2
 8002998:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	68fa      	ldr	r2, [r7, #12]
 80029a0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4a14      	ldr	r2, [pc, #80]	; (80029f8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d009      	beq.n	80029c0 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029b4:	d004      	beq.n	80029c0 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4a10      	ldr	r2, [pc, #64]	; (80029fc <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 80029bc:	4293      	cmp	r3, r2
 80029be:	d10c      	bne.n	80029da <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80029c0:	68bb      	ldr	r3, [r7, #8]
 80029c2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80029c6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	68ba      	ldr	r2, [r7, #8]
 80029ce:	4313      	orrs	r3, r2
 80029d0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	68ba      	ldr	r2, [r7, #8]
 80029d8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2201      	movs	r2, #1
 80029de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2200      	movs	r2, #0
 80029e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80029ea:	2300      	movs	r3, #0
}
 80029ec:	4618      	mov	r0, r3
 80029ee:	3714      	adds	r7, #20
 80029f0:	46bd      	mov	sp, r7
 80029f2:	bc80      	pop	{r7}
 80029f4:	4770      	bx	lr
 80029f6:	bf00      	nop
 80029f8:	40012c00 	.word	0x40012c00
 80029fc:	40000400 	.word	0x40000400

08002a00 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002a00:	b480      	push	{r7}
 8002a02:	b083      	sub	sp, #12
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002a08:	bf00      	nop
 8002a0a:	370c      	adds	r7, #12
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	bc80      	pop	{r7}
 8002a10:	4770      	bx	lr

08002a12 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002a12:	b480      	push	{r7}
 8002a14:	b083      	sub	sp, #12
 8002a16:	af00      	add	r7, sp, #0
 8002a18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002a1a:	bf00      	nop
 8002a1c:	370c      	adds	r7, #12
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bc80      	pop	{r7}
 8002a22:	4770      	bx	lr

08002a24 <memset>:
 8002a24:	4603      	mov	r3, r0
 8002a26:	4402      	add	r2, r0
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d100      	bne.n	8002a2e <memset+0xa>
 8002a2c:	4770      	bx	lr
 8002a2e:	f803 1b01 	strb.w	r1, [r3], #1
 8002a32:	e7f9      	b.n	8002a28 <memset+0x4>

08002a34 <__libc_init_array>:
 8002a34:	b570      	push	{r4, r5, r6, lr}
 8002a36:	2600      	movs	r6, #0
 8002a38:	4d0c      	ldr	r5, [pc, #48]	; (8002a6c <__libc_init_array+0x38>)
 8002a3a:	4c0d      	ldr	r4, [pc, #52]	; (8002a70 <__libc_init_array+0x3c>)
 8002a3c:	1b64      	subs	r4, r4, r5
 8002a3e:	10a4      	asrs	r4, r4, #2
 8002a40:	42a6      	cmp	r6, r4
 8002a42:	d109      	bne.n	8002a58 <__libc_init_array+0x24>
 8002a44:	f000 f81a 	bl	8002a7c <_init>
 8002a48:	2600      	movs	r6, #0
 8002a4a:	4d0a      	ldr	r5, [pc, #40]	; (8002a74 <__libc_init_array+0x40>)
 8002a4c:	4c0a      	ldr	r4, [pc, #40]	; (8002a78 <__libc_init_array+0x44>)
 8002a4e:	1b64      	subs	r4, r4, r5
 8002a50:	10a4      	asrs	r4, r4, #2
 8002a52:	42a6      	cmp	r6, r4
 8002a54:	d105      	bne.n	8002a62 <__libc_init_array+0x2e>
 8002a56:	bd70      	pop	{r4, r5, r6, pc}
 8002a58:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a5c:	4798      	blx	r3
 8002a5e:	3601      	adds	r6, #1
 8002a60:	e7ee      	b.n	8002a40 <__libc_init_array+0xc>
 8002a62:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a66:	4798      	blx	r3
 8002a68:	3601      	adds	r6, #1
 8002a6a:	e7f2      	b.n	8002a52 <__libc_init_array+0x1e>
 8002a6c:	08002ab8 	.word	0x08002ab8
 8002a70:	08002ab8 	.word	0x08002ab8
 8002a74:	08002ab8 	.word	0x08002ab8
 8002a78:	08002abc 	.word	0x08002abc

08002a7c <_init>:
 8002a7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a7e:	bf00      	nop
 8002a80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a82:	bc08      	pop	{r3}
 8002a84:	469e      	mov	lr, r3
 8002a86:	4770      	bx	lr

08002a88 <_fini>:
 8002a88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a8a:	bf00      	nop
 8002a8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a8e:	bc08      	pop	{r3}
 8002a90:	469e      	mov	lr, r3
 8002a92:	4770      	bx	lr
