
STM32_LAB3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000030fc  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08003208  08003208  00013208  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800322c  0800322c  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  0800322c  0800322c  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800322c  0800322c  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800322c  0800322c  0001322c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003230  08003230  00013230  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  08003234  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000e4  20000064  08003298  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000148  08003298  00020148  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008d  2**0
                  CONTENTS, READONLY
 13 .debug_info   00008ef7  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000020de  00000000  00000000  00028fc7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b68  00000000  00000000  0002b0a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000892  00000000  00000000  0002bc10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017957  00000000  00000000  0002c4a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f1ea  00000000  00000000  00043df9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00082768  00000000  00000000  00052fe3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002b28  00000000  00000000  000d574c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  000d8274  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000064 	.word	0x20000064
 8000128:	00000000 	.word	0x00000000
 800012c:	080031f0 	.word	0x080031f0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000068 	.word	0x20000068
 8000148:	080031f0 	.word	0x080031f0

0800014c <CHECKCO>:
#include "button.h"

int checkco=0;

int CHECKCO()
{
 800014c:	b480      	push	{r7}
 800014e:	af00      	add	r7, sp, #0
	return checkco;
 8000150:	4b02      	ldr	r3, [pc, #8]	; (800015c <CHECKCO+0x10>)
 8000152:	681b      	ldr	r3, [r3, #0]
}
 8000154:	4618      	mov	r0, r3
 8000156:	46bd      	mov	sp, r7
 8000158:	bc80      	pop	{r7}
 800015a:	4770      	bx	lr
 800015c:	20000080 	.word	0x20000080

08000160 <getkeyinput>:

void getkeyinput()
{
 8000160:	b580      	push	{r7, lr}
 8000162:	af00      	add	r7, sp, #0
	getkeyinput1();
 8000164:	f000 f8cc 	bl	8000300 <getkeyinput1>
	getkeyinput3();
 8000168:	f000 fa1a 	bl	80005a0 <getkeyinput3>
	if(is_button3_press()==1)
 800016c:	f000 fa06 	bl	800057c <is_button3_press>
 8000170:	4603      	mov	r3, r0
 8000172:	2b01      	cmp	r3, #1
 8000174:	d10e      	bne.n	8000194 <getkeyinput+0x34>
	{
		  if(checkco==0)
 8000176:	4b3b      	ldr	r3, [pc, #236]	; (8000264 <getkeyinput+0x104>)
 8000178:	681b      	ldr	r3, [r3, #0]
 800017a:	2b00      	cmp	r3, #0
 800017c:	d103      	bne.n	8000186 <getkeyinput+0x26>
		  {checkco=1;}
 800017e:	4b39      	ldr	r3, [pc, #228]	; (8000264 <getkeyinput+0x104>)
 8000180:	2201      	movs	r2, #1
 8000182:	601a      	str	r2, [r3, #0]
 8000184:	e006      	b.n	8000194 <getkeyinput+0x34>
		  else if(checkco==1)
 8000186:	4b37      	ldr	r3, [pc, #220]	; (8000264 <getkeyinput+0x104>)
 8000188:	681b      	ldr	r3, [r3, #0]
 800018a:	2b01      	cmp	r3, #1
 800018c:	d102      	bne.n	8000194 <getkeyinput+0x34>
		  {checkco=0;}
 800018e:	4b35      	ldr	r3, [pc, #212]	; (8000264 <getkeyinput+0x104>)
 8000190:	2200      	movs	r2, #0
 8000192:	601a      	str	r2, [r3, #0]
	}
	switch (mode)
 8000194:	4b34      	ldr	r3, [pc, #208]	; (8000268 <getkeyinput+0x108>)
 8000196:	681b      	ldr	r3, [r3, #0]
 8000198:	3b01      	subs	r3, #1
 800019a:	2b03      	cmp	r3, #3
 800019c:	d857      	bhi.n	800024e <getkeyinput+0xee>
 800019e:	a201      	add	r2, pc, #4	; (adr r2, 80001a4 <getkeyinput+0x44>)
 80001a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80001a4:	080001b5 	.word	0x080001b5
 80001a8:	080001d7 	.word	0x080001d7
 80001ac:	080001ff 	.word	0x080001ff
 80001b0:	08000227 	.word	0x08000227
	{
	case 1 :
		if(checkco==1)
 80001b4:	4b2b      	ldr	r3, [pc, #172]	; (8000264 <getkeyinput+0x104>)
 80001b6:	681b      	ldr	r3, [r3, #0]
 80001b8:	2b01      	cmp	r3, #1
 80001ba:	d105      	bne.n	80001c8 <getkeyinput+0x68>
	    {
			fsm_run();
 80001bc:	f000 fede 	bl	8000f7c <fsm_run>
		    display_traffic1();
 80001c0:	f001 fa92 	bl	80016e8 <display_traffic1>
			display_traffic2();
 80001c4:	f001 fbce 	bl	8001964 <display_traffic2>
	    }
	    if(checkco==0)
 80001c8:	4b26      	ldr	r3, [pc, #152]	; (8000264 <getkeyinput+0x104>)
 80001ca:	681b      	ldr	r3, [r3, #0]
 80001cc:	2b00      	cmp	r3, #0
 80001ce:	d140      	bne.n	8000252 <getkeyinput+0xf2>
		{
			turn_off();
 80001d0:	f000 fedc 	bl	8000f8c <turn_off>
	    }
		break;
 80001d4:	e03d      	b.n	8000252 <getkeyinput+0xf2>
	case 2 :
		if(checkco==1)
 80001d6:	4b23      	ldr	r3, [pc, #140]	; (8000264 <getkeyinput+0x104>)
 80001d8:	681b      	ldr	r3, [r3, #0]
 80001da:	2b01      	cmp	r3, #1
 80001dc:	d108      	bne.n	80001f0 <getkeyinput+0x90>
	    {
			if(timerforled==0)
 80001de:	4b23      	ldr	r3, [pc, #140]	; (800026c <getkeyinput+0x10c>)
 80001e0:	681b      	ldr	r3, [r3, #0]
 80001e2:	2b00      	cmp	r3, #0
 80001e4:	d102      	bne.n	80001ec <getkeyinput+0x8c>
			{
				timerforled=50;
 80001e6:	4b21      	ldr	r3, [pc, #132]	; (800026c <getkeyinput+0x10c>)
 80001e8:	2232      	movs	r2, #50	; 0x32
 80001ea:	601a      	str	r2, [r3, #0]
			}
			getkeyinput2();
 80001ec:	f000 f95c 	bl	80004a8 <getkeyinput2>
	    }
	    if(checkco==0)
 80001f0:	4b1c      	ldr	r3, [pc, #112]	; (8000264 <getkeyinput+0x104>)
 80001f2:	681b      	ldr	r3, [r3, #0]
 80001f4:	2b00      	cmp	r3, #0
 80001f6:	d12e      	bne.n	8000256 <getkeyinput+0xf6>
		{
			turn_off();
 80001f8:	f000 fec8 	bl	8000f8c <turn_off>
	    }
		break;
 80001fc:	e02b      	b.n	8000256 <getkeyinput+0xf6>
	case 3 :
		if(checkco==1)
 80001fe:	4b19      	ldr	r3, [pc, #100]	; (8000264 <getkeyinput+0x104>)
 8000200:	681b      	ldr	r3, [r3, #0]
 8000202:	2b01      	cmp	r3, #1
 8000204:	d108      	bne.n	8000218 <getkeyinput+0xb8>
	    {
			if(timerforled==0)
 8000206:	4b19      	ldr	r3, [pc, #100]	; (800026c <getkeyinput+0x10c>)
 8000208:	681b      	ldr	r3, [r3, #0]
 800020a:	2b00      	cmp	r3, #0
 800020c:	d102      	bne.n	8000214 <getkeyinput+0xb4>
			{
				timerforled=50;
 800020e:	4b17      	ldr	r3, [pc, #92]	; (800026c <getkeyinput+0x10c>)
 8000210:	2232      	movs	r2, #50	; 0x32
 8000212:	601a      	str	r2, [r3, #0]
			}
			getkeyinput2();
 8000214:	f000 f948 	bl	80004a8 <getkeyinput2>
	    }
	    if(checkco==0)
 8000218:	4b12      	ldr	r3, [pc, #72]	; (8000264 <getkeyinput+0x104>)
 800021a:	681b      	ldr	r3, [r3, #0]
 800021c:	2b00      	cmp	r3, #0
 800021e:	d11c      	bne.n	800025a <getkeyinput+0xfa>
		{
			turn_off();
 8000220:	f000 feb4 	bl	8000f8c <turn_off>
	    }
		break;
 8000224:	e019      	b.n	800025a <getkeyinput+0xfa>
	case 4 :
		if(checkco==1)
 8000226:	4b0f      	ldr	r3, [pc, #60]	; (8000264 <getkeyinput+0x104>)
 8000228:	681b      	ldr	r3, [r3, #0]
 800022a:	2b01      	cmp	r3, #1
 800022c:	d108      	bne.n	8000240 <getkeyinput+0xe0>
	    {
			if(timerforled==0)
 800022e:	4b0f      	ldr	r3, [pc, #60]	; (800026c <getkeyinput+0x10c>)
 8000230:	681b      	ldr	r3, [r3, #0]
 8000232:	2b00      	cmp	r3, #0
 8000234:	d102      	bne.n	800023c <getkeyinput+0xdc>
			{
			   timerforled=50;
 8000236:	4b0d      	ldr	r3, [pc, #52]	; (800026c <getkeyinput+0x10c>)
 8000238:	2232      	movs	r2, #50	; 0x32
 800023a:	601a      	str	r2, [r3, #0]
			}
			getkeyinput2();
 800023c:	f000 f934 	bl	80004a8 <getkeyinput2>
	    }
	    if(checkco==0)
 8000240:	4b08      	ldr	r3, [pc, #32]	; (8000264 <getkeyinput+0x104>)
 8000242:	681b      	ldr	r3, [r3, #0]
 8000244:	2b00      	cmp	r3, #0
 8000246:	d10a      	bne.n	800025e <getkeyinput+0xfe>
		{
			turn_off();
 8000248:	f000 fea0 	bl	8000f8c <turn_off>
	    }
		 break;
 800024c:	e007      	b.n	800025e <getkeyinput+0xfe>
	default : break;
 800024e:	bf00      	nop
 8000250:	e006      	b.n	8000260 <getkeyinput+0x100>
		break;
 8000252:	bf00      	nop
 8000254:	e004      	b.n	8000260 <getkeyinput+0x100>
		break;
 8000256:	bf00      	nop
 8000258:	e002      	b.n	8000260 <getkeyinput+0x100>
		break;
 800025a:	bf00      	nop
 800025c:	e000      	b.n	8000260 <getkeyinput+0x100>
		 break;
 800025e:	bf00      	nop
	}

}
 8000260:	bf00      	nop
 8000262:	bd80      	pop	{r7, pc}
 8000264:	20000080 	.word	0x20000080
 8000268:	20000018 	.word	0x20000018
 800026c:	20000020 	.word	0x20000020

08000270 <checkchedo>:
int timercountdown = 200;

int mode = 1;

void checkchedo()
{
 8000270:	b580      	push	{r7, lr}
 8000272:	af00      	add	r7, sp, #0
	if(CHECKCO()==0)
 8000274:	f7ff ff6a 	bl	800014c <CHECKCO>
 8000278:	4603      	mov	r3, r0
 800027a:	2b00      	cmp	r3, #0
 800027c:	d135      	bne.n	80002ea <checkchedo+0x7a>
	{
	switch (count)
 800027e:	4b1e      	ldr	r3, [pc, #120]	; (80002f8 <checkchedo+0x88>)
 8000280:	681b      	ldr	r3, [r3, #0]
 8000282:	3b01      	subs	r3, #1
 8000284:	2b03      	cmp	r3, #3
 8000286:	d82f      	bhi.n	80002e8 <checkchedo+0x78>
 8000288:	a201      	add	r2, pc, #4	; (adr r2, 8000290 <checkchedo+0x20>)
 800028a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800028e:	bf00      	nop
 8000290:	080002a1 	.word	0x080002a1
 8000294:	080002b3 	.word	0x080002b3
 8000298:	080002c5 	.word	0x080002c5
 800029c:	080002d7 	.word	0x080002d7
	{
	case 1 :
		update7SEGa(1);
 80002a0:	2001      	movs	r0, #1
 80002a2:	f000 f9cd 	bl	8000640 <update7SEGa>
		display7SEGa(count);
 80002a6:	4b14      	ldr	r3, [pc, #80]	; (80002f8 <checkchedo+0x88>)
 80002a8:	681b      	ldr	r3, [r3, #0]
 80002aa:	4618      	mov	r0, r3
 80002ac:	f000 f9f2 	bl	8000694 <display7SEGa>
		break;
 80002b0:	e01b      	b.n	80002ea <checkchedo+0x7a>
	case 2 :
		update7SEGa(1);
 80002b2:	2001      	movs	r0, #1
 80002b4:	f000 f9c4 	bl	8000640 <update7SEGa>
		display7SEGa(count);
 80002b8:	4b0f      	ldr	r3, [pc, #60]	; (80002f8 <checkchedo+0x88>)
 80002ba:	681b      	ldr	r3, [r3, #0]
 80002bc:	4618      	mov	r0, r3
 80002be:	f000 f9e9 	bl	8000694 <display7SEGa>
		break;
 80002c2:	e012      	b.n	80002ea <checkchedo+0x7a>
	case 3 :
		update7SEGa(1);
 80002c4:	2001      	movs	r0, #1
 80002c6:	f000 f9bb 	bl	8000640 <update7SEGa>
		display7SEGa(count);
 80002ca:	4b0b      	ldr	r3, [pc, #44]	; (80002f8 <checkchedo+0x88>)
 80002cc:	681b      	ldr	r3, [r3, #0]
 80002ce:	4618      	mov	r0, r3
 80002d0:	f000 f9e0 	bl	8000694 <display7SEGa>
		break;
 80002d4:	e009      	b.n	80002ea <checkchedo+0x7a>
	case 4 :
		update7SEGa(1);
 80002d6:	2001      	movs	r0, #1
 80002d8:	f000 f9b2 	bl	8000640 <update7SEGa>
		display7SEGa(count);
 80002dc:	4b06      	ldr	r3, [pc, #24]	; (80002f8 <checkchedo+0x88>)
 80002de:	681b      	ldr	r3, [r3, #0]
 80002e0:	4618      	mov	r0, r3
 80002e2:	f000 f9d7 	bl	8000694 <display7SEGa>
		break;
 80002e6:	e000      	b.n	80002ea <checkchedo+0x7a>
	default : break;
 80002e8:	bf00      	nop
	}
	}
	mode=count;
 80002ea:	4b03      	ldr	r3, [pc, #12]	; (80002f8 <checkchedo+0x88>)
 80002ec:	681b      	ldr	r3, [r3, #0]
 80002ee:	4a03      	ldr	r2, [pc, #12]	; (80002fc <checkchedo+0x8c>)
 80002f0:	6013      	str	r3, [r2, #0]

}
 80002f2:	bf00      	nop
 80002f4:	bd80      	pop	{r7, pc}
 80002f6:	bf00      	nop
 80002f8:	20000000 	.word	0x20000000
 80002fc:	20000018 	.word	0x20000018

08000300 <getkeyinput1>:

void getkeyinput1()
{
 8000300:	b580      	push	{r7, lr}
 8000302:	af00      	add	r7, sp, #0
	keyreg0=keyreg1;
 8000304:	4b25      	ldr	r3, [pc, #148]	; (800039c <getkeyinput1+0x9c>)
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	4a25      	ldr	r2, [pc, #148]	; (80003a0 <getkeyinput1+0xa0>)
 800030a:	6013      	str	r3, [r2, #0]
	keyreg1=keyreg2;
 800030c:	4b25      	ldr	r3, [pc, #148]	; (80003a4 <getkeyinput1+0xa4>)
 800030e:	681b      	ldr	r3, [r3, #0]
 8000310:	4a22      	ldr	r2, [pc, #136]	; (800039c <getkeyinput1+0x9c>)
 8000312:	6013      	str	r3, [r2, #0]
	keyreg2=HAL_GPIO_ReadPin(button1_GPIO_Port, button1_Pin);
 8000314:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000318:	4823      	ldr	r0, [pc, #140]	; (80003a8 <getkeyinput1+0xa8>)
 800031a:	f001 ff47 	bl	80021ac <HAL_GPIO_ReadPin>
 800031e:	4603      	mov	r3, r0
 8000320:	461a      	mov	r2, r3
 8000322:	4b20      	ldr	r3, [pc, #128]	; (80003a4 <getkeyinput1+0xa4>)
 8000324:	601a      	str	r2, [r3, #0]
	if((keyreg0==keyreg1)&&(keyreg1==keyreg2))
 8000326:	4b1e      	ldr	r3, [pc, #120]	; (80003a0 <getkeyinput1+0xa0>)
 8000328:	681a      	ldr	r2, [r3, #0]
 800032a:	4b1c      	ldr	r3, [pc, #112]	; (800039c <getkeyinput1+0x9c>)
 800032c:	681b      	ldr	r3, [r3, #0]
 800032e:	429a      	cmp	r2, r3
 8000330:	d12f      	bne.n	8000392 <getkeyinput1+0x92>
 8000332:	4b1a      	ldr	r3, [pc, #104]	; (800039c <getkeyinput1+0x9c>)
 8000334:	681a      	ldr	r2, [r3, #0]
 8000336:	4b1b      	ldr	r3, [pc, #108]	; (80003a4 <getkeyinput1+0xa4>)
 8000338:	681b      	ldr	r3, [r3, #0]
 800033a:	429a      	cmp	r2, r3
 800033c:	d129      	bne.n	8000392 <getkeyinput1+0x92>
	{
		if(keyreg3!=keyreg2)
 800033e:	4b1b      	ldr	r3, [pc, #108]	; (80003ac <getkeyinput1+0xac>)
 8000340:	681a      	ldr	r2, [r3, #0]
 8000342:	4b18      	ldr	r3, [pc, #96]	; (80003a4 <getkeyinput1+0xa4>)
 8000344:	681b      	ldr	r3, [r3, #0]
 8000346:	429a      	cmp	r2, r3
 8000348:	d017      	beq.n	800037a <getkeyinput1+0x7a>
		{
			keyreg3=keyreg2;
 800034a:	4b16      	ldr	r3, [pc, #88]	; (80003a4 <getkeyinput1+0xa4>)
 800034c:	681b      	ldr	r3, [r3, #0]
 800034e:	4a17      	ldr	r2, [pc, #92]	; (80003ac <getkeyinput1+0xac>)
 8000350:	6013      	str	r3, [r2, #0]
			if(keyreg2==pressed_state)
 8000352:	4b14      	ldr	r3, [pc, #80]	; (80003a4 <getkeyinput1+0xa4>)
 8000354:	681b      	ldr	r3, [r3, #0]
 8000356:	2b00      	cmp	r3, #0
 8000358:	d11b      	bne.n	8000392 <getkeyinput1+0x92>
			{
				///TO DO
				count++;
 800035a:	4b15      	ldr	r3, [pc, #84]	; (80003b0 <getkeyinput1+0xb0>)
 800035c:	681b      	ldr	r3, [r3, #0]
 800035e:	3301      	adds	r3, #1
 8000360:	4a13      	ldr	r2, [pc, #76]	; (80003b0 <getkeyinput1+0xb0>)
 8000362:	6013      	str	r3, [r2, #0]
				if(count>4){count=1;}
 8000364:	4b12      	ldr	r3, [pc, #72]	; (80003b0 <getkeyinput1+0xb0>)
 8000366:	681b      	ldr	r3, [r3, #0]
 8000368:	2b04      	cmp	r3, #4
 800036a:	dd02      	ble.n	8000372 <getkeyinput1+0x72>
 800036c:	4b10      	ldr	r3, [pc, #64]	; (80003b0 <getkeyinput1+0xb0>)
 800036e:	2201      	movs	r2, #1
 8000370:	601a      	str	r2, [r3, #0]
				timercountdown=200;
 8000372:	4b10      	ldr	r3, [pc, #64]	; (80003b4 <getkeyinput1+0xb4>)
 8000374:	22c8      	movs	r2, #200	; 0xc8
 8000376:	601a      	str	r2, [r3, #0]
 8000378:	e00b      	b.n	8000392 <getkeyinput1+0x92>
			}
		}
		else
		{
			timercountdown--;
 800037a:	4b0e      	ldr	r3, [pc, #56]	; (80003b4 <getkeyinput1+0xb4>)
 800037c:	681b      	ldr	r3, [r3, #0]
 800037e:	3b01      	subs	r3, #1
 8000380:	4a0c      	ldr	r2, [pc, #48]	; (80003b4 <getkeyinput1+0xb4>)
 8000382:	6013      	str	r3, [r2, #0]
			if(timercountdown==0)
 8000384:	4b0b      	ldr	r3, [pc, #44]	; (80003b4 <getkeyinput1+0xb4>)
 8000386:	681b      	ldr	r3, [r3, #0]
 8000388:	2b00      	cmp	r3, #0
 800038a:	d102      	bne.n	8000392 <getkeyinput1+0x92>
			{
				keyreg3=normal_state;
 800038c:	4b07      	ldr	r3, [pc, #28]	; (80003ac <getkeyinput1+0xac>)
 800038e:	2201      	movs	r2, #1
 8000390:	601a      	str	r2, [r3, #0]
			}
		}
	}
	checkchedo();
 8000392:	f7ff ff6d 	bl	8000270 <checkchedo>
}
 8000396:	bf00      	nop
 8000398:	bd80      	pop	{r7, pc}
 800039a:	bf00      	nop
 800039c:	20000008 	.word	0x20000008
 80003a0:	20000004 	.word	0x20000004
 80003a4:	2000000c 	.word	0x2000000c
 80003a8:	40011000 	.word	0x40011000
 80003ac:	20000010 	.word	0x20000010
 80003b0:	20000000 	.word	0x20000000
 80003b4:	20000014 	.word	0x20000014

080003b8 <settimerforchedo>:

int keyreg23=normal_state;
int timercountdown2 = 200;

void settimerforchedo()
{
 80003b8:	b580      	push	{r7, lr}
 80003ba:	af00      	add	r7, sp, #0
	switch (mode)
 80003bc:	4b13      	ldr	r3, [pc, #76]	; (800040c <settimerforchedo+0x54>)
 80003be:	681b      	ldr	r3, [r3, #0]
 80003c0:	2b04      	cmp	r3, #4
 80003c2:	d018      	beq.n	80003f6 <settimerforchedo+0x3e>
 80003c4:	2b04      	cmp	r3, #4
 80003c6:	dc1e      	bgt.n	8000406 <settimerforchedo+0x4e>
 80003c8:	2b02      	cmp	r3, #2
 80003ca:	d002      	beq.n	80003d2 <settimerforchedo+0x1a>
 80003cc:	2b03      	cmp	r3, #3
 80003ce:	d009      	beq.n	80003e4 <settimerforchedo+0x2c>
	case 3 :
		changetimer2(timerupdate*100);
		break;
	case 4 :
		changetimer3(timerupdate*100);
	default : break;
 80003d0:	e019      	b.n	8000406 <settimerforchedo+0x4e>
		changetimer1(timerupdate*100);
 80003d2:	4b0f      	ldr	r3, [pc, #60]	; (8000410 <settimerforchedo+0x58>)
 80003d4:	681b      	ldr	r3, [r3, #0]
 80003d6:	2264      	movs	r2, #100	; 0x64
 80003d8:	fb02 f303 	mul.w	r3, r2, r3
 80003dc:	4618      	mov	r0, r3
 80003de:	f000 fe89 	bl	80010f4 <changetimer1>
		break;
 80003e2:	e011      	b.n	8000408 <settimerforchedo+0x50>
		changetimer2(timerupdate*100);
 80003e4:	4b0a      	ldr	r3, [pc, #40]	; (8000410 <settimerforchedo+0x58>)
 80003e6:	681b      	ldr	r3, [r3, #0]
 80003e8:	2264      	movs	r2, #100	; 0x64
 80003ea:	fb02 f303 	mul.w	r3, r2, r3
 80003ee:	4618      	mov	r0, r3
 80003f0:	f000 fe8e 	bl	8001110 <changetimer2>
		break;
 80003f4:	e008      	b.n	8000408 <settimerforchedo+0x50>
		changetimer3(timerupdate*100);
 80003f6:	4b06      	ldr	r3, [pc, #24]	; (8000410 <settimerforchedo+0x58>)
 80003f8:	681b      	ldr	r3, [r3, #0]
 80003fa:	2264      	movs	r2, #100	; 0x64
 80003fc:	fb02 f303 	mul.w	r3, r2, r3
 8000400:	4618      	mov	r0, r3
 8000402:	f000 fe93 	bl	800112c <changetimer3>
	default : break;
 8000406:	bf00      	nop
	}
}
 8000408:	bf00      	nop
 800040a:	bd80      	pop	{r7, pc}
 800040c:	20000018 	.word	0x20000018
 8000410:	2000001c 	.word	0x2000001c

08000414 <display_chedo>:

void display_chedo()
{
 8000414:	b580      	push	{r7, lr}
 8000416:	af00      	add	r7, sp, #0
	update7SEGb(counter);
 8000418:	4b0e      	ldr	r3, [pc, #56]	; (8000454 <display_chedo+0x40>)
 800041a:	681b      	ldr	r3, [r3, #0]
 800041c:	4618      	mov	r0, r3
 800041e:	f000 fac9 	bl	80009b4 <update7SEGb>
	display7SEGb(led[counter]);
 8000422:	4b0c      	ldr	r3, [pc, #48]	; (8000454 <display_chedo+0x40>)
 8000424:	681b      	ldr	r3, [r3, #0]
 8000426:	4a0c      	ldr	r2, [pc, #48]	; (8000458 <display_chedo+0x44>)
 8000428:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800042c:	4618      	mov	r0, r3
 800042e:	f000 faed 	bl	8000a0c <display7SEGb>
	if(counter==0)
 8000432:	4b08      	ldr	r3, [pc, #32]	; (8000454 <display_chedo+0x40>)
 8000434:	681b      	ldr	r3, [r3, #0]
 8000436:	2b00      	cmp	r3, #0
 8000438:	d103      	bne.n	8000442 <display_chedo+0x2e>
	{
		counter=1;
 800043a:	4b06      	ldr	r3, [pc, #24]	; (8000454 <display_chedo+0x40>)
 800043c:	2201      	movs	r2, #1
 800043e:	601a      	str	r2, [r3, #0]
	}
	else if(counter==1)
	{
		counter=0;
	}
}
 8000440:	e006      	b.n	8000450 <display_chedo+0x3c>
	else if(counter==1)
 8000442:	4b04      	ldr	r3, [pc, #16]	; (8000454 <display_chedo+0x40>)
 8000444:	681b      	ldr	r3, [r3, #0]
 8000446:	2b01      	cmp	r3, #1
 8000448:	d102      	bne.n	8000450 <display_chedo+0x3c>
		counter=0;
 800044a:	4b02      	ldr	r3, [pc, #8]	; (8000454 <display_chedo+0x40>)
 800044c:	2200      	movs	r2, #0
 800044e:	601a      	str	r2, [r3, #0]
}
 8000450:	bf00      	nop
 8000452:	bd80      	pop	{r7, pc}
 8000454:	20000084 	.word	0x20000084
 8000458:	20000088 	.word	0x20000088

0800045c <updateclockbuffer>:

void updateclockbuffer()
{
 800045c:	b480      	push	{r7}
 800045e:	af00      	add	r7, sp, #0
	led[0]=timerupdate/10;
 8000460:	4b0e      	ldr	r3, [pc, #56]	; (800049c <updateclockbuffer+0x40>)
 8000462:	681b      	ldr	r3, [r3, #0]
 8000464:	4a0e      	ldr	r2, [pc, #56]	; (80004a0 <updateclockbuffer+0x44>)
 8000466:	fb82 1203 	smull	r1, r2, r2, r3
 800046a:	1092      	asrs	r2, r2, #2
 800046c:	17db      	asrs	r3, r3, #31
 800046e:	1ad3      	subs	r3, r2, r3
 8000470:	4a0c      	ldr	r2, [pc, #48]	; (80004a4 <updateclockbuffer+0x48>)
 8000472:	6013      	str	r3, [r2, #0]
	led[1]=timerupdate%10;
 8000474:	4b09      	ldr	r3, [pc, #36]	; (800049c <updateclockbuffer+0x40>)
 8000476:	6819      	ldr	r1, [r3, #0]
 8000478:	4b09      	ldr	r3, [pc, #36]	; (80004a0 <updateclockbuffer+0x44>)
 800047a:	fb83 2301 	smull	r2, r3, r3, r1
 800047e:	109a      	asrs	r2, r3, #2
 8000480:	17cb      	asrs	r3, r1, #31
 8000482:	1ad2      	subs	r2, r2, r3
 8000484:	4613      	mov	r3, r2
 8000486:	009b      	lsls	r3, r3, #2
 8000488:	4413      	add	r3, r2
 800048a:	005b      	lsls	r3, r3, #1
 800048c:	1aca      	subs	r2, r1, r3
 800048e:	4b05      	ldr	r3, [pc, #20]	; (80004a4 <updateclockbuffer+0x48>)
 8000490:	605a      	str	r2, [r3, #4]
}
 8000492:	bf00      	nop
 8000494:	46bd      	mov	sp, r7
 8000496:	bc80      	pop	{r7}
 8000498:	4770      	bx	lr
 800049a:	bf00      	nop
 800049c:	2000001c 	.word	0x2000001c
 80004a0:	66666667 	.word	0x66666667
 80004a4:	20000088 	.word	0x20000088

080004a8 <getkeyinput2>:


void getkeyinput2()
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	af00      	add	r7, sp, #0
	keyreg20=keyreg21;
 80004ac:	4b2b      	ldr	r3, [pc, #172]	; (800055c <getkeyinput2+0xb4>)
 80004ae:	681b      	ldr	r3, [r3, #0]
 80004b0:	4a2b      	ldr	r2, [pc, #172]	; (8000560 <getkeyinput2+0xb8>)
 80004b2:	6013      	str	r3, [r2, #0]
	keyreg21=keyreg22;
 80004b4:	4b2b      	ldr	r3, [pc, #172]	; (8000564 <getkeyinput2+0xbc>)
 80004b6:	681b      	ldr	r3, [r3, #0]
 80004b8:	4a28      	ldr	r2, [pc, #160]	; (800055c <getkeyinput2+0xb4>)
 80004ba:	6013      	str	r3, [r2, #0]
	keyreg22=HAL_GPIO_ReadPin(button2_GPIO_Port, button2_Pin);
 80004bc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80004c0:	4829      	ldr	r0, [pc, #164]	; (8000568 <getkeyinput2+0xc0>)
 80004c2:	f001 fe73 	bl	80021ac <HAL_GPIO_ReadPin>
 80004c6:	4603      	mov	r3, r0
 80004c8:	461a      	mov	r2, r3
 80004ca:	4b26      	ldr	r3, [pc, #152]	; (8000564 <getkeyinput2+0xbc>)
 80004cc:	601a      	str	r2, [r3, #0]
	if((keyreg20==keyreg21)&&(keyreg21==keyreg22))
 80004ce:	4b24      	ldr	r3, [pc, #144]	; (8000560 <getkeyinput2+0xb8>)
 80004d0:	681a      	ldr	r2, [r3, #0]
 80004d2:	4b22      	ldr	r3, [pc, #136]	; (800055c <getkeyinput2+0xb4>)
 80004d4:	681b      	ldr	r3, [r3, #0]
 80004d6:	429a      	cmp	r2, r3
 80004d8:	d12f      	bne.n	800053a <getkeyinput2+0x92>
 80004da:	4b20      	ldr	r3, [pc, #128]	; (800055c <getkeyinput2+0xb4>)
 80004dc:	681a      	ldr	r2, [r3, #0]
 80004de:	4b21      	ldr	r3, [pc, #132]	; (8000564 <getkeyinput2+0xbc>)
 80004e0:	681b      	ldr	r3, [r3, #0]
 80004e2:	429a      	cmp	r2, r3
 80004e4:	d129      	bne.n	800053a <getkeyinput2+0x92>
	{
		if(keyreg23!=keyreg22)
 80004e6:	4b21      	ldr	r3, [pc, #132]	; (800056c <getkeyinput2+0xc4>)
 80004e8:	681a      	ldr	r2, [r3, #0]
 80004ea:	4b1e      	ldr	r3, [pc, #120]	; (8000564 <getkeyinput2+0xbc>)
 80004ec:	681b      	ldr	r3, [r3, #0]
 80004ee:	429a      	cmp	r2, r3
 80004f0:	d017      	beq.n	8000522 <getkeyinput2+0x7a>
		{
			keyreg23=keyreg22;
 80004f2:	4b1c      	ldr	r3, [pc, #112]	; (8000564 <getkeyinput2+0xbc>)
 80004f4:	681b      	ldr	r3, [r3, #0]
 80004f6:	4a1d      	ldr	r2, [pc, #116]	; (800056c <getkeyinput2+0xc4>)
 80004f8:	6013      	str	r3, [r2, #0]
			if(keyreg22==pressed_state)
 80004fa:	4b1a      	ldr	r3, [pc, #104]	; (8000564 <getkeyinput2+0xbc>)
 80004fc:	681b      	ldr	r3, [r3, #0]
 80004fe:	2b00      	cmp	r3, #0
 8000500:	d11b      	bne.n	800053a <getkeyinput2+0x92>
			{
				///TO DO
				timerupdate++;
 8000502:	4b1b      	ldr	r3, [pc, #108]	; (8000570 <getkeyinput2+0xc8>)
 8000504:	681b      	ldr	r3, [r3, #0]
 8000506:	3301      	adds	r3, #1
 8000508:	4a19      	ldr	r2, [pc, #100]	; (8000570 <getkeyinput2+0xc8>)
 800050a:	6013      	str	r3, [r2, #0]
				if(timerupdate>99){timerupdate=1;}
 800050c:	4b18      	ldr	r3, [pc, #96]	; (8000570 <getkeyinput2+0xc8>)
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	2b63      	cmp	r3, #99	; 0x63
 8000512:	dd02      	ble.n	800051a <getkeyinput2+0x72>
 8000514:	4b16      	ldr	r3, [pc, #88]	; (8000570 <getkeyinput2+0xc8>)
 8000516:	2201      	movs	r2, #1
 8000518:	601a      	str	r2, [r3, #0]
				timercountdown2=200;
 800051a:	4b16      	ldr	r3, [pc, #88]	; (8000574 <getkeyinput2+0xcc>)
 800051c:	22c8      	movs	r2, #200	; 0xc8
 800051e:	601a      	str	r2, [r3, #0]
 8000520:	e00b      	b.n	800053a <getkeyinput2+0x92>
			}
		}
		else
		{
			timercountdown2--;
 8000522:	4b14      	ldr	r3, [pc, #80]	; (8000574 <getkeyinput2+0xcc>)
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	3b01      	subs	r3, #1
 8000528:	4a12      	ldr	r2, [pc, #72]	; (8000574 <getkeyinput2+0xcc>)
 800052a:	6013      	str	r3, [r2, #0]
			if(timercountdown2==0)
 800052c:	4b11      	ldr	r3, [pc, #68]	; (8000574 <getkeyinput2+0xcc>)
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	2b00      	cmp	r3, #0
 8000532:	d102      	bne.n	800053a <getkeyinput2+0x92>
			{
				keyreg23=normal_state;
 8000534:	4b0d      	ldr	r3, [pc, #52]	; (800056c <getkeyinput2+0xc4>)
 8000536:	2201      	movs	r2, #1
 8000538:	601a      	str	r2, [r3, #0]
			}
		}
	}
	timerforled--;
 800053a:	4b0f      	ldr	r3, [pc, #60]	; (8000578 <getkeyinput2+0xd0>)
 800053c:	681b      	ldr	r3, [r3, #0]
 800053e:	3b01      	subs	r3, #1
 8000540:	4a0d      	ldr	r2, [pc, #52]	; (8000578 <getkeyinput2+0xd0>)
 8000542:	6013      	str	r3, [r2, #0]
	updateclockbuffer();
 8000544:	f7ff ff8a 	bl	800045c <updateclockbuffer>
	settimerforchedo();
 8000548:	f7ff ff36 	bl	80003b8 <settimerforchedo>
	if(timerforled==0)
 800054c:	4b0a      	ldr	r3, [pc, #40]	; (8000578 <getkeyinput2+0xd0>)
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	2b00      	cmp	r3, #0
 8000552:	d101      	bne.n	8000558 <getkeyinput2+0xb0>
	{
		display_chedo();
 8000554:	f7ff ff5e 	bl	8000414 <display_chedo>
	}

}
 8000558:	bf00      	nop
 800055a:	bd80      	pop	{r7, pc}
 800055c:	20000028 	.word	0x20000028
 8000560:	20000024 	.word	0x20000024
 8000564:	2000002c 	.word	0x2000002c
 8000568:	40011000 	.word	0x40011000
 800056c:	20000030 	.word	0x20000030
 8000570:	2000001c 	.word	0x2000001c
 8000574:	20000034 	.word	0x20000034
 8000578:	20000020 	.word	0x20000020

0800057c <is_button3_press>:
int timercountdown3 = 200;

int button3_flag=0;

int is_button3_press()
{
 800057c:	b480      	push	{r7}
 800057e:	af00      	add	r7, sp, #0
	if(button3_flag==1)
 8000580:	4b06      	ldr	r3, [pc, #24]	; (800059c <is_button3_press+0x20>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	2b01      	cmp	r3, #1
 8000586:	d104      	bne.n	8000592 <is_button3_press+0x16>
	{
		button3_flag=0;
 8000588:	4b04      	ldr	r3, [pc, #16]	; (800059c <is_button3_press+0x20>)
 800058a:	2200      	movs	r2, #0
 800058c:	601a      	str	r2, [r3, #0]
		return 1;
 800058e:	2301      	movs	r3, #1
 8000590:	e000      	b.n	8000594 <is_button3_press+0x18>
	}
	return 0;
 8000592:	2300      	movs	r3, #0
}
 8000594:	4618      	mov	r0, r3
 8000596:	46bd      	mov	sp, r7
 8000598:	bc80      	pop	{r7}
 800059a:	4770      	bx	lr
 800059c:	20000090 	.word	0x20000090

080005a0 <getkeyinput3>:

void getkeyinput3()
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	af00      	add	r7, sp, #0
	keyreg30=keyreg31;
 80005a4:	4b1f      	ldr	r3, [pc, #124]	; (8000624 <getkeyinput3+0x84>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	4a1f      	ldr	r2, [pc, #124]	; (8000628 <getkeyinput3+0x88>)
 80005aa:	6013      	str	r3, [r2, #0]
	keyreg31=keyreg32;
 80005ac:	4b1f      	ldr	r3, [pc, #124]	; (800062c <getkeyinput3+0x8c>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	4a1c      	ldr	r2, [pc, #112]	; (8000624 <getkeyinput3+0x84>)
 80005b2:	6013      	str	r3, [r2, #0]
	keyreg32=HAL_GPIO_ReadPin(button3_GPIO_Port, button3_Pin);
 80005b4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80005b8:	481d      	ldr	r0, [pc, #116]	; (8000630 <getkeyinput3+0x90>)
 80005ba:	f001 fdf7 	bl	80021ac <HAL_GPIO_ReadPin>
 80005be:	4603      	mov	r3, r0
 80005c0:	461a      	mov	r2, r3
 80005c2:	4b1a      	ldr	r3, [pc, #104]	; (800062c <getkeyinput3+0x8c>)
 80005c4:	601a      	str	r2, [r3, #0]
	if((keyreg30==keyreg31)&&(keyreg31==keyreg32))
 80005c6:	4b18      	ldr	r3, [pc, #96]	; (8000628 <getkeyinput3+0x88>)
 80005c8:	681a      	ldr	r2, [r3, #0]
 80005ca:	4b16      	ldr	r3, [pc, #88]	; (8000624 <getkeyinput3+0x84>)
 80005cc:	681b      	ldr	r3, [r3, #0]
 80005ce:	429a      	cmp	r2, r3
 80005d0:	d126      	bne.n	8000620 <getkeyinput3+0x80>
 80005d2:	4b14      	ldr	r3, [pc, #80]	; (8000624 <getkeyinput3+0x84>)
 80005d4:	681a      	ldr	r2, [r3, #0]
 80005d6:	4b15      	ldr	r3, [pc, #84]	; (800062c <getkeyinput3+0x8c>)
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	429a      	cmp	r2, r3
 80005dc:	d120      	bne.n	8000620 <getkeyinput3+0x80>
	{
		if(keyreg33!=keyreg32)
 80005de:	4b15      	ldr	r3, [pc, #84]	; (8000634 <getkeyinput3+0x94>)
 80005e0:	681a      	ldr	r2, [r3, #0]
 80005e2:	4b12      	ldr	r3, [pc, #72]	; (800062c <getkeyinput3+0x8c>)
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	429a      	cmp	r2, r3
 80005e8:	d00e      	beq.n	8000608 <getkeyinput3+0x68>
		{
			keyreg33=keyreg32;
 80005ea:	4b10      	ldr	r3, [pc, #64]	; (800062c <getkeyinput3+0x8c>)
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	4a11      	ldr	r2, [pc, #68]	; (8000634 <getkeyinput3+0x94>)
 80005f0:	6013      	str	r3, [r2, #0]
			if(keyreg32==pressed_state)
 80005f2:	4b0e      	ldr	r3, [pc, #56]	; (800062c <getkeyinput3+0x8c>)
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d112      	bne.n	8000620 <getkeyinput3+0x80>
			{
				///TO DO
				button3_flag=1;
 80005fa:	4b0f      	ldr	r3, [pc, #60]	; (8000638 <getkeyinput3+0x98>)
 80005fc:	2201      	movs	r2, #1
 80005fe:	601a      	str	r2, [r3, #0]
				timercountdown3=200;
 8000600:	4b0e      	ldr	r3, [pc, #56]	; (800063c <getkeyinput3+0x9c>)
 8000602:	22c8      	movs	r2, #200	; 0xc8
 8000604:	601a      	str	r2, [r3, #0]
			{
				keyreg33=normal_state;
			}
		}
	}
}
 8000606:	e00b      	b.n	8000620 <getkeyinput3+0x80>
			timercountdown3--;
 8000608:	4b0c      	ldr	r3, [pc, #48]	; (800063c <getkeyinput3+0x9c>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	3b01      	subs	r3, #1
 800060e:	4a0b      	ldr	r2, [pc, #44]	; (800063c <getkeyinput3+0x9c>)
 8000610:	6013      	str	r3, [r2, #0]
			if(timercountdown3==0)
 8000612:	4b0a      	ldr	r3, [pc, #40]	; (800063c <getkeyinput3+0x9c>)
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	2b00      	cmp	r3, #0
 8000618:	d102      	bne.n	8000620 <getkeyinput3+0x80>
				keyreg33=normal_state;
 800061a:	4b06      	ldr	r3, [pc, #24]	; (8000634 <getkeyinput3+0x94>)
 800061c:	2201      	movs	r2, #1
 800061e:	601a      	str	r2, [r3, #0]
}
 8000620:	bf00      	nop
 8000622:	bd80      	pop	{r7, pc}
 8000624:	2000003c 	.word	0x2000003c
 8000628:	20000038 	.word	0x20000038
 800062c:	20000040 	.word	0x20000040
 8000630:	40011000 	.word	0x40011000
 8000634:	20000044 	.word	0x20000044
 8000638:	20000090 	.word	0x20000090
 800063c:	20000048 	.word	0x20000048

08000640 <update7SEGa>:
 *      Author: tuann
 */
#include "display1.h"

 void update7SEGa ( int index )
  {
 8000640:	b580      	push	{r7, lr}
 8000642:	b082      	sub	sp, #8
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]
    switch ( index )
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	2b00      	cmp	r3, #0
 800064c:	d003      	beq.n	8000656 <update7SEGa+0x16>
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	2b01      	cmp	r3, #1
 8000652:	d00c      	beq.n	800066e <update7SEGa+0x2e>
        break ;
    case 1:
	    HAL_GPIO_WritePin(en0_GPIO_Port,en0_Pin, SET);
	    HAL_GPIO_WritePin(en1_GPIO_Port,en1_Pin, RESET);
        break ;
    default : break ;
 8000654:	e017      	b.n	8000686 <update7SEGa+0x46>
	    HAL_GPIO_WritePin(en0_GPIO_Port,en0_Pin, RESET);
 8000656:	2200      	movs	r2, #0
 8000658:	2180      	movs	r1, #128	; 0x80
 800065a:	480d      	ldr	r0, [pc, #52]	; (8000690 <update7SEGa+0x50>)
 800065c:	f001 fdbd 	bl	80021da <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(en1_GPIO_Port,en1_Pin, SET);
 8000660:	2201      	movs	r2, #1
 8000662:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000666:	480a      	ldr	r0, [pc, #40]	; (8000690 <update7SEGa+0x50>)
 8000668:	f001 fdb7 	bl	80021da <HAL_GPIO_WritePin>
        break ;
 800066c:	e00b      	b.n	8000686 <update7SEGa+0x46>
	    HAL_GPIO_WritePin(en0_GPIO_Port,en0_Pin, SET);
 800066e:	2201      	movs	r2, #1
 8000670:	2180      	movs	r1, #128	; 0x80
 8000672:	4807      	ldr	r0, [pc, #28]	; (8000690 <update7SEGa+0x50>)
 8000674:	f001 fdb1 	bl	80021da <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(en1_GPIO_Port,en1_Pin, RESET);
 8000678:	2200      	movs	r2, #0
 800067a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800067e:	4804      	ldr	r0, [pc, #16]	; (8000690 <update7SEGa+0x50>)
 8000680:	f001 fdab 	bl	80021da <HAL_GPIO_WritePin>
        break ;
 8000684:	bf00      	nop
    }
  }
 8000686:	bf00      	nop
 8000688:	3708      	adds	r7, #8
 800068a:	46bd      	mov	sp, r7
 800068c:	bd80      	pop	{r7, pc}
 800068e:	bf00      	nop
 8000690:	40010800 	.word	0x40010800

08000694 <display7SEGa>:

 void display7SEGa(int index)
  {
 8000694:	b580      	push	{r7, lr}
 8000696:	b082      	sub	sp, #8
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]
  	switch (index)
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	2b09      	cmp	r3, #9
 80006a0:	f200 8180 	bhi.w	80009a4 <display7SEGa+0x310>
 80006a4:	a201      	add	r2, pc, #4	; (adr r2, 80006ac <display7SEGa+0x18>)
 80006a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006aa:	bf00      	nop
 80006ac:	080006d5 	.word	0x080006d5
 80006b0:	0800071d 	.word	0x0800071d
 80006b4:	08000765 	.word	0x08000765
 80006b8:	080007ad 	.word	0x080007ad
 80006bc:	080007f5 	.word	0x080007f5
 80006c0:	0800083d 	.word	0x0800083d
 80006c4:	08000885 	.word	0x08000885
 80006c8:	080008cd 	.word	0x080008cd
 80006cc:	08000915 	.word	0x08000915
 80006d0:	0800095d 	.word	0x0800095d
  	{
  	case 0 :
  		HAL_GPIO_WritePin(chan1a_GPIO_Port,chan1a_Pin, RESET);
 80006d4:	2200      	movs	r2, #0
 80006d6:	2101      	movs	r1, #1
 80006d8:	48b5      	ldr	r0, [pc, #724]	; (80009b0 <display7SEGa+0x31c>)
 80006da:	f001 fd7e 	bl	80021da <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(chan1b_GPIO_Port,chan1b_Pin, RESET);
 80006de:	2200      	movs	r2, #0
 80006e0:	2102      	movs	r1, #2
 80006e2:	48b3      	ldr	r0, [pc, #716]	; (80009b0 <display7SEGa+0x31c>)
 80006e4:	f001 fd79 	bl	80021da <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(chan1c_GPIO_Port,chan1c_Pin, RESET);
 80006e8:	2200      	movs	r2, #0
 80006ea:	2104      	movs	r1, #4
 80006ec:	48b0      	ldr	r0, [pc, #704]	; (80009b0 <display7SEGa+0x31c>)
 80006ee:	f001 fd74 	bl	80021da <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(chan1d_GPIO_Port,chan1d_Pin, RESET);
 80006f2:	2200      	movs	r2, #0
 80006f4:	2108      	movs	r1, #8
 80006f6:	48ae      	ldr	r0, [pc, #696]	; (80009b0 <display7SEGa+0x31c>)
 80006f8:	f001 fd6f 	bl	80021da <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(chan1e_GPIO_Port,chan1e_Pin, RESET);
 80006fc:	2200      	movs	r2, #0
 80006fe:	2110      	movs	r1, #16
 8000700:	48ab      	ldr	r0, [pc, #684]	; (80009b0 <display7SEGa+0x31c>)
 8000702:	f001 fd6a 	bl	80021da <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(chan1f_GPIO_Port,chan1f_Pin, RESET);
 8000706:	2200      	movs	r2, #0
 8000708:	2120      	movs	r1, #32
 800070a:	48a9      	ldr	r0, [pc, #676]	; (80009b0 <display7SEGa+0x31c>)
 800070c:	f001 fd65 	bl	80021da <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(chan1g_GPIO_Port,chan1g_Pin, SET);
 8000710:	2201      	movs	r2, #1
 8000712:	2140      	movs	r1, #64	; 0x40
 8000714:	48a6      	ldr	r0, [pc, #664]	; (80009b0 <display7SEGa+0x31c>)
 8000716:	f001 fd60 	bl	80021da <HAL_GPIO_WritePin>
  	    break ;
 800071a:	e144      	b.n	80009a6 <display7SEGa+0x312>
  	case 1 :
  		HAL_GPIO_WritePin(chan1a_GPIO_Port,chan1a_Pin, SET);
 800071c:	2201      	movs	r2, #1
 800071e:	2101      	movs	r1, #1
 8000720:	48a3      	ldr	r0, [pc, #652]	; (80009b0 <display7SEGa+0x31c>)
 8000722:	f001 fd5a 	bl	80021da <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(chan1b_GPIO_Port,chan1b_Pin, RESET);
 8000726:	2200      	movs	r2, #0
 8000728:	2102      	movs	r1, #2
 800072a:	48a1      	ldr	r0, [pc, #644]	; (80009b0 <display7SEGa+0x31c>)
 800072c:	f001 fd55 	bl	80021da <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(chan1c_GPIO_Port,chan1c_Pin, RESET);
 8000730:	2200      	movs	r2, #0
 8000732:	2104      	movs	r1, #4
 8000734:	489e      	ldr	r0, [pc, #632]	; (80009b0 <display7SEGa+0x31c>)
 8000736:	f001 fd50 	bl	80021da <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(chan1d_GPIO_Port,chan1d_Pin, SET);
 800073a:	2201      	movs	r2, #1
 800073c:	2108      	movs	r1, #8
 800073e:	489c      	ldr	r0, [pc, #624]	; (80009b0 <display7SEGa+0x31c>)
 8000740:	f001 fd4b 	bl	80021da <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(chan1e_GPIO_Port,chan1e_Pin, SET);
 8000744:	2201      	movs	r2, #1
 8000746:	2110      	movs	r1, #16
 8000748:	4899      	ldr	r0, [pc, #612]	; (80009b0 <display7SEGa+0x31c>)
 800074a:	f001 fd46 	bl	80021da <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(chan1f_GPIO_Port,chan1f_Pin, SET);
 800074e:	2201      	movs	r2, #1
 8000750:	2120      	movs	r1, #32
 8000752:	4897      	ldr	r0, [pc, #604]	; (80009b0 <display7SEGa+0x31c>)
 8000754:	f001 fd41 	bl	80021da <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(chan1g_GPIO_Port,chan1g_Pin, SET);
 8000758:	2201      	movs	r2, #1
 800075a:	2140      	movs	r1, #64	; 0x40
 800075c:	4894      	ldr	r0, [pc, #592]	; (80009b0 <display7SEGa+0x31c>)
 800075e:	f001 fd3c 	bl	80021da <HAL_GPIO_WritePin>
  	    break;
 8000762:	e120      	b.n	80009a6 <display7SEGa+0x312>
  	case 2 :
  		HAL_GPIO_WritePin(chan1a_GPIO_Port,chan1a_Pin, RESET);
 8000764:	2200      	movs	r2, #0
 8000766:	2101      	movs	r1, #1
 8000768:	4891      	ldr	r0, [pc, #580]	; (80009b0 <display7SEGa+0x31c>)
 800076a:	f001 fd36 	bl	80021da <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(chan1b_GPIO_Port,chan1b_Pin, RESET);
 800076e:	2200      	movs	r2, #0
 8000770:	2102      	movs	r1, #2
 8000772:	488f      	ldr	r0, [pc, #572]	; (80009b0 <display7SEGa+0x31c>)
 8000774:	f001 fd31 	bl	80021da <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(chan1c_GPIO_Port,chan1c_Pin, SET);
 8000778:	2201      	movs	r2, #1
 800077a:	2104      	movs	r1, #4
 800077c:	488c      	ldr	r0, [pc, #560]	; (80009b0 <display7SEGa+0x31c>)
 800077e:	f001 fd2c 	bl	80021da <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(chan1d_GPIO_Port,chan1d_Pin, RESET);
 8000782:	2200      	movs	r2, #0
 8000784:	2108      	movs	r1, #8
 8000786:	488a      	ldr	r0, [pc, #552]	; (80009b0 <display7SEGa+0x31c>)
 8000788:	f001 fd27 	bl	80021da <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(chan1e_GPIO_Port,chan1e_Pin, RESET);
 800078c:	2200      	movs	r2, #0
 800078e:	2110      	movs	r1, #16
 8000790:	4887      	ldr	r0, [pc, #540]	; (80009b0 <display7SEGa+0x31c>)
 8000792:	f001 fd22 	bl	80021da <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(chan1f_GPIO_Port,chan1f_Pin, SET);
 8000796:	2201      	movs	r2, #1
 8000798:	2120      	movs	r1, #32
 800079a:	4885      	ldr	r0, [pc, #532]	; (80009b0 <display7SEGa+0x31c>)
 800079c:	f001 fd1d 	bl	80021da <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(chan1g_GPIO_Port,chan1g_Pin, RESET);
 80007a0:	2200      	movs	r2, #0
 80007a2:	2140      	movs	r1, #64	; 0x40
 80007a4:	4882      	ldr	r0, [pc, #520]	; (80009b0 <display7SEGa+0x31c>)
 80007a6:	f001 fd18 	bl	80021da <HAL_GPIO_WritePin>
  	    break ;
 80007aa:	e0fc      	b.n	80009a6 <display7SEGa+0x312>
  	case 3 :
  		HAL_GPIO_WritePin(chan1a_GPIO_Port,chan1a_Pin, RESET);
 80007ac:	2200      	movs	r2, #0
 80007ae:	2101      	movs	r1, #1
 80007b0:	487f      	ldr	r0, [pc, #508]	; (80009b0 <display7SEGa+0x31c>)
 80007b2:	f001 fd12 	bl	80021da <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(chan1b_GPIO_Port,chan1b_Pin, RESET);
 80007b6:	2200      	movs	r2, #0
 80007b8:	2102      	movs	r1, #2
 80007ba:	487d      	ldr	r0, [pc, #500]	; (80009b0 <display7SEGa+0x31c>)
 80007bc:	f001 fd0d 	bl	80021da <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(chan1c_GPIO_Port,chan1c_Pin, RESET);
 80007c0:	2200      	movs	r2, #0
 80007c2:	2104      	movs	r1, #4
 80007c4:	487a      	ldr	r0, [pc, #488]	; (80009b0 <display7SEGa+0x31c>)
 80007c6:	f001 fd08 	bl	80021da <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(chan1d_GPIO_Port,chan1d_Pin, RESET);
 80007ca:	2200      	movs	r2, #0
 80007cc:	2108      	movs	r1, #8
 80007ce:	4878      	ldr	r0, [pc, #480]	; (80009b0 <display7SEGa+0x31c>)
 80007d0:	f001 fd03 	bl	80021da <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(chan1e_GPIO_Port,chan1e_Pin, SET);
 80007d4:	2201      	movs	r2, #1
 80007d6:	2110      	movs	r1, #16
 80007d8:	4875      	ldr	r0, [pc, #468]	; (80009b0 <display7SEGa+0x31c>)
 80007da:	f001 fcfe 	bl	80021da <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(chan1f_GPIO_Port,chan1f_Pin, SET);
 80007de:	2201      	movs	r2, #1
 80007e0:	2120      	movs	r1, #32
 80007e2:	4873      	ldr	r0, [pc, #460]	; (80009b0 <display7SEGa+0x31c>)
 80007e4:	f001 fcf9 	bl	80021da <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(chan1g_GPIO_Port,chan1g_Pin, RESET);
 80007e8:	2200      	movs	r2, #0
 80007ea:	2140      	movs	r1, #64	; 0x40
 80007ec:	4870      	ldr	r0, [pc, #448]	; (80009b0 <display7SEGa+0x31c>)
 80007ee:	f001 fcf4 	bl	80021da <HAL_GPIO_WritePin>
  	    break ;
 80007f2:	e0d8      	b.n	80009a6 <display7SEGa+0x312>
  	case 4 :
  		HAL_GPIO_WritePin(chan1a_GPIO_Port,chan1a_Pin, SET);
 80007f4:	2201      	movs	r2, #1
 80007f6:	2101      	movs	r1, #1
 80007f8:	486d      	ldr	r0, [pc, #436]	; (80009b0 <display7SEGa+0x31c>)
 80007fa:	f001 fcee 	bl	80021da <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(chan1b_GPIO_Port,chan1b_Pin, RESET);
 80007fe:	2200      	movs	r2, #0
 8000800:	2102      	movs	r1, #2
 8000802:	486b      	ldr	r0, [pc, #428]	; (80009b0 <display7SEGa+0x31c>)
 8000804:	f001 fce9 	bl	80021da <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(chan1c_GPIO_Port,chan1c_Pin, RESET);
 8000808:	2200      	movs	r2, #0
 800080a:	2104      	movs	r1, #4
 800080c:	4868      	ldr	r0, [pc, #416]	; (80009b0 <display7SEGa+0x31c>)
 800080e:	f001 fce4 	bl	80021da <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(chan1d_GPIO_Port,chan1d_Pin, SET);
 8000812:	2201      	movs	r2, #1
 8000814:	2108      	movs	r1, #8
 8000816:	4866      	ldr	r0, [pc, #408]	; (80009b0 <display7SEGa+0x31c>)
 8000818:	f001 fcdf 	bl	80021da <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(chan1e_GPIO_Port,chan1e_Pin, SET);
 800081c:	2201      	movs	r2, #1
 800081e:	2110      	movs	r1, #16
 8000820:	4863      	ldr	r0, [pc, #396]	; (80009b0 <display7SEGa+0x31c>)
 8000822:	f001 fcda 	bl	80021da <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(chan1f_GPIO_Port,chan1f_Pin, RESET);
 8000826:	2200      	movs	r2, #0
 8000828:	2120      	movs	r1, #32
 800082a:	4861      	ldr	r0, [pc, #388]	; (80009b0 <display7SEGa+0x31c>)
 800082c:	f001 fcd5 	bl	80021da <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(chan1g_GPIO_Port,chan1g_Pin, RESET);
 8000830:	2200      	movs	r2, #0
 8000832:	2140      	movs	r1, #64	; 0x40
 8000834:	485e      	ldr	r0, [pc, #376]	; (80009b0 <display7SEGa+0x31c>)
 8000836:	f001 fcd0 	bl	80021da <HAL_GPIO_WritePin>
  		break ;
 800083a:	e0b4      	b.n	80009a6 <display7SEGa+0x312>
  	case 5 :
  		HAL_GPIO_WritePin(chan1a_GPIO_Port,chan1a_Pin, RESET);
 800083c:	2200      	movs	r2, #0
 800083e:	2101      	movs	r1, #1
 8000840:	485b      	ldr	r0, [pc, #364]	; (80009b0 <display7SEGa+0x31c>)
 8000842:	f001 fcca 	bl	80021da <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(chan1b_GPIO_Port,chan1b_Pin, SET);
 8000846:	2201      	movs	r2, #1
 8000848:	2102      	movs	r1, #2
 800084a:	4859      	ldr	r0, [pc, #356]	; (80009b0 <display7SEGa+0x31c>)
 800084c:	f001 fcc5 	bl	80021da <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(chan1c_GPIO_Port,chan1c_Pin, RESET);
 8000850:	2200      	movs	r2, #0
 8000852:	2104      	movs	r1, #4
 8000854:	4856      	ldr	r0, [pc, #344]	; (80009b0 <display7SEGa+0x31c>)
 8000856:	f001 fcc0 	bl	80021da <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(chan1d_GPIO_Port,chan1d_Pin, RESET);
 800085a:	2200      	movs	r2, #0
 800085c:	2108      	movs	r1, #8
 800085e:	4854      	ldr	r0, [pc, #336]	; (80009b0 <display7SEGa+0x31c>)
 8000860:	f001 fcbb 	bl	80021da <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(chan1e_GPIO_Port,chan1e_Pin, SET);
 8000864:	2201      	movs	r2, #1
 8000866:	2110      	movs	r1, #16
 8000868:	4851      	ldr	r0, [pc, #324]	; (80009b0 <display7SEGa+0x31c>)
 800086a:	f001 fcb6 	bl	80021da <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(chan1f_GPIO_Port,chan1f_Pin, RESET);
 800086e:	2200      	movs	r2, #0
 8000870:	2120      	movs	r1, #32
 8000872:	484f      	ldr	r0, [pc, #316]	; (80009b0 <display7SEGa+0x31c>)
 8000874:	f001 fcb1 	bl	80021da <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(chan1g_GPIO_Port,chan1g_Pin, RESET);
 8000878:	2200      	movs	r2, #0
 800087a:	2140      	movs	r1, #64	; 0x40
 800087c:	484c      	ldr	r0, [pc, #304]	; (80009b0 <display7SEGa+0x31c>)
 800087e:	f001 fcac 	bl	80021da <HAL_GPIO_WritePin>
  		break ;
 8000882:	e090      	b.n	80009a6 <display7SEGa+0x312>
  	case 6 :
  	  	HAL_GPIO_WritePin(chan1a_GPIO_Port,chan1a_Pin, RESET);
 8000884:	2200      	movs	r2, #0
 8000886:	2101      	movs	r1, #1
 8000888:	4849      	ldr	r0, [pc, #292]	; (80009b0 <display7SEGa+0x31c>)
 800088a:	f001 fca6 	bl	80021da <HAL_GPIO_WritePin>
  	  	HAL_GPIO_WritePin(chan1b_GPIO_Port,chan1b_Pin, SET);
 800088e:	2201      	movs	r2, #1
 8000890:	2102      	movs	r1, #2
 8000892:	4847      	ldr	r0, [pc, #284]	; (80009b0 <display7SEGa+0x31c>)
 8000894:	f001 fca1 	bl	80021da <HAL_GPIO_WritePin>
  	  	HAL_GPIO_WritePin(chan1c_GPIO_Port,chan1c_Pin, RESET);
 8000898:	2200      	movs	r2, #0
 800089a:	2104      	movs	r1, #4
 800089c:	4844      	ldr	r0, [pc, #272]	; (80009b0 <display7SEGa+0x31c>)
 800089e:	f001 fc9c 	bl	80021da <HAL_GPIO_WritePin>
  	  	HAL_GPIO_WritePin(chan1d_GPIO_Port,chan1d_Pin, RESET);
 80008a2:	2200      	movs	r2, #0
 80008a4:	2108      	movs	r1, #8
 80008a6:	4842      	ldr	r0, [pc, #264]	; (80009b0 <display7SEGa+0x31c>)
 80008a8:	f001 fc97 	bl	80021da <HAL_GPIO_WritePin>
  	  	HAL_GPIO_WritePin(chan1e_GPIO_Port,chan1e_Pin, RESET);
 80008ac:	2200      	movs	r2, #0
 80008ae:	2110      	movs	r1, #16
 80008b0:	483f      	ldr	r0, [pc, #252]	; (80009b0 <display7SEGa+0x31c>)
 80008b2:	f001 fc92 	bl	80021da <HAL_GPIO_WritePin>
  	  	HAL_GPIO_WritePin(chan1f_GPIO_Port,chan1f_Pin, RESET);
 80008b6:	2200      	movs	r2, #0
 80008b8:	2120      	movs	r1, #32
 80008ba:	483d      	ldr	r0, [pc, #244]	; (80009b0 <display7SEGa+0x31c>)
 80008bc:	f001 fc8d 	bl	80021da <HAL_GPIO_WritePin>
  	  	HAL_GPIO_WritePin(chan1g_GPIO_Port,chan1g_Pin, RESET);
 80008c0:	2200      	movs	r2, #0
 80008c2:	2140      	movs	r1, #64	; 0x40
 80008c4:	483a      	ldr	r0, [pc, #232]	; (80009b0 <display7SEGa+0x31c>)
 80008c6:	f001 fc88 	bl	80021da <HAL_GPIO_WritePin>
  	  	break ;
 80008ca:	e06c      	b.n	80009a6 <display7SEGa+0x312>
  	case 7 :
  	  	HAL_GPIO_WritePin(chan1a_GPIO_Port,chan1a_Pin, RESET);
 80008cc:	2200      	movs	r2, #0
 80008ce:	2101      	movs	r1, #1
 80008d0:	4837      	ldr	r0, [pc, #220]	; (80009b0 <display7SEGa+0x31c>)
 80008d2:	f001 fc82 	bl	80021da <HAL_GPIO_WritePin>
  	  	HAL_GPIO_WritePin(chan1b_GPIO_Port,chan1b_Pin, RESET);
 80008d6:	2200      	movs	r2, #0
 80008d8:	2102      	movs	r1, #2
 80008da:	4835      	ldr	r0, [pc, #212]	; (80009b0 <display7SEGa+0x31c>)
 80008dc:	f001 fc7d 	bl	80021da <HAL_GPIO_WritePin>
  	  	HAL_GPIO_WritePin(chan1c_GPIO_Port,chan1c_Pin, RESET);
 80008e0:	2200      	movs	r2, #0
 80008e2:	2104      	movs	r1, #4
 80008e4:	4832      	ldr	r0, [pc, #200]	; (80009b0 <display7SEGa+0x31c>)
 80008e6:	f001 fc78 	bl	80021da <HAL_GPIO_WritePin>
  	  	HAL_GPIO_WritePin(chan1d_GPIO_Port,chan1d_Pin, SET);
 80008ea:	2201      	movs	r2, #1
 80008ec:	2108      	movs	r1, #8
 80008ee:	4830      	ldr	r0, [pc, #192]	; (80009b0 <display7SEGa+0x31c>)
 80008f0:	f001 fc73 	bl	80021da <HAL_GPIO_WritePin>
  	  	HAL_GPIO_WritePin(chan1e_GPIO_Port,chan1e_Pin, SET);
 80008f4:	2201      	movs	r2, #1
 80008f6:	2110      	movs	r1, #16
 80008f8:	482d      	ldr	r0, [pc, #180]	; (80009b0 <display7SEGa+0x31c>)
 80008fa:	f001 fc6e 	bl	80021da <HAL_GPIO_WritePin>
  	  	HAL_GPIO_WritePin(chan1f_GPIO_Port,chan1f_Pin, SET);
 80008fe:	2201      	movs	r2, #1
 8000900:	2120      	movs	r1, #32
 8000902:	482b      	ldr	r0, [pc, #172]	; (80009b0 <display7SEGa+0x31c>)
 8000904:	f001 fc69 	bl	80021da <HAL_GPIO_WritePin>
  	  	HAL_GPIO_WritePin(chan1g_GPIO_Port,chan1g_Pin, SET);
 8000908:	2201      	movs	r2, #1
 800090a:	2140      	movs	r1, #64	; 0x40
 800090c:	4828      	ldr	r0, [pc, #160]	; (80009b0 <display7SEGa+0x31c>)
 800090e:	f001 fc64 	bl	80021da <HAL_GPIO_WritePin>
  	  	break ;
 8000912:	e048      	b.n	80009a6 <display7SEGa+0x312>
  	case 8 :
  	  	HAL_GPIO_WritePin(chan1a_GPIO_Port,chan1a_Pin, RESET);
 8000914:	2200      	movs	r2, #0
 8000916:	2101      	movs	r1, #1
 8000918:	4825      	ldr	r0, [pc, #148]	; (80009b0 <display7SEGa+0x31c>)
 800091a:	f001 fc5e 	bl	80021da <HAL_GPIO_WritePin>
  	  	HAL_GPIO_WritePin(chan1b_GPIO_Port,chan1b_Pin, RESET);
 800091e:	2200      	movs	r2, #0
 8000920:	2102      	movs	r1, #2
 8000922:	4823      	ldr	r0, [pc, #140]	; (80009b0 <display7SEGa+0x31c>)
 8000924:	f001 fc59 	bl	80021da <HAL_GPIO_WritePin>
  	  	HAL_GPIO_WritePin(chan1c_GPIO_Port,chan1c_Pin, RESET);
 8000928:	2200      	movs	r2, #0
 800092a:	2104      	movs	r1, #4
 800092c:	4820      	ldr	r0, [pc, #128]	; (80009b0 <display7SEGa+0x31c>)
 800092e:	f001 fc54 	bl	80021da <HAL_GPIO_WritePin>
  	  	HAL_GPIO_WritePin(chan1d_GPIO_Port,chan1d_Pin, RESET);
 8000932:	2200      	movs	r2, #0
 8000934:	2108      	movs	r1, #8
 8000936:	481e      	ldr	r0, [pc, #120]	; (80009b0 <display7SEGa+0x31c>)
 8000938:	f001 fc4f 	bl	80021da <HAL_GPIO_WritePin>
  	  	HAL_GPIO_WritePin(chan1e_GPIO_Port,chan1e_Pin, RESET);
 800093c:	2200      	movs	r2, #0
 800093e:	2110      	movs	r1, #16
 8000940:	481b      	ldr	r0, [pc, #108]	; (80009b0 <display7SEGa+0x31c>)
 8000942:	f001 fc4a 	bl	80021da <HAL_GPIO_WritePin>
  	  	HAL_GPIO_WritePin(chan1f_GPIO_Port,chan1f_Pin, RESET);
 8000946:	2200      	movs	r2, #0
 8000948:	2120      	movs	r1, #32
 800094a:	4819      	ldr	r0, [pc, #100]	; (80009b0 <display7SEGa+0x31c>)
 800094c:	f001 fc45 	bl	80021da <HAL_GPIO_WritePin>
  	  	HAL_GPIO_WritePin(chan1g_GPIO_Port,chan1g_Pin, RESET);
 8000950:	2200      	movs	r2, #0
 8000952:	2140      	movs	r1, #64	; 0x40
 8000954:	4816      	ldr	r0, [pc, #88]	; (80009b0 <display7SEGa+0x31c>)
 8000956:	f001 fc40 	bl	80021da <HAL_GPIO_WritePin>
  	  	break ;
 800095a:	e024      	b.n	80009a6 <display7SEGa+0x312>
  	case 9 :
  	  	HAL_GPIO_WritePin(chan1a_GPIO_Port,chan1a_Pin, RESET);
 800095c:	2200      	movs	r2, #0
 800095e:	2101      	movs	r1, #1
 8000960:	4813      	ldr	r0, [pc, #76]	; (80009b0 <display7SEGa+0x31c>)
 8000962:	f001 fc3a 	bl	80021da <HAL_GPIO_WritePin>
  	  	HAL_GPIO_WritePin(chan1b_GPIO_Port,chan1b_Pin, RESET);
 8000966:	2200      	movs	r2, #0
 8000968:	2102      	movs	r1, #2
 800096a:	4811      	ldr	r0, [pc, #68]	; (80009b0 <display7SEGa+0x31c>)
 800096c:	f001 fc35 	bl	80021da <HAL_GPIO_WritePin>
  	  	HAL_GPIO_WritePin(chan1c_GPIO_Port,chan1c_Pin, RESET);
 8000970:	2200      	movs	r2, #0
 8000972:	2104      	movs	r1, #4
 8000974:	480e      	ldr	r0, [pc, #56]	; (80009b0 <display7SEGa+0x31c>)
 8000976:	f001 fc30 	bl	80021da <HAL_GPIO_WritePin>
  	  	HAL_GPIO_WritePin(chan1d_GPIO_Port,chan1d_Pin, RESET);
 800097a:	2200      	movs	r2, #0
 800097c:	2108      	movs	r1, #8
 800097e:	480c      	ldr	r0, [pc, #48]	; (80009b0 <display7SEGa+0x31c>)
 8000980:	f001 fc2b 	bl	80021da <HAL_GPIO_WritePin>
  	  	HAL_GPIO_WritePin(chan1e_GPIO_Port,chan1e_Pin, SET);
 8000984:	2201      	movs	r2, #1
 8000986:	2110      	movs	r1, #16
 8000988:	4809      	ldr	r0, [pc, #36]	; (80009b0 <display7SEGa+0x31c>)
 800098a:	f001 fc26 	bl	80021da <HAL_GPIO_WritePin>
  	  	HAL_GPIO_WritePin(chan1f_GPIO_Port,chan1f_Pin, RESET);
 800098e:	2200      	movs	r2, #0
 8000990:	2120      	movs	r1, #32
 8000992:	4807      	ldr	r0, [pc, #28]	; (80009b0 <display7SEGa+0x31c>)
 8000994:	f001 fc21 	bl	80021da <HAL_GPIO_WritePin>
  	  	HAL_GPIO_WritePin(chan1g_GPIO_Port,chan1g_Pin, RESET);
 8000998:	2200      	movs	r2, #0
 800099a:	2140      	movs	r1, #64	; 0x40
 800099c:	4804      	ldr	r0, [pc, #16]	; (80009b0 <display7SEGa+0x31c>)
 800099e:	f001 fc1c 	bl	80021da <HAL_GPIO_WritePin>
  	  	break ;
 80009a2:	e000      	b.n	80009a6 <display7SEGa+0x312>
  	default : break;
 80009a4:	bf00      	nop
  	}
  }
 80009a6:	bf00      	nop
 80009a8:	3708      	adds	r7, #8
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	bf00      	nop
 80009b0:	40010c00 	.word	0x40010c00

080009b4 <update7SEGb>:
 */

#include "display2.h"

 void update7SEGb ( int index )
  {
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b082      	sub	sp, #8
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
    switch ( index )
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d003      	beq.n	80009ca <update7SEGb+0x16>
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	2b01      	cmp	r3, #1
 80009c6:	d00d      	beq.n	80009e4 <update7SEGb+0x30>
        break ;
    case 1:
	    HAL_GPIO_WritePin(en2_GPIO_Port,en2_Pin, SET);
	    HAL_GPIO_WritePin(en3_GPIO_Port,en3_Pin, RESET);
        break ;
    default : break ;
 80009c8:	e019      	b.n	80009fe <update7SEGb+0x4a>
	    HAL_GPIO_WritePin(en2_GPIO_Port,en2_Pin, RESET);
 80009ca:	2200      	movs	r2, #0
 80009cc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009d0:	480d      	ldr	r0, [pc, #52]	; (8000a08 <update7SEGb+0x54>)
 80009d2:	f001 fc02 	bl	80021da <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(en3_GPIO_Port,en3_Pin, SET);
 80009d6:	2201      	movs	r2, #1
 80009d8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009dc:	480a      	ldr	r0, [pc, #40]	; (8000a08 <update7SEGb+0x54>)
 80009de:	f001 fbfc 	bl	80021da <HAL_GPIO_WritePin>
        break ;
 80009e2:	e00c      	b.n	80009fe <update7SEGb+0x4a>
	    HAL_GPIO_WritePin(en2_GPIO_Port,en2_Pin, SET);
 80009e4:	2201      	movs	r2, #1
 80009e6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009ea:	4807      	ldr	r0, [pc, #28]	; (8000a08 <update7SEGb+0x54>)
 80009ec:	f001 fbf5 	bl	80021da <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(en3_GPIO_Port,en3_Pin, RESET);
 80009f0:	2200      	movs	r2, #0
 80009f2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009f6:	4804      	ldr	r0, [pc, #16]	; (8000a08 <update7SEGb+0x54>)
 80009f8:	f001 fbef 	bl	80021da <HAL_GPIO_WritePin>
        break ;
 80009fc:	bf00      	nop
    }
  }
 80009fe:	bf00      	nop
 8000a00:	3708      	adds	r7, #8
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	40010800 	.word	0x40010800

08000a0c <display7SEGb>:


void display7SEGb(int index)
   {
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b082      	sub	sp, #8
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
   	switch (index)
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	2b09      	cmp	r3, #9
 8000a18:	f200 81bc 	bhi.w	8000d94 <display7SEGb+0x388>
 8000a1c:	a201      	add	r2, pc, #4	; (adr r2, 8000a24 <display7SEGb+0x18>)
 8000a1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a22:	bf00      	nop
 8000a24:	08000a4d 	.word	0x08000a4d
 8000a28:	08000aa1 	.word	0x08000aa1
 8000a2c:	08000af5 	.word	0x08000af5
 8000a30:	08000b49 	.word	0x08000b49
 8000a34:	08000b9d 	.word	0x08000b9d
 8000a38:	08000bf1 	.word	0x08000bf1
 8000a3c:	08000c45 	.word	0x08000c45
 8000a40:	08000c99 	.word	0x08000c99
 8000a44:	08000ced 	.word	0x08000ced
 8000a48:	08000d41 	.word	0x08000d41
   	{
   	case 0 :
   		HAL_GPIO_WritePin(chan2a_GPIO_Port,chan2a_Pin, RESET);
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	2180      	movs	r1, #128	; 0x80
 8000a50:	48d3      	ldr	r0, [pc, #844]	; (8000da0 <display7SEGb+0x394>)
 8000a52:	f001 fbc2 	bl	80021da <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(chan2b_GPIO_Port,chan2b_Pin, RESET);
 8000a56:	2200      	movs	r2, #0
 8000a58:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a5c:	48d0      	ldr	r0, [pc, #832]	; (8000da0 <display7SEGb+0x394>)
 8000a5e:	f001 fbbc 	bl	80021da <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(chan2c_GPIO_Port,chan2c_Pin, RESET);
 8000a62:	2200      	movs	r2, #0
 8000a64:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a68:	48cd      	ldr	r0, [pc, #820]	; (8000da0 <display7SEGb+0x394>)
 8000a6a:	f001 fbb6 	bl	80021da <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(chan2d_GPIO_Port,chan2d_Pin, RESET);
 8000a6e:	2200      	movs	r2, #0
 8000a70:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a74:	48ca      	ldr	r0, [pc, #808]	; (8000da0 <display7SEGb+0x394>)
 8000a76:	f001 fbb0 	bl	80021da <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(chan2e_GPIO_Port,chan2e_Pin, RESET);
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a80:	48c7      	ldr	r0, [pc, #796]	; (8000da0 <display7SEGb+0x394>)
 8000a82:	f001 fbaa 	bl	80021da <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(chan2f_GPIO_Port,chan2f_Pin, RESET);
 8000a86:	2200      	movs	r2, #0
 8000a88:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a8c:	48c4      	ldr	r0, [pc, #784]	; (8000da0 <display7SEGb+0x394>)
 8000a8e:	f001 fba4 	bl	80021da <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(chan2g_GPIO_Port,chan2g_Pin, SET);
 8000a92:	2201      	movs	r2, #1
 8000a94:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a98:	48c1      	ldr	r0, [pc, #772]	; (8000da0 <display7SEGb+0x394>)
 8000a9a:	f001 fb9e 	bl	80021da <HAL_GPIO_WritePin>
   	    break ;
 8000a9e:	e17a      	b.n	8000d96 <display7SEGb+0x38a>
   	case 1 :
   		HAL_GPIO_WritePin(chan2a_GPIO_Port,chan2a_Pin, SET);
 8000aa0:	2201      	movs	r2, #1
 8000aa2:	2180      	movs	r1, #128	; 0x80
 8000aa4:	48be      	ldr	r0, [pc, #760]	; (8000da0 <display7SEGb+0x394>)
 8000aa6:	f001 fb98 	bl	80021da <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(chan2b_GPIO_Port,chan2b_Pin, RESET);
 8000aaa:	2200      	movs	r2, #0
 8000aac:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ab0:	48bb      	ldr	r0, [pc, #748]	; (8000da0 <display7SEGb+0x394>)
 8000ab2:	f001 fb92 	bl	80021da <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(chan2c_GPIO_Port,chan2c_Pin, RESET);
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000abc:	48b8      	ldr	r0, [pc, #736]	; (8000da0 <display7SEGb+0x394>)
 8000abe:	f001 fb8c 	bl	80021da <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(chan2d_GPIO_Port,chan2d_Pin, SET);
 8000ac2:	2201      	movs	r2, #1
 8000ac4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ac8:	48b5      	ldr	r0, [pc, #724]	; (8000da0 <display7SEGb+0x394>)
 8000aca:	f001 fb86 	bl	80021da <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(chan2e_GPIO_Port,chan2e_Pin, SET);
 8000ace:	2201      	movs	r2, #1
 8000ad0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ad4:	48b2      	ldr	r0, [pc, #712]	; (8000da0 <display7SEGb+0x394>)
 8000ad6:	f001 fb80 	bl	80021da <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(chan2f_GPIO_Port,chan2f_Pin, SET);
 8000ada:	2201      	movs	r2, #1
 8000adc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ae0:	48af      	ldr	r0, [pc, #700]	; (8000da0 <display7SEGb+0x394>)
 8000ae2:	f001 fb7a 	bl	80021da <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(chan2g_GPIO_Port,chan2g_Pin, SET);
 8000ae6:	2201      	movs	r2, #1
 8000ae8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000aec:	48ac      	ldr	r0, [pc, #688]	; (8000da0 <display7SEGb+0x394>)
 8000aee:	f001 fb74 	bl	80021da <HAL_GPIO_WritePin>
   	    break;
 8000af2:	e150      	b.n	8000d96 <display7SEGb+0x38a>
   	case 2 :
   		HAL_GPIO_WritePin(chan2a_GPIO_Port,chan2a_Pin, RESET);
 8000af4:	2200      	movs	r2, #0
 8000af6:	2180      	movs	r1, #128	; 0x80
 8000af8:	48a9      	ldr	r0, [pc, #676]	; (8000da0 <display7SEGb+0x394>)
 8000afa:	f001 fb6e 	bl	80021da <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(chan2b_GPIO_Port,chan2b_Pin, RESET);
 8000afe:	2200      	movs	r2, #0
 8000b00:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b04:	48a6      	ldr	r0, [pc, #664]	; (8000da0 <display7SEGb+0x394>)
 8000b06:	f001 fb68 	bl	80021da <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(chan2c_GPIO_Port,chan2c_Pin, SET);
 8000b0a:	2201      	movs	r2, #1
 8000b0c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b10:	48a3      	ldr	r0, [pc, #652]	; (8000da0 <display7SEGb+0x394>)
 8000b12:	f001 fb62 	bl	80021da <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(chan2d_GPIO_Port,chan2d_Pin, RESET);
 8000b16:	2200      	movs	r2, #0
 8000b18:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b1c:	48a0      	ldr	r0, [pc, #640]	; (8000da0 <display7SEGb+0x394>)
 8000b1e:	f001 fb5c 	bl	80021da <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(chan2e_GPIO_Port,chan2e_Pin, RESET);
 8000b22:	2200      	movs	r2, #0
 8000b24:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b28:	489d      	ldr	r0, [pc, #628]	; (8000da0 <display7SEGb+0x394>)
 8000b2a:	f001 fb56 	bl	80021da <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(chan2f_GPIO_Port,chan2f_Pin, SET);
 8000b2e:	2201      	movs	r2, #1
 8000b30:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b34:	489a      	ldr	r0, [pc, #616]	; (8000da0 <display7SEGb+0x394>)
 8000b36:	f001 fb50 	bl	80021da <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(chan2g_GPIO_Port,chan2g_Pin, RESET);
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b40:	4897      	ldr	r0, [pc, #604]	; (8000da0 <display7SEGb+0x394>)
 8000b42:	f001 fb4a 	bl	80021da <HAL_GPIO_WritePin>
   	    break ;
 8000b46:	e126      	b.n	8000d96 <display7SEGb+0x38a>
   	case 3 :
   		HAL_GPIO_WritePin(chan2a_GPIO_Port,chan2a_Pin, RESET);
 8000b48:	2200      	movs	r2, #0
 8000b4a:	2180      	movs	r1, #128	; 0x80
 8000b4c:	4894      	ldr	r0, [pc, #592]	; (8000da0 <display7SEGb+0x394>)
 8000b4e:	f001 fb44 	bl	80021da <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(chan2b_GPIO_Port,chan2b_Pin, RESET);
 8000b52:	2200      	movs	r2, #0
 8000b54:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b58:	4891      	ldr	r0, [pc, #580]	; (8000da0 <display7SEGb+0x394>)
 8000b5a:	f001 fb3e 	bl	80021da <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(chan2c_GPIO_Port,chan2c_Pin, RESET);
 8000b5e:	2200      	movs	r2, #0
 8000b60:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b64:	488e      	ldr	r0, [pc, #568]	; (8000da0 <display7SEGb+0x394>)
 8000b66:	f001 fb38 	bl	80021da <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(chan2d_GPIO_Port,chan2d_Pin, RESET);
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b70:	488b      	ldr	r0, [pc, #556]	; (8000da0 <display7SEGb+0x394>)
 8000b72:	f001 fb32 	bl	80021da <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(chan2e_GPIO_Port,chan2e_Pin, SET);
 8000b76:	2201      	movs	r2, #1
 8000b78:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b7c:	4888      	ldr	r0, [pc, #544]	; (8000da0 <display7SEGb+0x394>)
 8000b7e:	f001 fb2c 	bl	80021da <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(chan2f_GPIO_Port,chan2f_Pin, SET);
 8000b82:	2201      	movs	r2, #1
 8000b84:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b88:	4885      	ldr	r0, [pc, #532]	; (8000da0 <display7SEGb+0x394>)
 8000b8a:	f001 fb26 	bl	80021da <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(chan2g_GPIO_Port,chan2g_Pin, RESET);
 8000b8e:	2200      	movs	r2, #0
 8000b90:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b94:	4882      	ldr	r0, [pc, #520]	; (8000da0 <display7SEGb+0x394>)
 8000b96:	f001 fb20 	bl	80021da <HAL_GPIO_WritePin>
   	    break ;
 8000b9a:	e0fc      	b.n	8000d96 <display7SEGb+0x38a>
   	case 4 :
   		HAL_GPIO_WritePin(chan2a_GPIO_Port,chan2a_Pin, SET);
 8000b9c:	2201      	movs	r2, #1
 8000b9e:	2180      	movs	r1, #128	; 0x80
 8000ba0:	487f      	ldr	r0, [pc, #508]	; (8000da0 <display7SEGb+0x394>)
 8000ba2:	f001 fb1a 	bl	80021da <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(chan2b_GPIO_Port,chan2b_Pin, RESET);
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000bac:	487c      	ldr	r0, [pc, #496]	; (8000da0 <display7SEGb+0x394>)
 8000bae:	f001 fb14 	bl	80021da <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(chan2c_GPIO_Port,chan2c_Pin, RESET);
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000bb8:	4879      	ldr	r0, [pc, #484]	; (8000da0 <display7SEGb+0x394>)
 8000bba:	f001 fb0e 	bl	80021da <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(chan2d_GPIO_Port,chan2d_Pin, SET);
 8000bbe:	2201      	movs	r2, #1
 8000bc0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000bc4:	4876      	ldr	r0, [pc, #472]	; (8000da0 <display7SEGb+0x394>)
 8000bc6:	f001 fb08 	bl	80021da <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(chan2e_GPIO_Port,chan2e_Pin, SET);
 8000bca:	2201      	movs	r2, #1
 8000bcc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000bd0:	4873      	ldr	r0, [pc, #460]	; (8000da0 <display7SEGb+0x394>)
 8000bd2:	f001 fb02 	bl	80021da <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(chan2f_GPIO_Port,chan2f_Pin, RESET);
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000bdc:	4870      	ldr	r0, [pc, #448]	; (8000da0 <display7SEGb+0x394>)
 8000bde:	f001 fafc 	bl	80021da <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(chan2g_GPIO_Port,chan2g_Pin, RESET);
 8000be2:	2200      	movs	r2, #0
 8000be4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000be8:	486d      	ldr	r0, [pc, #436]	; (8000da0 <display7SEGb+0x394>)
 8000bea:	f001 faf6 	bl	80021da <HAL_GPIO_WritePin>
   		break ;
 8000bee:	e0d2      	b.n	8000d96 <display7SEGb+0x38a>
   	case 5 :
   		HAL_GPIO_WritePin(chan2a_GPIO_Port,chan2a_Pin, RESET);
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	2180      	movs	r1, #128	; 0x80
 8000bf4:	486a      	ldr	r0, [pc, #424]	; (8000da0 <display7SEGb+0x394>)
 8000bf6:	f001 faf0 	bl	80021da <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(chan2b_GPIO_Port,chan2b_Pin, SET);
 8000bfa:	2201      	movs	r2, #1
 8000bfc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c00:	4867      	ldr	r0, [pc, #412]	; (8000da0 <display7SEGb+0x394>)
 8000c02:	f001 faea 	bl	80021da <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(chan2c_GPIO_Port,chan2c_Pin, RESET);
 8000c06:	2200      	movs	r2, #0
 8000c08:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c0c:	4864      	ldr	r0, [pc, #400]	; (8000da0 <display7SEGb+0x394>)
 8000c0e:	f001 fae4 	bl	80021da <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(chan2d_GPIO_Port,chan2d_Pin, RESET);
 8000c12:	2200      	movs	r2, #0
 8000c14:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c18:	4861      	ldr	r0, [pc, #388]	; (8000da0 <display7SEGb+0x394>)
 8000c1a:	f001 fade 	bl	80021da <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(chan2e_GPIO_Port,chan2e_Pin, SET);
 8000c1e:	2201      	movs	r2, #1
 8000c20:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c24:	485e      	ldr	r0, [pc, #376]	; (8000da0 <display7SEGb+0x394>)
 8000c26:	f001 fad8 	bl	80021da <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(chan2f_GPIO_Port,chan2f_Pin, RESET);
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c30:	485b      	ldr	r0, [pc, #364]	; (8000da0 <display7SEGb+0x394>)
 8000c32:	f001 fad2 	bl	80021da <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(chan2g_GPIO_Port,chan2g_Pin, RESET);
 8000c36:	2200      	movs	r2, #0
 8000c38:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c3c:	4858      	ldr	r0, [pc, #352]	; (8000da0 <display7SEGb+0x394>)
 8000c3e:	f001 facc 	bl	80021da <HAL_GPIO_WritePin>
   		break ;
 8000c42:	e0a8      	b.n	8000d96 <display7SEGb+0x38a>
   	case 6 :
   	   	HAL_GPIO_WritePin(chan2a_GPIO_Port,chan2a_Pin, RESET);
 8000c44:	2200      	movs	r2, #0
 8000c46:	2180      	movs	r1, #128	; 0x80
 8000c48:	4855      	ldr	r0, [pc, #340]	; (8000da0 <display7SEGb+0x394>)
 8000c4a:	f001 fac6 	bl	80021da <HAL_GPIO_WritePin>
   	   	HAL_GPIO_WritePin(chan2b_GPIO_Port,chan2b_Pin, SET);
 8000c4e:	2201      	movs	r2, #1
 8000c50:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c54:	4852      	ldr	r0, [pc, #328]	; (8000da0 <display7SEGb+0x394>)
 8000c56:	f001 fac0 	bl	80021da <HAL_GPIO_WritePin>
   	   	HAL_GPIO_WritePin(chan2c_GPIO_Port,chan2c_Pin, RESET);
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c60:	484f      	ldr	r0, [pc, #316]	; (8000da0 <display7SEGb+0x394>)
 8000c62:	f001 faba 	bl	80021da <HAL_GPIO_WritePin>
   	   	HAL_GPIO_WritePin(chan2d_GPIO_Port,chan2d_Pin, RESET);
 8000c66:	2200      	movs	r2, #0
 8000c68:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c6c:	484c      	ldr	r0, [pc, #304]	; (8000da0 <display7SEGb+0x394>)
 8000c6e:	f001 fab4 	bl	80021da <HAL_GPIO_WritePin>
   	   	HAL_GPIO_WritePin(chan2e_GPIO_Port,chan2e_Pin, RESET);
 8000c72:	2200      	movs	r2, #0
 8000c74:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c78:	4849      	ldr	r0, [pc, #292]	; (8000da0 <display7SEGb+0x394>)
 8000c7a:	f001 faae 	bl	80021da <HAL_GPIO_WritePin>
   	   	HAL_GPIO_WritePin(chan2f_GPIO_Port,chan2f_Pin, RESET);
 8000c7e:	2200      	movs	r2, #0
 8000c80:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c84:	4846      	ldr	r0, [pc, #280]	; (8000da0 <display7SEGb+0x394>)
 8000c86:	f001 faa8 	bl	80021da <HAL_GPIO_WritePin>
   	   	HAL_GPIO_WritePin(chan2g_GPIO_Port,chan2g_Pin, RESET);
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c90:	4843      	ldr	r0, [pc, #268]	; (8000da0 <display7SEGb+0x394>)
 8000c92:	f001 faa2 	bl	80021da <HAL_GPIO_WritePin>
   	   	break;
 8000c96:	e07e      	b.n	8000d96 <display7SEGb+0x38a>
   	case 7 :
   	   	HAL_GPIO_WritePin(chan2a_GPIO_Port,chan2a_Pin, RESET);
 8000c98:	2200      	movs	r2, #0
 8000c9a:	2180      	movs	r1, #128	; 0x80
 8000c9c:	4840      	ldr	r0, [pc, #256]	; (8000da0 <display7SEGb+0x394>)
 8000c9e:	f001 fa9c 	bl	80021da <HAL_GPIO_WritePin>
   	   	HAL_GPIO_WritePin(chan2b_GPIO_Port,chan2b_Pin, RESET);
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ca8:	483d      	ldr	r0, [pc, #244]	; (8000da0 <display7SEGb+0x394>)
 8000caa:	f001 fa96 	bl	80021da <HAL_GPIO_WritePin>
   	   	HAL_GPIO_WritePin(chan2c_GPIO_Port,chan2c_Pin, RESET);
 8000cae:	2200      	movs	r2, #0
 8000cb0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000cb4:	483a      	ldr	r0, [pc, #232]	; (8000da0 <display7SEGb+0x394>)
 8000cb6:	f001 fa90 	bl	80021da <HAL_GPIO_WritePin>
   	   	HAL_GPIO_WritePin(chan2d_GPIO_Port,chan2d_Pin, SET);
 8000cba:	2201      	movs	r2, #1
 8000cbc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000cc0:	4837      	ldr	r0, [pc, #220]	; (8000da0 <display7SEGb+0x394>)
 8000cc2:	f001 fa8a 	bl	80021da <HAL_GPIO_WritePin>
   	   	HAL_GPIO_WritePin(chan2e_GPIO_Port,chan2e_Pin, SET);
 8000cc6:	2201      	movs	r2, #1
 8000cc8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ccc:	4834      	ldr	r0, [pc, #208]	; (8000da0 <display7SEGb+0x394>)
 8000cce:	f001 fa84 	bl	80021da <HAL_GPIO_WritePin>
   	   	HAL_GPIO_WritePin(chan2f_GPIO_Port,chan2f_Pin, SET);
 8000cd2:	2201      	movs	r2, #1
 8000cd4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000cd8:	4831      	ldr	r0, [pc, #196]	; (8000da0 <display7SEGb+0x394>)
 8000cda:	f001 fa7e 	bl	80021da <HAL_GPIO_WritePin>
   	   	HAL_GPIO_WritePin(chan2g_GPIO_Port,chan2g_Pin, SET);
 8000cde:	2201      	movs	r2, #1
 8000ce0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ce4:	482e      	ldr	r0, [pc, #184]	; (8000da0 <display7SEGb+0x394>)
 8000ce6:	f001 fa78 	bl	80021da <HAL_GPIO_WritePin>
   	   	break;
 8000cea:	e054      	b.n	8000d96 <display7SEGb+0x38a>
   	case 8 :
   	   	HAL_GPIO_WritePin(chan2a_GPIO_Port,chan2a_Pin, RESET);
 8000cec:	2200      	movs	r2, #0
 8000cee:	2180      	movs	r1, #128	; 0x80
 8000cf0:	482b      	ldr	r0, [pc, #172]	; (8000da0 <display7SEGb+0x394>)
 8000cf2:	f001 fa72 	bl	80021da <HAL_GPIO_WritePin>
   	   	HAL_GPIO_WritePin(chan2b_GPIO_Port,chan2b_Pin, RESET);
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000cfc:	4828      	ldr	r0, [pc, #160]	; (8000da0 <display7SEGb+0x394>)
 8000cfe:	f001 fa6c 	bl	80021da <HAL_GPIO_WritePin>
   	   	HAL_GPIO_WritePin(chan2c_GPIO_Port,chan2c_Pin, RESET);
 8000d02:	2200      	movs	r2, #0
 8000d04:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d08:	4825      	ldr	r0, [pc, #148]	; (8000da0 <display7SEGb+0x394>)
 8000d0a:	f001 fa66 	bl	80021da <HAL_GPIO_WritePin>
   	   	HAL_GPIO_WritePin(chan2d_GPIO_Port,chan2d_Pin, RESET);
 8000d0e:	2200      	movs	r2, #0
 8000d10:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d14:	4822      	ldr	r0, [pc, #136]	; (8000da0 <display7SEGb+0x394>)
 8000d16:	f001 fa60 	bl	80021da <HAL_GPIO_WritePin>
   	   	HAL_GPIO_WritePin(chan2e_GPIO_Port,chan2e_Pin, RESET);
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d20:	481f      	ldr	r0, [pc, #124]	; (8000da0 <display7SEGb+0x394>)
 8000d22:	f001 fa5a 	bl	80021da <HAL_GPIO_WritePin>
   	   	HAL_GPIO_WritePin(chan2f_GPIO_Port,chan2f_Pin, RESET);
 8000d26:	2200      	movs	r2, #0
 8000d28:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d2c:	481c      	ldr	r0, [pc, #112]	; (8000da0 <display7SEGb+0x394>)
 8000d2e:	f001 fa54 	bl	80021da <HAL_GPIO_WritePin>
   	   	HAL_GPIO_WritePin(chan2g_GPIO_Port,chan2g_Pin, RESET);
 8000d32:	2200      	movs	r2, #0
 8000d34:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d38:	4819      	ldr	r0, [pc, #100]	; (8000da0 <display7SEGb+0x394>)
 8000d3a:	f001 fa4e 	bl	80021da <HAL_GPIO_WritePin>
   	   	break;
 8000d3e:	e02a      	b.n	8000d96 <display7SEGb+0x38a>
   	case 9 :
   	   	HAL_GPIO_WritePin(chan2a_GPIO_Port,chan2a_Pin, RESET);
 8000d40:	2200      	movs	r2, #0
 8000d42:	2180      	movs	r1, #128	; 0x80
 8000d44:	4816      	ldr	r0, [pc, #88]	; (8000da0 <display7SEGb+0x394>)
 8000d46:	f001 fa48 	bl	80021da <HAL_GPIO_WritePin>
   	   	HAL_GPIO_WritePin(chan2b_GPIO_Port,chan2b_Pin, RESET);
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d50:	4813      	ldr	r0, [pc, #76]	; (8000da0 <display7SEGb+0x394>)
 8000d52:	f001 fa42 	bl	80021da <HAL_GPIO_WritePin>
   	   	HAL_GPIO_WritePin(chan2c_GPIO_Port,chan2c_Pin, RESET);
 8000d56:	2200      	movs	r2, #0
 8000d58:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d5c:	4810      	ldr	r0, [pc, #64]	; (8000da0 <display7SEGb+0x394>)
 8000d5e:	f001 fa3c 	bl	80021da <HAL_GPIO_WritePin>
   	   	HAL_GPIO_WritePin(chan2d_GPIO_Port,chan2d_Pin, RESET);
 8000d62:	2200      	movs	r2, #0
 8000d64:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d68:	480d      	ldr	r0, [pc, #52]	; (8000da0 <display7SEGb+0x394>)
 8000d6a:	f001 fa36 	bl	80021da <HAL_GPIO_WritePin>
   	   	HAL_GPIO_WritePin(chan2e_GPIO_Port,chan2e_Pin, SET);
 8000d6e:	2201      	movs	r2, #1
 8000d70:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d74:	480a      	ldr	r0, [pc, #40]	; (8000da0 <display7SEGb+0x394>)
 8000d76:	f001 fa30 	bl	80021da <HAL_GPIO_WritePin>
   	   	HAL_GPIO_WritePin(chan2f_GPIO_Port,chan2f_Pin, RESET);
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d80:	4807      	ldr	r0, [pc, #28]	; (8000da0 <display7SEGb+0x394>)
 8000d82:	f001 fa2a 	bl	80021da <HAL_GPIO_WritePin>
   	   	HAL_GPIO_WritePin(chan2g_GPIO_Port,chan2g_Pin, RESET);
 8000d86:	2200      	movs	r2, #0
 8000d88:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d8c:	4804      	ldr	r0, [pc, #16]	; (8000da0 <display7SEGb+0x394>)
 8000d8e:	f001 fa24 	bl	80021da <HAL_GPIO_WritePin>
   	   	break;
 8000d92:	e000      	b.n	8000d96 <display7SEGb+0x38a>
   	default : break;
 8000d94:	bf00      	nop
   	}
   }
 8000d96:	bf00      	nop
 8000d98:	3708      	adds	r7, #8
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	40010c00 	.word	0x40010c00

08000da4 <fsm_run1>:

int duration =0 ;
int duration2 =0 ;

void fsm_run1()
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	af00      	add	r7, sp, #0
	switch(status1)
 8000da8:	4b33      	ldr	r3, [pc, #204]	; (8000e78 <fsm_run1+0xd4>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	2b03      	cmp	r3, #3
 8000dae:	d85a      	bhi.n	8000e66 <fsm_run1+0xc2>
 8000db0:	a201      	add	r2, pc, #4	; (adr r2, 8000db8 <fsm_run1+0x14>)
 8000db2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000db6:	bf00      	nop
 8000db8:	08000dc9 	.word	0x08000dc9
 8000dbc:	08000de9 	.word	0x08000de9
 8000dc0:	08000e13 	.word	0x08000e13
 8000dc4:	08000e3d 	.word	0x08000e3d
	{
	case INIT :
		turn_off();
 8000dc8:	f000 f8e0 	bl	8000f8c <turn_off>
		status1=auto_red;
 8000dcc:	4b2a      	ldr	r3, [pc, #168]	; (8000e78 <fsm_run1+0xd4>)
 8000dce:	2201      	movs	r2, #1
 8000dd0:	601a      	str	r2, [r3, #0]
		duration=timer1+50;
 8000dd2:	4b2a      	ldr	r3, [pc, #168]	; (8000e7c <fsm_run1+0xd8>)
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	3332      	adds	r3, #50	; 0x32
 8000dd8:	4a29      	ldr	r2, [pc, #164]	; (8000e80 <fsm_run1+0xdc>)
 8000dda:	6013      	str	r3, [r2, #0]
		settimer1(duration);
 8000ddc:	4b28      	ldr	r3, [pc, #160]	; (8000e80 <fsm_run1+0xdc>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	4618      	mov	r0, r3
 8000de2:	f000 fae1 	bl	80013a8 <settimer1>
		break;
 8000de6:	e045      	b.n	8000e74 <fsm_run1+0xd0>
	case auto_red:
		turn_on(0);
 8000de8:	2000      	movs	r0, #0
 8000dea:	f000 f8f3 	bl	8000fd4 <turn_on>
		if(timer1_flag==1)
 8000dee:	4b25      	ldr	r3, [pc, #148]	; (8000e84 <fsm_run1+0xe0>)
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	2b01      	cmp	r3, #1
 8000df4:	d139      	bne.n	8000e6a <fsm_run1+0xc6>
		{
			status1=auto_green;
 8000df6:	4b20      	ldr	r3, [pc, #128]	; (8000e78 <fsm_run1+0xd4>)
 8000df8:	2202      	movs	r2, #2
 8000dfa:	601a      	str	r2, [r3, #0]
			duration=timer2+50;
 8000dfc:	4b22      	ldr	r3, [pc, #136]	; (8000e88 <fsm_run1+0xe4>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	3332      	adds	r3, #50	; 0x32
 8000e02:	4a1f      	ldr	r2, [pc, #124]	; (8000e80 <fsm_run1+0xdc>)
 8000e04:	6013      	str	r3, [r2, #0]
			settimer1(duration);
 8000e06:	4b1e      	ldr	r3, [pc, #120]	; (8000e80 <fsm_run1+0xdc>)
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	f000 facc 	bl	80013a8 <settimer1>
		}
		break;
 8000e10:	e02b      	b.n	8000e6a <fsm_run1+0xc6>
	case auto_green :
		turn_on(1);
 8000e12:	2001      	movs	r0, #1
 8000e14:	f000 f8de 	bl	8000fd4 <turn_on>
		if(timer1_flag==1)
 8000e18:	4b1a      	ldr	r3, [pc, #104]	; (8000e84 <fsm_run1+0xe0>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	2b01      	cmp	r3, #1
 8000e1e:	d126      	bne.n	8000e6e <fsm_run1+0xca>
		{
			status1=auto_yellow;
 8000e20:	4b15      	ldr	r3, [pc, #84]	; (8000e78 <fsm_run1+0xd4>)
 8000e22:	2203      	movs	r2, #3
 8000e24:	601a      	str	r2, [r3, #0]
			duration=timer3+50;
 8000e26:	4b19      	ldr	r3, [pc, #100]	; (8000e8c <fsm_run1+0xe8>)
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	3332      	adds	r3, #50	; 0x32
 8000e2c:	4a14      	ldr	r2, [pc, #80]	; (8000e80 <fsm_run1+0xdc>)
 8000e2e:	6013      	str	r3, [r2, #0]
			settimer1(duration);
 8000e30:	4b13      	ldr	r3, [pc, #76]	; (8000e80 <fsm_run1+0xdc>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	4618      	mov	r0, r3
 8000e36:	f000 fab7 	bl	80013a8 <settimer1>
		}
		break;
 8000e3a:	e018      	b.n	8000e6e <fsm_run1+0xca>
	case auto_yellow :
		turn_on(2);
 8000e3c:	2002      	movs	r0, #2
 8000e3e:	f000 f8c9 	bl	8000fd4 <turn_on>
		if(timer1_flag==1)
 8000e42:	4b10      	ldr	r3, [pc, #64]	; (8000e84 <fsm_run1+0xe0>)
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	2b01      	cmp	r3, #1
 8000e48:	d113      	bne.n	8000e72 <fsm_run1+0xce>
		{
			status1=auto_red;
 8000e4a:	4b0b      	ldr	r3, [pc, #44]	; (8000e78 <fsm_run1+0xd4>)
 8000e4c:	2201      	movs	r2, #1
 8000e4e:	601a      	str	r2, [r3, #0]
			duration=timer1+50;
 8000e50:	4b0a      	ldr	r3, [pc, #40]	; (8000e7c <fsm_run1+0xd8>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	3332      	adds	r3, #50	; 0x32
 8000e56:	4a0a      	ldr	r2, [pc, #40]	; (8000e80 <fsm_run1+0xdc>)
 8000e58:	6013      	str	r3, [r2, #0]
			settimer1(duration);
 8000e5a:	4b09      	ldr	r3, [pc, #36]	; (8000e80 <fsm_run1+0xdc>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	4618      	mov	r0, r3
 8000e60:	f000 faa2 	bl	80013a8 <settimer1>
		}
		break;
 8000e64:	e005      	b.n	8000e72 <fsm_run1+0xce>
	default :  break;
 8000e66:	bf00      	nop
 8000e68:	e004      	b.n	8000e74 <fsm_run1+0xd0>
		break;
 8000e6a:	bf00      	nop
 8000e6c:	e002      	b.n	8000e74 <fsm_run1+0xd0>
		break;
 8000e6e:	bf00      	nop
 8000e70:	e000      	b.n	8000e74 <fsm_run1+0xd0>
		break;
 8000e72:	bf00      	nop
	}
}
 8000e74:	bf00      	nop
 8000e76:	bd80      	pop	{r7, pc}
 8000e78:	2000009c 	.word	0x2000009c
 8000e7c:	2000004c 	.word	0x2000004c
 8000e80:	20000094 	.word	0x20000094
 8000e84:	200000f8 	.word	0x200000f8
 8000e88:	20000050 	.word	0x20000050
 8000e8c:	20000054 	.word	0x20000054

08000e90 <fsm_run2>:

void fsm_run2()
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	af00      	add	r7, sp, #0
	switch(status2)
 8000e94:	4b33      	ldr	r3, [pc, #204]	; (8000f64 <fsm_run2+0xd4>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	2b03      	cmp	r3, #3
 8000e9a:	d85a      	bhi.n	8000f52 <fsm_run2+0xc2>
 8000e9c:	a201      	add	r2, pc, #4	; (adr r2, 8000ea4 <fsm_run2+0x14>)
 8000e9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ea2:	bf00      	nop
 8000ea4:	08000eb5 	.word	0x08000eb5
 8000ea8:	08000ed5 	.word	0x08000ed5
 8000eac:	08000eff 	.word	0x08000eff
 8000eb0:	08000f29 	.word	0x08000f29
	{
	case INIT :
		turn_off();
 8000eb4:	f000 f86a 	bl	8000f8c <turn_off>
		status2=auto_green;
 8000eb8:	4b2a      	ldr	r3, [pc, #168]	; (8000f64 <fsm_run2+0xd4>)
 8000eba:	2202      	movs	r2, #2
 8000ebc:	601a      	str	r2, [r3, #0]
		duration2=timer2+50;
 8000ebe:	4b2a      	ldr	r3, [pc, #168]	; (8000f68 <fsm_run2+0xd8>)
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	3332      	adds	r3, #50	; 0x32
 8000ec4:	4a29      	ldr	r2, [pc, #164]	; (8000f6c <fsm_run2+0xdc>)
 8000ec6:	6013      	str	r3, [r2, #0]
		settimer2(duration2);
 8000ec8:	4b28      	ldr	r3, [pc, #160]	; (8000f6c <fsm_run2+0xdc>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	4618      	mov	r0, r3
 8000ece:	f000 fa7f 	bl	80013d0 <settimer2>
		break;
 8000ed2:	e045      	b.n	8000f60 <fsm_run2+0xd0>
	case auto_red:
		turn_on2(0);
 8000ed4:	2000      	movs	r0, #0
 8000ed6:	f000 f8c5 	bl	8001064 <turn_on2>
		if(timer2_flag==1)
 8000eda:	4b25      	ldr	r3, [pc, #148]	; (8000f70 <fsm_run2+0xe0>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	2b01      	cmp	r3, #1
 8000ee0:	d139      	bne.n	8000f56 <fsm_run2+0xc6>
		{
			status2=auto_green;
 8000ee2:	4b20      	ldr	r3, [pc, #128]	; (8000f64 <fsm_run2+0xd4>)
 8000ee4:	2202      	movs	r2, #2
 8000ee6:	601a      	str	r2, [r3, #0]
			duration2=timer2+50;
 8000ee8:	4b1f      	ldr	r3, [pc, #124]	; (8000f68 <fsm_run2+0xd8>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	3332      	adds	r3, #50	; 0x32
 8000eee:	4a1f      	ldr	r2, [pc, #124]	; (8000f6c <fsm_run2+0xdc>)
 8000ef0:	6013      	str	r3, [r2, #0]
			settimer2(duration2);
 8000ef2:	4b1e      	ldr	r3, [pc, #120]	; (8000f6c <fsm_run2+0xdc>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	f000 fa6a 	bl	80013d0 <settimer2>
		}
		break;
 8000efc:	e02b      	b.n	8000f56 <fsm_run2+0xc6>
	case auto_green :
		turn_on2(1);
 8000efe:	2001      	movs	r0, #1
 8000f00:	f000 f8b0 	bl	8001064 <turn_on2>
		if(timer2_flag==1)
 8000f04:	4b1a      	ldr	r3, [pc, #104]	; (8000f70 <fsm_run2+0xe0>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	2b01      	cmp	r3, #1
 8000f0a:	d126      	bne.n	8000f5a <fsm_run2+0xca>
		{
			status2=auto_yellow;
 8000f0c:	4b15      	ldr	r3, [pc, #84]	; (8000f64 <fsm_run2+0xd4>)
 8000f0e:	2203      	movs	r2, #3
 8000f10:	601a      	str	r2, [r3, #0]
			duration2=timer3+50;
 8000f12:	4b18      	ldr	r3, [pc, #96]	; (8000f74 <fsm_run2+0xe4>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	3332      	adds	r3, #50	; 0x32
 8000f18:	4a14      	ldr	r2, [pc, #80]	; (8000f6c <fsm_run2+0xdc>)
 8000f1a:	6013      	str	r3, [r2, #0]
			settimer2(duration2);
 8000f1c:	4b13      	ldr	r3, [pc, #76]	; (8000f6c <fsm_run2+0xdc>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	4618      	mov	r0, r3
 8000f22:	f000 fa55 	bl	80013d0 <settimer2>
		}
		break;
 8000f26:	e018      	b.n	8000f5a <fsm_run2+0xca>
	case auto_yellow :
		turn_on2(2);
 8000f28:	2002      	movs	r0, #2
 8000f2a:	f000 f89b 	bl	8001064 <turn_on2>
		if(timer2_flag==1)
 8000f2e:	4b10      	ldr	r3, [pc, #64]	; (8000f70 <fsm_run2+0xe0>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	2b01      	cmp	r3, #1
 8000f34:	d113      	bne.n	8000f5e <fsm_run2+0xce>
		{
			status2=auto_red;
 8000f36:	4b0b      	ldr	r3, [pc, #44]	; (8000f64 <fsm_run2+0xd4>)
 8000f38:	2201      	movs	r2, #1
 8000f3a:	601a      	str	r2, [r3, #0]
			duration2=timer1+50;
 8000f3c:	4b0e      	ldr	r3, [pc, #56]	; (8000f78 <fsm_run2+0xe8>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	3332      	adds	r3, #50	; 0x32
 8000f42:	4a0a      	ldr	r2, [pc, #40]	; (8000f6c <fsm_run2+0xdc>)
 8000f44:	6013      	str	r3, [r2, #0]
			settimer2(duration2);
 8000f46:	4b09      	ldr	r3, [pc, #36]	; (8000f6c <fsm_run2+0xdc>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	f000 fa40 	bl	80013d0 <settimer2>
		}
		break;
 8000f50:	e005      	b.n	8000f5e <fsm_run2+0xce>
	default :  break;
 8000f52:	bf00      	nop
 8000f54:	e004      	b.n	8000f60 <fsm_run2+0xd0>
		break;
 8000f56:	bf00      	nop
 8000f58:	e002      	b.n	8000f60 <fsm_run2+0xd0>
		break;
 8000f5a:	bf00      	nop
 8000f5c:	e000      	b.n	8000f60 <fsm_run2+0xd0>
		break;
 8000f5e:	bf00      	nop
	}
}
 8000f60:	bf00      	nop
 8000f62:	bd80      	pop	{r7, pc}
 8000f64:	200000a0 	.word	0x200000a0
 8000f68:	20000050 	.word	0x20000050
 8000f6c:	20000098 	.word	0x20000098
 8000f70:	20000100 	.word	0x20000100
 8000f74:	20000054 	.word	0x20000054
 8000f78:	2000004c 	.word	0x2000004c

08000f7c <fsm_run>:

void fsm_run()
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	af00      	add	r7, sp, #0
	fsm_run1();
 8000f80:	f7ff ff10 	bl	8000da4 <fsm_run1>
	fsm_run2();
 8000f84:	f7ff ff84 	bl	8000e90 <fsm_run2>
}
 8000f88:	bf00      	nop
 8000f8a:	bd80      	pop	{r7, pc}

08000f8c <turn_off>:
 */

#include "fsm_auto_help.h"

void turn_off()
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(led_red1_GPIO_Port, led_red1_Pin, SET);
 8000f90:	2201      	movs	r2, #1
 8000f92:	2101      	movs	r1, #1
 8000f94:	480e      	ldr	r0, [pc, #56]	; (8000fd0 <turn_off+0x44>)
 8000f96:	f001 f920 	bl	80021da <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(led_green1_GPIO_Port, led_green1_Pin, SET);
 8000f9a:	2201      	movs	r2, #1
 8000f9c:	2102      	movs	r1, #2
 8000f9e:	480c      	ldr	r0, [pc, #48]	; (8000fd0 <turn_off+0x44>)
 8000fa0:	f001 f91b 	bl	80021da <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(led_yellow1_GPIO_Port, led_yellow1_Pin, SET);
 8000fa4:	2201      	movs	r2, #1
 8000fa6:	2104      	movs	r1, #4
 8000fa8:	4809      	ldr	r0, [pc, #36]	; (8000fd0 <turn_off+0x44>)
 8000faa:	f001 f916 	bl	80021da <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(led_red2_GPIO_Port, led_red2_Pin, SET);
 8000fae:	2201      	movs	r2, #1
 8000fb0:	2108      	movs	r1, #8
 8000fb2:	4807      	ldr	r0, [pc, #28]	; (8000fd0 <turn_off+0x44>)
 8000fb4:	f001 f911 	bl	80021da <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(led_green2_GPIO_Port, led_green2_Pin, SET);
 8000fb8:	2201      	movs	r2, #1
 8000fba:	2110      	movs	r1, #16
 8000fbc:	4804      	ldr	r0, [pc, #16]	; (8000fd0 <turn_off+0x44>)
 8000fbe:	f001 f90c 	bl	80021da <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(led_yellow2_GPIO_Port, led_yellow2_Pin, SET);
 8000fc2:	2201      	movs	r2, #1
 8000fc4:	2120      	movs	r1, #32
 8000fc6:	4802      	ldr	r0, [pc, #8]	; (8000fd0 <turn_off+0x44>)
 8000fc8:	f001 f907 	bl	80021da <HAL_GPIO_WritePin>
}
 8000fcc:	bf00      	nop
 8000fce:	bd80      	pop	{r7, pc}
 8000fd0:	40010800 	.word	0x40010800

08000fd4 <turn_on>:

void turn_on(int index)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b082      	sub	sp, #8
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
	switch (index)
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	2b02      	cmp	r3, #2
 8000fe0:	d029      	beq.n	8001036 <turn_on+0x62>
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	2b02      	cmp	r3, #2
 8000fe6:	dc36      	bgt.n	8001056 <turn_on+0x82>
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d003      	beq.n	8000ff6 <turn_on+0x22>
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	2b01      	cmp	r3, #1
 8000ff2:	d010      	beq.n	8001016 <turn_on+0x42>
	case 2 :
		HAL_GPIO_WritePin(led_red1_GPIO_Port, led_red1_Pin, SET);
		HAL_GPIO_WritePin(led_green1_GPIO_Port, led_green1_Pin, SET);
		HAL_GPIO_WritePin(led_yellow1_GPIO_Port, led_yellow1_Pin, RESET);
		break ;
	default : break;
 8000ff4:	e02f      	b.n	8001056 <turn_on+0x82>
		HAL_GPIO_WritePin(led_red1_GPIO_Port, led_red1_Pin, RESET);
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	2101      	movs	r1, #1
 8000ffa:	4819      	ldr	r0, [pc, #100]	; (8001060 <turn_on+0x8c>)
 8000ffc:	f001 f8ed 	bl	80021da <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(led_green1_GPIO_Port, led_green1_Pin, SET);
 8001000:	2201      	movs	r2, #1
 8001002:	2102      	movs	r1, #2
 8001004:	4816      	ldr	r0, [pc, #88]	; (8001060 <turn_on+0x8c>)
 8001006:	f001 f8e8 	bl	80021da <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(led_yellow1_GPIO_Port, led_yellow1_Pin, SET);
 800100a:	2201      	movs	r2, #1
 800100c:	2104      	movs	r1, #4
 800100e:	4814      	ldr	r0, [pc, #80]	; (8001060 <turn_on+0x8c>)
 8001010:	f001 f8e3 	bl	80021da <HAL_GPIO_WritePin>
		break ;
 8001014:	e020      	b.n	8001058 <turn_on+0x84>
		HAL_GPIO_WritePin(led_red1_GPIO_Port, led_red1_Pin, SET);
 8001016:	2201      	movs	r2, #1
 8001018:	2101      	movs	r1, #1
 800101a:	4811      	ldr	r0, [pc, #68]	; (8001060 <turn_on+0x8c>)
 800101c:	f001 f8dd 	bl	80021da <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(led_green1_GPIO_Port, led_green1_Pin, RESET);
 8001020:	2200      	movs	r2, #0
 8001022:	2102      	movs	r1, #2
 8001024:	480e      	ldr	r0, [pc, #56]	; (8001060 <turn_on+0x8c>)
 8001026:	f001 f8d8 	bl	80021da <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(led_yellow1_GPIO_Port, led_yellow1_Pin, SET);
 800102a:	2201      	movs	r2, #1
 800102c:	2104      	movs	r1, #4
 800102e:	480c      	ldr	r0, [pc, #48]	; (8001060 <turn_on+0x8c>)
 8001030:	f001 f8d3 	bl	80021da <HAL_GPIO_WritePin>
		break;
 8001034:	e010      	b.n	8001058 <turn_on+0x84>
		HAL_GPIO_WritePin(led_red1_GPIO_Port, led_red1_Pin, SET);
 8001036:	2201      	movs	r2, #1
 8001038:	2101      	movs	r1, #1
 800103a:	4809      	ldr	r0, [pc, #36]	; (8001060 <turn_on+0x8c>)
 800103c:	f001 f8cd 	bl	80021da <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(led_green1_GPIO_Port, led_green1_Pin, SET);
 8001040:	2201      	movs	r2, #1
 8001042:	2102      	movs	r1, #2
 8001044:	4806      	ldr	r0, [pc, #24]	; (8001060 <turn_on+0x8c>)
 8001046:	f001 f8c8 	bl	80021da <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(led_yellow1_GPIO_Port, led_yellow1_Pin, RESET);
 800104a:	2200      	movs	r2, #0
 800104c:	2104      	movs	r1, #4
 800104e:	4804      	ldr	r0, [pc, #16]	; (8001060 <turn_on+0x8c>)
 8001050:	f001 f8c3 	bl	80021da <HAL_GPIO_WritePin>
		break ;
 8001054:	e000      	b.n	8001058 <turn_on+0x84>
	default : break;
 8001056:	bf00      	nop
	}
}
 8001058:	bf00      	nop
 800105a:	3708      	adds	r7, #8
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}
 8001060:	40010800 	.word	0x40010800

08001064 <turn_on2>:

void turn_on2(int index)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b082      	sub	sp, #8
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
	switch (index)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	2b02      	cmp	r3, #2
 8001070:	d029      	beq.n	80010c6 <turn_on2+0x62>
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	2b02      	cmp	r3, #2
 8001076:	dc36      	bgt.n	80010e6 <turn_on2+0x82>
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	2b00      	cmp	r3, #0
 800107c:	d003      	beq.n	8001086 <turn_on2+0x22>
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	2b01      	cmp	r3, #1
 8001082:	d010      	beq.n	80010a6 <turn_on2+0x42>
	case 2 :
		HAL_GPIO_WritePin(led_red2_GPIO_Port, led_red2_Pin, SET);
		HAL_GPIO_WritePin(led_green2_GPIO_Port, led_green2_Pin, SET);
		HAL_GPIO_WritePin(led_yellow2_GPIO_Port, led_yellow2_Pin, RESET);
		break ;
	default : break;
 8001084:	e02f      	b.n	80010e6 <turn_on2+0x82>
		HAL_GPIO_WritePin(led_red2_GPIO_Port, led_red2_Pin, RESET);
 8001086:	2200      	movs	r2, #0
 8001088:	2108      	movs	r1, #8
 800108a:	4819      	ldr	r0, [pc, #100]	; (80010f0 <turn_on2+0x8c>)
 800108c:	f001 f8a5 	bl	80021da <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(led_green2_GPIO_Port, led_green2_Pin, SET);
 8001090:	2201      	movs	r2, #1
 8001092:	2110      	movs	r1, #16
 8001094:	4816      	ldr	r0, [pc, #88]	; (80010f0 <turn_on2+0x8c>)
 8001096:	f001 f8a0 	bl	80021da <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(led_yellow2_GPIO_Port, led_yellow2_Pin, SET);
 800109a:	2201      	movs	r2, #1
 800109c:	2120      	movs	r1, #32
 800109e:	4814      	ldr	r0, [pc, #80]	; (80010f0 <turn_on2+0x8c>)
 80010a0:	f001 f89b 	bl	80021da <HAL_GPIO_WritePin>
		break ;
 80010a4:	e020      	b.n	80010e8 <turn_on2+0x84>
		HAL_GPIO_WritePin(led_red2_GPIO_Port, led_red2_Pin, SET);
 80010a6:	2201      	movs	r2, #1
 80010a8:	2108      	movs	r1, #8
 80010aa:	4811      	ldr	r0, [pc, #68]	; (80010f0 <turn_on2+0x8c>)
 80010ac:	f001 f895 	bl	80021da <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(led_green2_GPIO_Port, led_green2_Pin, RESET);
 80010b0:	2200      	movs	r2, #0
 80010b2:	2110      	movs	r1, #16
 80010b4:	480e      	ldr	r0, [pc, #56]	; (80010f0 <turn_on2+0x8c>)
 80010b6:	f001 f890 	bl	80021da <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(led_yellow2_GPIO_Port, led_yellow2_Pin, SET);
 80010ba:	2201      	movs	r2, #1
 80010bc:	2120      	movs	r1, #32
 80010be:	480c      	ldr	r0, [pc, #48]	; (80010f0 <turn_on2+0x8c>)
 80010c0:	f001 f88b 	bl	80021da <HAL_GPIO_WritePin>
		break;
 80010c4:	e010      	b.n	80010e8 <turn_on2+0x84>
		HAL_GPIO_WritePin(led_red2_GPIO_Port, led_red2_Pin, SET);
 80010c6:	2201      	movs	r2, #1
 80010c8:	2108      	movs	r1, #8
 80010ca:	4809      	ldr	r0, [pc, #36]	; (80010f0 <turn_on2+0x8c>)
 80010cc:	f001 f885 	bl	80021da <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(led_green2_GPIO_Port, led_green2_Pin, SET);
 80010d0:	2201      	movs	r2, #1
 80010d2:	2110      	movs	r1, #16
 80010d4:	4806      	ldr	r0, [pc, #24]	; (80010f0 <turn_on2+0x8c>)
 80010d6:	f001 f880 	bl	80021da <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(led_yellow2_GPIO_Port, led_yellow2_Pin, RESET);
 80010da:	2200      	movs	r2, #0
 80010dc:	2120      	movs	r1, #32
 80010de:	4804      	ldr	r0, [pc, #16]	; (80010f0 <turn_on2+0x8c>)
 80010e0:	f001 f87b 	bl	80021da <HAL_GPIO_WritePin>
		break ;
 80010e4:	e000      	b.n	80010e8 <turn_on2+0x84>
	default : break;
 80010e6:	bf00      	nop
	}
}
 80010e8:	bf00      	nop
 80010ea:	3708      	adds	r7, #8
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}
 80010f0:	40010800 	.word	0x40010800

080010f4 <changetimer1>:
int timer1=500;
int timer2=300;
int timer3=200;

void changetimer1(int duration)
{
 80010f4:	b480      	push	{r7}
 80010f6:	b083      	sub	sp, #12
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
	timer1=duration;
 80010fc:	4a03      	ldr	r2, [pc, #12]	; (800110c <changetimer1+0x18>)
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	6013      	str	r3, [r2, #0]
}
 8001102:	bf00      	nop
 8001104:	370c      	adds	r7, #12
 8001106:	46bd      	mov	sp, r7
 8001108:	bc80      	pop	{r7}
 800110a:	4770      	bx	lr
 800110c:	2000004c 	.word	0x2000004c

08001110 <changetimer2>:

void changetimer2(int duration)
{
 8001110:	b480      	push	{r7}
 8001112:	b083      	sub	sp, #12
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
	timer2=duration;
 8001118:	4a03      	ldr	r2, [pc, #12]	; (8001128 <changetimer2+0x18>)
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	6013      	str	r3, [r2, #0]
}
 800111e:	bf00      	nop
 8001120:	370c      	adds	r7, #12
 8001122:	46bd      	mov	sp, r7
 8001124:	bc80      	pop	{r7}
 8001126:	4770      	bx	lr
 8001128:	20000050 	.word	0x20000050

0800112c <changetimer3>:

void changetimer3(int duration)
{
 800112c:	b480      	push	{r7}
 800112e:	b083      	sub	sp, #12
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
	timer3=duration;
 8001134:	4a03      	ldr	r2, [pc, #12]	; (8001144 <changetimer3+0x18>)
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	6013      	str	r3, [r2, #0]
}
 800113a:	bf00      	nop
 800113c:	370c      	adds	r7, #12
 800113e:	46bd      	mov	sp, r7
 8001140:	bc80      	pop	{r7}
 8001142:	4770      	bx	lr
 8001144:	20000054 	.word	0x20000054

08001148 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800114c:	f000 fd42 	bl	8001bd4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001150:	f000 f81e 	bl	8001190 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001154:	f000 f8a4 	bl	80012a0 <MX_GPIO_Init>
  MX_TIM2_Init();
 8001158:	f000 f856 	bl	8001208 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 800115c:	4807      	ldr	r0, [pc, #28]	; (800117c <main+0x34>)
 800115e:	f001 fc83 	bl	8002a68 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  status1=INIT;
 8001162:	4b07      	ldr	r3, [pc, #28]	; (8001180 <main+0x38>)
 8001164:	2200      	movs	r2, #0
 8001166:	601a      	str	r2, [r3, #0]
  status2=INIT;
 8001168:	4b06      	ldr	r3, [pc, #24]	; (8001184 <main+0x3c>)
 800116a:	2200      	movs	r2, #0
 800116c:	601a      	str	r2, [r3, #0]
  status3=INIT;
 800116e:	4b06      	ldr	r3, [pc, #24]	; (8001188 <main+0x40>)
 8001170:	2200      	movs	r2, #0
 8001172:	601a      	str	r2, [r3, #0]
  status4=INIT;
 8001174:	4b05      	ldr	r3, [pc, #20]	; (800118c <main+0x44>)
 8001176:	2200      	movs	r2, #0
 8001178:	601a      	str	r2, [r3, #0]
  while (1)
 800117a:	e7fe      	b.n	800117a <main+0x32>
 800117c:	200000ac 	.word	0x200000ac
 8001180:	2000009c 	.word	0x2000009c
 8001184:	200000a0 	.word	0x200000a0
 8001188:	200000a4 	.word	0x200000a4
 800118c:	200000a8 	.word	0x200000a8

08001190 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b090      	sub	sp, #64	; 0x40
 8001194:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001196:	f107 0318 	add.w	r3, r7, #24
 800119a:	2228      	movs	r2, #40	; 0x28
 800119c:	2100      	movs	r1, #0
 800119e:	4618      	mov	r0, r3
 80011a0:	f001 fffa 	bl	8003198 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011a4:	1d3b      	adds	r3, r7, #4
 80011a6:	2200      	movs	r2, #0
 80011a8:	601a      	str	r2, [r3, #0]
 80011aa:	605a      	str	r2, [r3, #4]
 80011ac:	609a      	str	r2, [r3, #8]
 80011ae:	60da      	str	r2, [r3, #12]
 80011b0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80011b2:	2302      	movs	r3, #2
 80011b4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011b6:	2301      	movs	r3, #1
 80011b8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011ba:	2310      	movs	r3, #16
 80011bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80011be:	2300      	movs	r3, #0
 80011c0:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011c2:	f107 0318 	add.w	r3, r7, #24
 80011c6:	4618      	mov	r0, r3
 80011c8:	f001 f820 	bl	800220c <HAL_RCC_OscConfig>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d001      	beq.n	80011d6 <SystemClock_Config+0x46>
  {
    Error_Handler();
 80011d2:	f000 f8e3 	bl	800139c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011d6:	230f      	movs	r3, #15
 80011d8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80011da:	2300      	movs	r3, #0
 80011dc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011de:	2300      	movs	r3, #0
 80011e0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80011e2:	2300      	movs	r3, #0
 80011e4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011e6:	2300      	movs	r3, #0
 80011e8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80011ea:	1d3b      	adds	r3, r7, #4
 80011ec:	2100      	movs	r1, #0
 80011ee:	4618      	mov	r0, r3
 80011f0:	f001 fa8e 	bl	8002710 <HAL_RCC_ClockConfig>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d001      	beq.n	80011fe <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80011fa:	f000 f8cf 	bl	800139c <Error_Handler>
  }
}
 80011fe:	bf00      	nop
 8001200:	3740      	adds	r7, #64	; 0x40
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}
	...

08001208 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b086      	sub	sp, #24
 800120c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800120e:	f107 0308 	add.w	r3, r7, #8
 8001212:	2200      	movs	r2, #0
 8001214:	601a      	str	r2, [r3, #0]
 8001216:	605a      	str	r2, [r3, #4]
 8001218:	609a      	str	r2, [r3, #8]
 800121a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800121c:	463b      	mov	r3, r7
 800121e:	2200      	movs	r2, #0
 8001220:	601a      	str	r2, [r3, #0]
 8001222:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001224:	4b1d      	ldr	r3, [pc, #116]	; (800129c <MX_TIM2_Init+0x94>)
 8001226:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800122a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 800122c:	4b1b      	ldr	r3, [pc, #108]	; (800129c <MX_TIM2_Init+0x94>)
 800122e:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8001232:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001234:	4b19      	ldr	r3, [pc, #100]	; (800129c <MX_TIM2_Init+0x94>)
 8001236:	2200      	movs	r2, #0
 8001238:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 800123a:	4b18      	ldr	r3, [pc, #96]	; (800129c <MX_TIM2_Init+0x94>)
 800123c:	2209      	movs	r2, #9
 800123e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001240:	4b16      	ldr	r3, [pc, #88]	; (800129c <MX_TIM2_Init+0x94>)
 8001242:	2200      	movs	r2, #0
 8001244:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001246:	4b15      	ldr	r3, [pc, #84]	; (800129c <MX_TIM2_Init+0x94>)
 8001248:	2200      	movs	r2, #0
 800124a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800124c:	4813      	ldr	r0, [pc, #76]	; (800129c <MX_TIM2_Init+0x94>)
 800124e:	f001 fbbb 	bl	80029c8 <HAL_TIM_Base_Init>
 8001252:	4603      	mov	r3, r0
 8001254:	2b00      	cmp	r3, #0
 8001256:	d001      	beq.n	800125c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001258:	f000 f8a0 	bl	800139c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800125c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001260:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001262:	f107 0308 	add.w	r3, r7, #8
 8001266:	4619      	mov	r1, r3
 8001268:	480c      	ldr	r0, [pc, #48]	; (800129c <MX_TIM2_Init+0x94>)
 800126a:	f001 fd51 	bl	8002d10 <HAL_TIM_ConfigClockSource>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	d001      	beq.n	8001278 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001274:	f000 f892 	bl	800139c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001278:	2300      	movs	r3, #0
 800127a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800127c:	2300      	movs	r3, #0
 800127e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001280:	463b      	mov	r3, r7
 8001282:	4619      	mov	r1, r3
 8001284:	4805      	ldr	r0, [pc, #20]	; (800129c <MX_TIM2_Init+0x94>)
 8001286:	f001 ff1d 	bl	80030c4 <HAL_TIMEx_MasterConfigSynchronization>
 800128a:	4603      	mov	r3, r0
 800128c:	2b00      	cmp	r3, #0
 800128e:	d001      	beq.n	8001294 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001290:	f000 f884 	bl	800139c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001294:	bf00      	nop
 8001296:	3718      	adds	r7, #24
 8001298:	46bd      	mov	sp, r7
 800129a:	bd80      	pop	{r7, pc}
 800129c:	200000ac 	.word	0x200000ac

080012a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b088      	sub	sp, #32
 80012a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012a6:	f107 0310 	add.w	r3, r7, #16
 80012aa:	2200      	movs	r2, #0
 80012ac:	601a      	str	r2, [r3, #0]
 80012ae:	605a      	str	r2, [r3, #4]
 80012b0:	609a      	str	r2, [r3, #8]
 80012b2:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012b4:	4b2f      	ldr	r3, [pc, #188]	; (8001374 <MX_GPIO_Init+0xd4>)
 80012b6:	699b      	ldr	r3, [r3, #24]
 80012b8:	4a2e      	ldr	r2, [pc, #184]	; (8001374 <MX_GPIO_Init+0xd4>)
 80012ba:	f043 0310 	orr.w	r3, r3, #16
 80012be:	6193      	str	r3, [r2, #24]
 80012c0:	4b2c      	ldr	r3, [pc, #176]	; (8001374 <MX_GPIO_Init+0xd4>)
 80012c2:	699b      	ldr	r3, [r3, #24]
 80012c4:	f003 0310 	and.w	r3, r3, #16
 80012c8:	60fb      	str	r3, [r7, #12]
 80012ca:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012cc:	4b29      	ldr	r3, [pc, #164]	; (8001374 <MX_GPIO_Init+0xd4>)
 80012ce:	699b      	ldr	r3, [r3, #24]
 80012d0:	4a28      	ldr	r2, [pc, #160]	; (8001374 <MX_GPIO_Init+0xd4>)
 80012d2:	f043 0304 	orr.w	r3, r3, #4
 80012d6:	6193      	str	r3, [r2, #24]
 80012d8:	4b26      	ldr	r3, [pc, #152]	; (8001374 <MX_GPIO_Init+0xd4>)
 80012da:	699b      	ldr	r3, [r3, #24]
 80012dc:	f003 0304 	and.w	r3, r3, #4
 80012e0:	60bb      	str	r3, [r7, #8]
 80012e2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012e4:	4b23      	ldr	r3, [pc, #140]	; (8001374 <MX_GPIO_Init+0xd4>)
 80012e6:	699b      	ldr	r3, [r3, #24]
 80012e8:	4a22      	ldr	r2, [pc, #136]	; (8001374 <MX_GPIO_Init+0xd4>)
 80012ea:	f043 0308 	orr.w	r3, r3, #8
 80012ee:	6193      	str	r3, [r2, #24]
 80012f0:	4b20      	ldr	r3, [pc, #128]	; (8001374 <MX_GPIO_Init+0xd4>)
 80012f2:	699b      	ldr	r3, [r3, #24]
 80012f4:	f003 0308 	and.w	r3, r3, #8
 80012f8:	607b      	str	r3, [r7, #4]
 80012fa:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, led_red1_Pin|led_green1_Pin|led_yellow1_Pin|led_red2_Pin
 80012fc:	2200      	movs	r2, #0
 80012fe:	f240 71bf 	movw	r1, #1983	; 0x7bf
 8001302:	481d      	ldr	r0, [pc, #116]	; (8001378 <MX_GPIO_Init+0xd8>)
 8001304:	f000 ff69 	bl	80021da <HAL_GPIO_WritePin>
                          |led_green2_Pin|led_yellow2_Pin|en0_Pin|en1_Pin
                          |en2_Pin|en3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, chan1a_Pin|chan1b_Pin|chan1c_Pin|chan2d_Pin
 8001308:	2200      	movs	r2, #0
 800130a:	f643 71ff 	movw	r1, #16383	; 0x3fff
 800130e:	481b      	ldr	r0, [pc, #108]	; (800137c <MX_GPIO_Init+0xdc>)
 8001310:	f000 ff63 	bl	80021da <HAL_GPIO_WritePin>
                          |chan2e_Pin|chan2f_Pin|chan2g_Pin|chan1d_Pin
                          |chan1e_Pin|chan1f_Pin|chan1g_Pin|chan2a_Pin
                          |chan2b_Pin|chan2c_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : button1_Pin button2_Pin button3_Pin */
  GPIO_InitStruct.Pin = button1_Pin|button2_Pin|button3_Pin;
 8001314:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001318:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800131a:	2300      	movs	r3, #0
 800131c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800131e:	2301      	movs	r3, #1
 8001320:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001322:	f107 0310 	add.w	r3, r7, #16
 8001326:	4619      	mov	r1, r3
 8001328:	4815      	ldr	r0, [pc, #84]	; (8001380 <MX_GPIO_Init+0xe0>)
 800132a:	f000 fdc3 	bl	8001eb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : led_red1_Pin led_green1_Pin led_yellow1_Pin led_red2_Pin
                           led_green2_Pin led_yellow2_Pin en0_Pin en1_Pin
                           en2_Pin en3_Pin */
  GPIO_InitStruct.Pin = led_red1_Pin|led_green1_Pin|led_yellow1_Pin|led_red2_Pin
 800132e:	f240 73bf 	movw	r3, #1983	; 0x7bf
 8001332:	613b      	str	r3, [r7, #16]
                          |led_green2_Pin|led_yellow2_Pin|en0_Pin|en1_Pin
                          |en2_Pin|en3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001334:	2301      	movs	r3, #1
 8001336:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001338:	2300      	movs	r3, #0
 800133a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800133c:	2302      	movs	r3, #2
 800133e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001340:	f107 0310 	add.w	r3, r7, #16
 8001344:	4619      	mov	r1, r3
 8001346:	480c      	ldr	r0, [pc, #48]	; (8001378 <MX_GPIO_Init+0xd8>)
 8001348:	f000 fdb4 	bl	8001eb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : chan1a_Pin chan1b_Pin chan1c_Pin chan2d_Pin
                           chan2e_Pin chan2f_Pin chan2g_Pin chan1d_Pin
                           chan1e_Pin chan1f_Pin chan1g_Pin chan2a_Pin
                           chan2b_Pin chan2c_Pin */
  GPIO_InitStruct.Pin = chan1a_Pin|chan1b_Pin|chan1c_Pin|chan2d_Pin
 800134c:	f643 73ff 	movw	r3, #16383	; 0x3fff
 8001350:	613b      	str	r3, [r7, #16]
                          |chan2e_Pin|chan2f_Pin|chan2g_Pin|chan1d_Pin
                          |chan1e_Pin|chan1f_Pin|chan1g_Pin|chan2a_Pin
                          |chan2b_Pin|chan2c_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001352:	2301      	movs	r3, #1
 8001354:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001356:	2300      	movs	r3, #0
 8001358:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800135a:	2302      	movs	r3, #2
 800135c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800135e:	f107 0310 	add.w	r3, r7, #16
 8001362:	4619      	mov	r1, r3
 8001364:	4805      	ldr	r0, [pc, #20]	; (800137c <MX_GPIO_Init+0xdc>)
 8001366:	f000 fda5 	bl	8001eb4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800136a:	bf00      	nop
 800136c:	3720      	adds	r7, #32
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	40021000 	.word	0x40021000
 8001378:	40010800 	.word	0x40010800
 800137c:	40010c00 	.word	0x40010c00
 8001380:	40011000 	.word	0x40011000

08001384 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b082      	sub	sp, #8
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
	timerrun();
 800138c:	f000 f884 	bl	8001498 <timerrun>
	getkeyinput();
 8001390:	f7fe fee6 	bl	8000160 <getkeyinput>
}
 8001394:	bf00      	nop
 8001396:	3708      	adds	r7, #8
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}

0800139c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800139c:	b480      	push	{r7}
 800139e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013a0:	b672      	cpsid	i
}
 80013a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013a4:	e7fe      	b.n	80013a4 <Error_Handler+0x8>
	...

080013a8 <settimer1>:
int timer5_flag=0;
int timer6_counter=0;
int timer6_flag=0;

void settimer1(int duration)
{
 80013a8:	b480      	push	{r7}
 80013aa:	b083      	sub	sp, #12
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
	timer1_counter=duration;
 80013b0:	4a05      	ldr	r2, [pc, #20]	; (80013c8 <settimer1+0x20>)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	6013      	str	r3, [r2, #0]
	timer1_flag=0;
 80013b6:	4b05      	ldr	r3, [pc, #20]	; (80013cc <settimer1+0x24>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	601a      	str	r2, [r3, #0]
}
 80013bc:	bf00      	nop
 80013be:	370c      	adds	r7, #12
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bc80      	pop	{r7}
 80013c4:	4770      	bx	lr
 80013c6:	bf00      	nop
 80013c8:	200000f4 	.word	0x200000f4
 80013cc:	200000f8 	.word	0x200000f8

080013d0 <settimer2>:
void settimer2(int duration)
{
 80013d0:	b480      	push	{r7}
 80013d2:	b083      	sub	sp, #12
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
	timer2_counter=duration;
 80013d8:	4a05      	ldr	r2, [pc, #20]	; (80013f0 <settimer2+0x20>)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	6013      	str	r3, [r2, #0]
	timer2_flag=0;
 80013de:	4b05      	ldr	r3, [pc, #20]	; (80013f4 <settimer2+0x24>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	601a      	str	r2, [r3, #0]
}
 80013e4:	bf00      	nop
 80013e6:	370c      	adds	r7, #12
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bc80      	pop	{r7}
 80013ec:	4770      	bx	lr
 80013ee:	bf00      	nop
 80013f0:	200000fc 	.word	0x200000fc
 80013f4:	20000100 	.word	0x20000100

080013f8 <settimer3>:
void settimer3(int duration)
{
 80013f8:	b480      	push	{r7}
 80013fa:	b083      	sub	sp, #12
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
	timer3_counter=duration;
 8001400:	4a05      	ldr	r2, [pc, #20]	; (8001418 <settimer3+0x20>)
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	6013      	str	r3, [r2, #0]
	timer3_flag=0;
 8001406:	4b05      	ldr	r3, [pc, #20]	; (800141c <settimer3+0x24>)
 8001408:	2200      	movs	r2, #0
 800140a:	601a      	str	r2, [r3, #0]
}
 800140c:	bf00      	nop
 800140e:	370c      	adds	r7, #12
 8001410:	46bd      	mov	sp, r7
 8001412:	bc80      	pop	{r7}
 8001414:	4770      	bx	lr
 8001416:	bf00      	nop
 8001418:	20000104 	.word	0x20000104
 800141c:	20000108 	.word	0x20000108

08001420 <settimer4>:
void settimer4(int duration)
{
 8001420:	b480      	push	{r7}
 8001422:	b083      	sub	sp, #12
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
	timer4_counter=duration;
 8001428:	4a05      	ldr	r2, [pc, #20]	; (8001440 <settimer4+0x20>)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	6013      	str	r3, [r2, #0]
	timer4_flag=0;
 800142e:	4b05      	ldr	r3, [pc, #20]	; (8001444 <settimer4+0x24>)
 8001430:	2200      	movs	r2, #0
 8001432:	601a      	str	r2, [r3, #0]
}
 8001434:	bf00      	nop
 8001436:	370c      	adds	r7, #12
 8001438:	46bd      	mov	sp, r7
 800143a:	bc80      	pop	{r7}
 800143c:	4770      	bx	lr
 800143e:	bf00      	nop
 8001440:	2000010c 	.word	0x2000010c
 8001444:	20000110 	.word	0x20000110

08001448 <settimer5>:
void settimer5(int duration)
{
 8001448:	b480      	push	{r7}
 800144a:	b083      	sub	sp, #12
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
	timer5_counter=duration;
 8001450:	4a05      	ldr	r2, [pc, #20]	; (8001468 <settimer5+0x20>)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	6013      	str	r3, [r2, #0]
	timer5_flag=0;
 8001456:	4b05      	ldr	r3, [pc, #20]	; (800146c <settimer5+0x24>)
 8001458:	2200      	movs	r2, #0
 800145a:	601a      	str	r2, [r3, #0]
}
 800145c:	bf00      	nop
 800145e:	370c      	adds	r7, #12
 8001460:	46bd      	mov	sp, r7
 8001462:	bc80      	pop	{r7}
 8001464:	4770      	bx	lr
 8001466:	bf00      	nop
 8001468:	20000114 	.word	0x20000114
 800146c:	20000118 	.word	0x20000118

08001470 <settimer6>:
void settimer6(int duration)
{
 8001470:	b480      	push	{r7}
 8001472:	b083      	sub	sp, #12
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
	timer6_counter=duration;
 8001478:	4a05      	ldr	r2, [pc, #20]	; (8001490 <settimer6+0x20>)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	6013      	str	r3, [r2, #0]
	timer6_flag=0;
 800147e:	4b05      	ldr	r3, [pc, #20]	; (8001494 <settimer6+0x24>)
 8001480:	2200      	movs	r2, #0
 8001482:	601a      	str	r2, [r3, #0]
}
 8001484:	bf00      	nop
 8001486:	370c      	adds	r7, #12
 8001488:	46bd      	mov	sp, r7
 800148a:	bc80      	pop	{r7}
 800148c:	4770      	bx	lr
 800148e:	bf00      	nop
 8001490:	2000011c 	.word	0x2000011c
 8001494:	20000120 	.word	0x20000120

08001498 <timerrun>:

void timerrun()
{
 8001498:	b480      	push	{r7}
 800149a:	af00      	add	r7, sp, #0
	if(timer1_counter>0)
 800149c:	4b31      	ldr	r3, [pc, #196]	; (8001564 <timerrun+0xcc>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	dd04      	ble.n	80014ae <timerrun+0x16>
	{
		timer1_counter--;
 80014a4:	4b2f      	ldr	r3, [pc, #188]	; (8001564 <timerrun+0xcc>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	3b01      	subs	r3, #1
 80014aa:	4a2e      	ldr	r2, [pc, #184]	; (8001564 <timerrun+0xcc>)
 80014ac:	6013      	str	r3, [r2, #0]
	}
	if(timer1_counter<=0)
 80014ae:	4b2d      	ldr	r3, [pc, #180]	; (8001564 <timerrun+0xcc>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	dc02      	bgt.n	80014bc <timerrun+0x24>
	{
		timer1_flag=1;
 80014b6:	4b2c      	ldr	r3, [pc, #176]	; (8001568 <timerrun+0xd0>)
 80014b8:	2201      	movs	r2, #1
 80014ba:	601a      	str	r2, [r3, #0]
	}
	if(timer2_counter>0)
 80014bc:	4b2b      	ldr	r3, [pc, #172]	; (800156c <timerrun+0xd4>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	dd04      	ble.n	80014ce <timerrun+0x36>
	{
		timer2_counter--;
 80014c4:	4b29      	ldr	r3, [pc, #164]	; (800156c <timerrun+0xd4>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	3b01      	subs	r3, #1
 80014ca:	4a28      	ldr	r2, [pc, #160]	; (800156c <timerrun+0xd4>)
 80014cc:	6013      	str	r3, [r2, #0]
	}
	if(timer2_counter<=0)
 80014ce:	4b27      	ldr	r3, [pc, #156]	; (800156c <timerrun+0xd4>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	dc02      	bgt.n	80014dc <timerrun+0x44>
	{
		timer2_flag=1;
 80014d6:	4b26      	ldr	r3, [pc, #152]	; (8001570 <timerrun+0xd8>)
 80014d8:	2201      	movs	r2, #1
 80014da:	601a      	str	r2, [r3, #0]
	}
	if(timer3_counter>0)
 80014dc:	4b25      	ldr	r3, [pc, #148]	; (8001574 <timerrun+0xdc>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	dd04      	ble.n	80014ee <timerrun+0x56>
	{
		timer3_counter--;
 80014e4:	4b23      	ldr	r3, [pc, #140]	; (8001574 <timerrun+0xdc>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	3b01      	subs	r3, #1
 80014ea:	4a22      	ldr	r2, [pc, #136]	; (8001574 <timerrun+0xdc>)
 80014ec:	6013      	str	r3, [r2, #0]
	}
	if(timer3_counter<=0)
 80014ee:	4b21      	ldr	r3, [pc, #132]	; (8001574 <timerrun+0xdc>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	dc02      	bgt.n	80014fc <timerrun+0x64>
	{
		timer3_flag=1;
 80014f6:	4b20      	ldr	r3, [pc, #128]	; (8001578 <timerrun+0xe0>)
 80014f8:	2201      	movs	r2, #1
 80014fa:	601a      	str	r2, [r3, #0]
	}
	if(timer4_counter>0)
 80014fc:	4b1f      	ldr	r3, [pc, #124]	; (800157c <timerrun+0xe4>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	2b00      	cmp	r3, #0
 8001502:	dd04      	ble.n	800150e <timerrun+0x76>
	{
		timer4_counter--;
 8001504:	4b1d      	ldr	r3, [pc, #116]	; (800157c <timerrun+0xe4>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	3b01      	subs	r3, #1
 800150a:	4a1c      	ldr	r2, [pc, #112]	; (800157c <timerrun+0xe4>)
 800150c:	6013      	str	r3, [r2, #0]
	}
	if(timer4_counter<=0)
 800150e:	4b1b      	ldr	r3, [pc, #108]	; (800157c <timerrun+0xe4>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	2b00      	cmp	r3, #0
 8001514:	dc02      	bgt.n	800151c <timerrun+0x84>
	{
		timer4_flag=1;
 8001516:	4b1a      	ldr	r3, [pc, #104]	; (8001580 <timerrun+0xe8>)
 8001518:	2201      	movs	r2, #1
 800151a:	601a      	str	r2, [r3, #0]
	}
	if(timer5_counter>0)
 800151c:	4b19      	ldr	r3, [pc, #100]	; (8001584 <timerrun+0xec>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	2b00      	cmp	r3, #0
 8001522:	dd04      	ble.n	800152e <timerrun+0x96>
	{
		timer5_counter--;
 8001524:	4b17      	ldr	r3, [pc, #92]	; (8001584 <timerrun+0xec>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	3b01      	subs	r3, #1
 800152a:	4a16      	ldr	r2, [pc, #88]	; (8001584 <timerrun+0xec>)
 800152c:	6013      	str	r3, [r2, #0]
	}
	if(timer5_counter<=0)
 800152e:	4b15      	ldr	r3, [pc, #84]	; (8001584 <timerrun+0xec>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	2b00      	cmp	r3, #0
 8001534:	dc02      	bgt.n	800153c <timerrun+0xa4>
	{
		timer5_flag=1;
 8001536:	4b14      	ldr	r3, [pc, #80]	; (8001588 <timerrun+0xf0>)
 8001538:	2201      	movs	r2, #1
 800153a:	601a      	str	r2, [r3, #0]
	}
	if(timer6_counter>0)
 800153c:	4b13      	ldr	r3, [pc, #76]	; (800158c <timerrun+0xf4>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	2b00      	cmp	r3, #0
 8001542:	dd04      	ble.n	800154e <timerrun+0xb6>
	{
		timer6_counter--;
 8001544:	4b11      	ldr	r3, [pc, #68]	; (800158c <timerrun+0xf4>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	3b01      	subs	r3, #1
 800154a:	4a10      	ldr	r2, [pc, #64]	; (800158c <timerrun+0xf4>)
 800154c:	6013      	str	r3, [r2, #0]
	}
	if(timer6_counter<=0)
 800154e:	4b0f      	ldr	r3, [pc, #60]	; (800158c <timerrun+0xf4>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	2b00      	cmp	r3, #0
 8001554:	dc02      	bgt.n	800155c <timerrun+0xc4>
	{
		timer6_flag=1;
 8001556:	4b0e      	ldr	r3, [pc, #56]	; (8001590 <timerrun+0xf8>)
 8001558:	2201      	movs	r2, #1
 800155a:	601a      	str	r2, [r3, #0]
	}
}
 800155c:	bf00      	nop
 800155e:	46bd      	mov	sp, r7
 8001560:	bc80      	pop	{r7}
 8001562:	4770      	bx	lr
 8001564:	200000f4 	.word	0x200000f4
 8001568:	200000f8 	.word	0x200000f8
 800156c:	200000fc 	.word	0x200000fc
 8001570:	20000100 	.word	0x20000100
 8001574:	20000104 	.word	0x20000104
 8001578:	20000108 	.word	0x20000108
 800157c:	2000010c 	.word	0x2000010c
 8001580:	20000110 	.word	0x20000110
 8001584:	20000114 	.word	0x20000114
 8001588:	20000118 	.word	0x20000118
 800158c:	2000011c 	.word	0x2000011c
 8001590:	20000120 	.word	0x20000120

08001594 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001594:	b480      	push	{r7}
 8001596:	b083      	sub	sp, #12
 8001598:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800159a:	4b0e      	ldr	r3, [pc, #56]	; (80015d4 <HAL_MspInit+0x40>)
 800159c:	699b      	ldr	r3, [r3, #24]
 800159e:	4a0d      	ldr	r2, [pc, #52]	; (80015d4 <HAL_MspInit+0x40>)
 80015a0:	f043 0301 	orr.w	r3, r3, #1
 80015a4:	6193      	str	r3, [r2, #24]
 80015a6:	4b0b      	ldr	r3, [pc, #44]	; (80015d4 <HAL_MspInit+0x40>)
 80015a8:	699b      	ldr	r3, [r3, #24]
 80015aa:	f003 0301 	and.w	r3, r3, #1
 80015ae:	607b      	str	r3, [r7, #4]
 80015b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015b2:	4b08      	ldr	r3, [pc, #32]	; (80015d4 <HAL_MspInit+0x40>)
 80015b4:	69db      	ldr	r3, [r3, #28]
 80015b6:	4a07      	ldr	r2, [pc, #28]	; (80015d4 <HAL_MspInit+0x40>)
 80015b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015bc:	61d3      	str	r3, [r2, #28]
 80015be:	4b05      	ldr	r3, [pc, #20]	; (80015d4 <HAL_MspInit+0x40>)
 80015c0:	69db      	ldr	r3, [r3, #28]
 80015c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015c6:	603b      	str	r3, [r7, #0]
 80015c8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015ca:	bf00      	nop
 80015cc:	370c      	adds	r7, #12
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bc80      	pop	{r7}
 80015d2:	4770      	bx	lr
 80015d4:	40021000 	.word	0x40021000

080015d8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b084      	sub	sp, #16
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80015e8:	d113      	bne.n	8001612 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80015ea:	4b0c      	ldr	r3, [pc, #48]	; (800161c <HAL_TIM_Base_MspInit+0x44>)
 80015ec:	69db      	ldr	r3, [r3, #28]
 80015ee:	4a0b      	ldr	r2, [pc, #44]	; (800161c <HAL_TIM_Base_MspInit+0x44>)
 80015f0:	f043 0301 	orr.w	r3, r3, #1
 80015f4:	61d3      	str	r3, [r2, #28]
 80015f6:	4b09      	ldr	r3, [pc, #36]	; (800161c <HAL_TIM_Base_MspInit+0x44>)
 80015f8:	69db      	ldr	r3, [r3, #28]
 80015fa:	f003 0301 	and.w	r3, r3, #1
 80015fe:	60fb      	str	r3, [r7, #12]
 8001600:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001602:	2200      	movs	r2, #0
 8001604:	2100      	movs	r1, #0
 8001606:	201c      	movs	r0, #28
 8001608:	f000 fc1d 	bl	8001e46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800160c:	201c      	movs	r0, #28
 800160e:	f000 fc36 	bl	8001e7e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001612:	bf00      	nop
 8001614:	3710      	adds	r7, #16
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	40021000 	.word	0x40021000

08001620 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001620:	b480      	push	{r7}
 8001622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001624:	e7fe      	b.n	8001624 <NMI_Handler+0x4>

08001626 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001626:	b480      	push	{r7}
 8001628:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800162a:	e7fe      	b.n	800162a <HardFault_Handler+0x4>

0800162c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800162c:	b480      	push	{r7}
 800162e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001630:	e7fe      	b.n	8001630 <MemManage_Handler+0x4>

08001632 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001632:	b480      	push	{r7}
 8001634:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001636:	e7fe      	b.n	8001636 <BusFault_Handler+0x4>

08001638 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001638:	b480      	push	{r7}
 800163a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800163c:	e7fe      	b.n	800163c <UsageFault_Handler+0x4>

0800163e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800163e:	b480      	push	{r7}
 8001640:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001642:	bf00      	nop
 8001644:	46bd      	mov	sp, r7
 8001646:	bc80      	pop	{r7}
 8001648:	4770      	bx	lr

0800164a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800164a:	b480      	push	{r7}
 800164c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800164e:	bf00      	nop
 8001650:	46bd      	mov	sp, r7
 8001652:	bc80      	pop	{r7}
 8001654:	4770      	bx	lr

08001656 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001656:	b480      	push	{r7}
 8001658:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800165a:	bf00      	nop
 800165c:	46bd      	mov	sp, r7
 800165e:	bc80      	pop	{r7}
 8001660:	4770      	bx	lr

08001662 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001662:	b580      	push	{r7, lr}
 8001664:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001666:	f000 fafb 	bl	8001c60 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800166a:	bf00      	nop
 800166c:	bd80      	pop	{r7, pc}
	...

08001670 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001674:	4802      	ldr	r0, [pc, #8]	; (8001680 <TIM2_IRQHandler+0x10>)
 8001676:	f001 fa43 	bl	8002b00 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800167a:	bf00      	nop
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	200000ac 	.word	0x200000ac

08001684 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001684:	b480      	push	{r7}
 8001686:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001688:	bf00      	nop
 800168a:	46bd      	mov	sp, r7
 800168c:	bc80      	pop	{r7}
 800168e:	4770      	bx	lr

08001690 <updateClockBuffer>:
int second=0;
int index_led=0;
int led_buffer[2] = {0 , 0};

void updateClockBuffer ()
  {
 8001690:	b480      	push	{r7}
 8001692:	b083      	sub	sp, #12
 8001694:	af00      	add	r7, sp, #0
	  int second_tens=second/10;
 8001696:	4b11      	ldr	r3, [pc, #68]	; (80016dc <updateClockBuffer+0x4c>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	4a11      	ldr	r2, [pc, #68]	; (80016e0 <updateClockBuffer+0x50>)
 800169c:	fb82 1203 	smull	r1, r2, r2, r3
 80016a0:	1092      	asrs	r2, r2, #2
 80016a2:	17db      	asrs	r3, r3, #31
 80016a4:	1ad3      	subs	r3, r2, r3
 80016a6:	607b      	str	r3, [r7, #4]
	  int second_ones=second%10;
 80016a8:	4b0c      	ldr	r3, [pc, #48]	; (80016dc <updateClockBuffer+0x4c>)
 80016aa:	681a      	ldr	r2, [r3, #0]
 80016ac:	4b0c      	ldr	r3, [pc, #48]	; (80016e0 <updateClockBuffer+0x50>)
 80016ae:	fb83 1302 	smull	r1, r3, r3, r2
 80016b2:	1099      	asrs	r1, r3, #2
 80016b4:	17d3      	asrs	r3, r2, #31
 80016b6:	1ac9      	subs	r1, r1, r3
 80016b8:	460b      	mov	r3, r1
 80016ba:	009b      	lsls	r3, r3, #2
 80016bc:	440b      	add	r3, r1
 80016be:	005b      	lsls	r3, r3, #1
 80016c0:	1ad3      	subs	r3, r2, r3
 80016c2:	603b      	str	r3, [r7, #0]

	  led_buffer[0] = second_tens;
 80016c4:	4a07      	ldr	r2, [pc, #28]	; (80016e4 <updateClockBuffer+0x54>)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	6013      	str	r3, [r2, #0]
	  led_buffer[1] = second_ones;
 80016ca:	4a06      	ldr	r2, [pc, #24]	; (80016e4 <updateClockBuffer+0x54>)
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	6053      	str	r3, [r2, #4]
  }
 80016d0:	bf00      	nop
 80016d2:	370c      	adds	r7, #12
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bc80      	pop	{r7}
 80016d8:	4770      	bx	lr
 80016da:	bf00      	nop
 80016dc:	20000124 	.word	0x20000124
 80016e0:	66666667 	.word	0x66666667
 80016e4:	2000012c 	.word	0x2000012c

080016e8 <display_traffic1>:

void display_traffic1()
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	af00      	add	r7, sp, #0
	switch (status3)
 80016ec:	4b7d      	ldr	r3, [pc, #500]	; (80018e4 <display_traffic1+0x1fc>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	2b03      	cmp	r3, #3
 80016f2:	f200 80ee 	bhi.w	80018d2 <display_traffic1+0x1ea>
 80016f6:	a201      	add	r2, pc, #4	; (adr r2, 80016fc <display_traffic1+0x14>)
 80016f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016fc:	0800170d 	.word	0x0800170d
 8001700:	08001739 	.word	0x08001739
 8001704:	080017c3 	.word	0x080017c3
 8001708:	0800184b 	.word	0x0800184b
	{
	case INIT :
	second=timer1/100;
 800170c:	4b76      	ldr	r3, [pc, #472]	; (80018e8 <display_traffic1+0x200>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4a76      	ldr	r2, [pc, #472]	; (80018ec <display_traffic1+0x204>)
 8001712:	fb82 1203 	smull	r1, r2, r2, r3
 8001716:	1152      	asrs	r2, r2, #5
 8001718:	17db      	asrs	r3, r3, #31
 800171a:	1ad3      	subs	r3, r2, r3
 800171c:	4a74      	ldr	r2, [pc, #464]	; (80018f0 <display_traffic1+0x208>)
 800171e:	6013      	str	r3, [r2, #0]
	updateClockBuffer ();
 8001720:	f7ff ffb6 	bl	8001690 <updateClockBuffer>
    status3=auto_red;
 8001724:	4b6f      	ldr	r3, [pc, #444]	; (80018e4 <display_traffic1+0x1fc>)
 8001726:	2201      	movs	r2, #1
 8001728:	601a      	str	r2, [r3, #0]
    settimer3(50);
 800172a:	2032      	movs	r0, #50	; 0x32
 800172c:	f7ff fe64 	bl	80013f8 <settimer3>
    settimer4(100);
 8001730:	2064      	movs	r0, #100	; 0x64
 8001732:	f7ff fe75 	bl	8001420 <settimer4>
		break;
 8001736:	e0d3      	b.n	80018e0 <display_traffic1+0x1f8>
	case auto_red :
		if (timer3_flag==1)
 8001738:	4b6e      	ldr	r3, [pc, #440]	; (80018f4 <display_traffic1+0x20c>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	2b01      	cmp	r3, #1
 800173e:	d11f      	bne.n	8001780 <display_traffic1+0x98>
		{
			settimer3 (50) ;
 8001740:	2032      	movs	r0, #50	; 0x32
 8001742:	f7ff fe59 	bl	80013f8 <settimer3>
		    if( index_led < 2 )
 8001746:	4b6c      	ldr	r3, [pc, #432]	; (80018f8 <display_traffic1+0x210>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	2b01      	cmp	r3, #1
 800174c:	dc11      	bgt.n	8001772 <display_traffic1+0x8a>
			{
			  update7SEGa ( index_led ) ;
 800174e:	4b6a      	ldr	r3, [pc, #424]	; (80018f8 <display_traffic1+0x210>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	4618      	mov	r0, r3
 8001754:	f7fe ff74 	bl	8000640 <update7SEGa>
			  display7SEGa ( led_buffer [ index_led ] ) ;
 8001758:	4b67      	ldr	r3, [pc, #412]	; (80018f8 <display_traffic1+0x210>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4a67      	ldr	r2, [pc, #412]	; (80018fc <display_traffic1+0x214>)
 800175e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001762:	4618      	mov	r0, r3
 8001764:	f7fe ff96 	bl	8000694 <display7SEGa>
			  index_led ++ ;
 8001768:	4b63      	ldr	r3, [pc, #396]	; (80018f8 <display_traffic1+0x210>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	3301      	adds	r3, #1
 800176e:	4a62      	ldr	r2, [pc, #392]	; (80018f8 <display_traffic1+0x210>)
 8001770:	6013      	str	r3, [r2, #0]
			}
			if( index_led >= 2 )
 8001772:	4b61      	ldr	r3, [pc, #388]	; (80018f8 <display_traffic1+0x210>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	2b01      	cmp	r3, #1
 8001778:	dd02      	ble.n	8001780 <display_traffic1+0x98>
			{
			  index_led = 0;
 800177a:	4b5f      	ldr	r3, [pc, #380]	; (80018f8 <display_traffic1+0x210>)
 800177c:	2200      	movs	r2, #0
 800177e:	601a      	str	r2, [r3, #0]
			}
		}
		if(timer4_flag==1)
 8001780:	4b5f      	ldr	r3, [pc, #380]	; (8001900 <display_traffic1+0x218>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	2b01      	cmp	r3, #1
 8001786:	f040 80a6 	bne.w	80018d6 <display_traffic1+0x1ee>
		{
			settimer4 (100) ;
 800178a:	2064      	movs	r0, #100	; 0x64
 800178c:	f7ff fe48 	bl	8001420 <settimer4>
			second -- ;
 8001790:	4b57      	ldr	r3, [pc, #348]	; (80018f0 <display_traffic1+0x208>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	3b01      	subs	r3, #1
 8001796:	4a56      	ldr	r2, [pc, #344]	; (80018f0 <display_traffic1+0x208>)
 8001798:	6013      	str	r3, [r2, #0]
			if(second <= 0 )
 800179a:	4b55      	ldr	r3, [pc, #340]	; (80018f0 <display_traffic1+0x208>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	dc0c      	bgt.n	80017bc <display_traffic1+0xd4>
			{
				status3 = auto_green;
 80017a2:	4b50      	ldr	r3, [pc, #320]	; (80018e4 <display_traffic1+0x1fc>)
 80017a4:	2202      	movs	r2, #2
 80017a6:	601a      	str	r2, [r3, #0]
				second = timer2/100;
 80017a8:	4b56      	ldr	r3, [pc, #344]	; (8001904 <display_traffic1+0x21c>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4a4f      	ldr	r2, [pc, #316]	; (80018ec <display_traffic1+0x204>)
 80017ae:	fb82 1203 	smull	r1, r2, r2, r3
 80017b2:	1152      	asrs	r2, r2, #5
 80017b4:	17db      	asrs	r3, r3, #31
 80017b6:	1ad3      	subs	r3, r2, r3
 80017b8:	4a4d      	ldr	r2, [pc, #308]	; (80018f0 <display_traffic1+0x208>)
 80017ba:	6013      	str	r3, [r2, #0]
			}
		   updateClockBuffer () ;
 80017bc:	f7ff ff68 	bl	8001690 <updateClockBuffer>
		}
		break ;
 80017c0:	e089      	b.n	80018d6 <display_traffic1+0x1ee>
	case auto_green :
		if (timer3_flag==1)
 80017c2:	4b4c      	ldr	r3, [pc, #304]	; (80018f4 <display_traffic1+0x20c>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	2b01      	cmp	r3, #1
 80017c8:	d11f      	bne.n	800180a <display_traffic1+0x122>
		{
			settimer3 (50) ;
 80017ca:	2032      	movs	r0, #50	; 0x32
 80017cc:	f7ff fe14 	bl	80013f8 <settimer3>
		    if( index_led < 2 )
 80017d0:	4b49      	ldr	r3, [pc, #292]	; (80018f8 <display_traffic1+0x210>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	2b01      	cmp	r3, #1
 80017d6:	dc11      	bgt.n	80017fc <display_traffic1+0x114>
			{
			  update7SEGa ( index_led ) ;
 80017d8:	4b47      	ldr	r3, [pc, #284]	; (80018f8 <display_traffic1+0x210>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4618      	mov	r0, r3
 80017de:	f7fe ff2f 	bl	8000640 <update7SEGa>
			  display7SEGa ( led_buffer [ index_led ] ) ;
 80017e2:	4b45      	ldr	r3, [pc, #276]	; (80018f8 <display_traffic1+0x210>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	4a45      	ldr	r2, [pc, #276]	; (80018fc <display_traffic1+0x214>)
 80017e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017ec:	4618      	mov	r0, r3
 80017ee:	f7fe ff51 	bl	8000694 <display7SEGa>
			  index_led ++ ;
 80017f2:	4b41      	ldr	r3, [pc, #260]	; (80018f8 <display_traffic1+0x210>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	3301      	adds	r3, #1
 80017f8:	4a3f      	ldr	r2, [pc, #252]	; (80018f8 <display_traffic1+0x210>)
 80017fa:	6013      	str	r3, [r2, #0]
			}
			if( index_led >= 2 )
 80017fc:	4b3e      	ldr	r3, [pc, #248]	; (80018f8 <display_traffic1+0x210>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	2b01      	cmp	r3, #1
 8001802:	dd02      	ble.n	800180a <display_traffic1+0x122>
			{
			  index_led = 0;
 8001804:	4b3c      	ldr	r3, [pc, #240]	; (80018f8 <display_traffic1+0x210>)
 8001806:	2200      	movs	r2, #0
 8001808:	601a      	str	r2, [r3, #0]
			}
		}
		if(timer4_flag==1)
 800180a:	4b3d      	ldr	r3, [pc, #244]	; (8001900 <display_traffic1+0x218>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	2b01      	cmp	r3, #1
 8001810:	d163      	bne.n	80018da <display_traffic1+0x1f2>
		{
			settimer4 (100) ;
 8001812:	2064      	movs	r0, #100	; 0x64
 8001814:	f7ff fe04 	bl	8001420 <settimer4>
			second -- ;
 8001818:	4b35      	ldr	r3, [pc, #212]	; (80018f0 <display_traffic1+0x208>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	3b01      	subs	r3, #1
 800181e:	4a34      	ldr	r2, [pc, #208]	; (80018f0 <display_traffic1+0x208>)
 8001820:	6013      	str	r3, [r2, #0]
			if(second <= 0 )
 8001822:	4b33      	ldr	r3, [pc, #204]	; (80018f0 <display_traffic1+0x208>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	2b00      	cmp	r3, #0
 8001828:	dc0c      	bgt.n	8001844 <display_traffic1+0x15c>
			{
				status3 = auto_yellow;
 800182a:	4b2e      	ldr	r3, [pc, #184]	; (80018e4 <display_traffic1+0x1fc>)
 800182c:	2203      	movs	r2, #3
 800182e:	601a      	str	r2, [r3, #0]
				second = timer3/100;
 8001830:	4b35      	ldr	r3, [pc, #212]	; (8001908 <display_traffic1+0x220>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4a2d      	ldr	r2, [pc, #180]	; (80018ec <display_traffic1+0x204>)
 8001836:	fb82 1203 	smull	r1, r2, r2, r3
 800183a:	1152      	asrs	r2, r2, #5
 800183c:	17db      	asrs	r3, r3, #31
 800183e:	1ad3      	subs	r3, r2, r3
 8001840:	4a2b      	ldr	r2, [pc, #172]	; (80018f0 <display_traffic1+0x208>)
 8001842:	6013      	str	r3, [r2, #0]
			}
		   updateClockBuffer () ;
 8001844:	f7ff ff24 	bl	8001690 <updateClockBuffer>
		}
		break;
 8001848:	e047      	b.n	80018da <display_traffic1+0x1f2>
	case auto_yellow :
		if (timer3_flag==1)
 800184a:	4b2a      	ldr	r3, [pc, #168]	; (80018f4 <display_traffic1+0x20c>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	2b01      	cmp	r3, #1
 8001850:	d11f      	bne.n	8001892 <display_traffic1+0x1aa>
		{
			settimer3 (50) ;
 8001852:	2032      	movs	r0, #50	; 0x32
 8001854:	f7ff fdd0 	bl	80013f8 <settimer3>
		    if( index_led < 2 )
 8001858:	4b27      	ldr	r3, [pc, #156]	; (80018f8 <display_traffic1+0x210>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	2b01      	cmp	r3, #1
 800185e:	dc11      	bgt.n	8001884 <display_traffic1+0x19c>
			{
			  update7SEGa ( index_led ) ;
 8001860:	4b25      	ldr	r3, [pc, #148]	; (80018f8 <display_traffic1+0x210>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4618      	mov	r0, r3
 8001866:	f7fe feeb 	bl	8000640 <update7SEGa>
			  display7SEGa ( led_buffer [ index_led ] ) ;
 800186a:	4b23      	ldr	r3, [pc, #140]	; (80018f8 <display_traffic1+0x210>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	4a23      	ldr	r2, [pc, #140]	; (80018fc <display_traffic1+0x214>)
 8001870:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001874:	4618      	mov	r0, r3
 8001876:	f7fe ff0d 	bl	8000694 <display7SEGa>
			  index_led ++ ;
 800187a:	4b1f      	ldr	r3, [pc, #124]	; (80018f8 <display_traffic1+0x210>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	3301      	adds	r3, #1
 8001880:	4a1d      	ldr	r2, [pc, #116]	; (80018f8 <display_traffic1+0x210>)
 8001882:	6013      	str	r3, [r2, #0]
			}
			if( index_led >= 2 )
 8001884:	4b1c      	ldr	r3, [pc, #112]	; (80018f8 <display_traffic1+0x210>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	2b01      	cmp	r3, #1
 800188a:	dd02      	ble.n	8001892 <display_traffic1+0x1aa>
			{
			  index_led = 0;
 800188c:	4b1a      	ldr	r3, [pc, #104]	; (80018f8 <display_traffic1+0x210>)
 800188e:	2200      	movs	r2, #0
 8001890:	601a      	str	r2, [r3, #0]
			}
		}
		if(timer4_flag==1)
 8001892:	4b1b      	ldr	r3, [pc, #108]	; (8001900 <display_traffic1+0x218>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	2b01      	cmp	r3, #1
 8001898:	d121      	bne.n	80018de <display_traffic1+0x1f6>
		{
			settimer4 (100) ;
 800189a:	2064      	movs	r0, #100	; 0x64
 800189c:	f7ff fdc0 	bl	8001420 <settimer4>
			second -- ;
 80018a0:	4b13      	ldr	r3, [pc, #76]	; (80018f0 <display_traffic1+0x208>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	3b01      	subs	r3, #1
 80018a6:	4a12      	ldr	r2, [pc, #72]	; (80018f0 <display_traffic1+0x208>)
 80018a8:	6013      	str	r3, [r2, #0]
			if(second <= 0 )
 80018aa:	4b11      	ldr	r3, [pc, #68]	; (80018f0 <display_traffic1+0x208>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	dc0c      	bgt.n	80018cc <display_traffic1+0x1e4>
			{
				status3 = auto_red;
 80018b2:	4b0c      	ldr	r3, [pc, #48]	; (80018e4 <display_traffic1+0x1fc>)
 80018b4:	2201      	movs	r2, #1
 80018b6:	601a      	str	r2, [r3, #0]
				second = timer1/100;
 80018b8:	4b0b      	ldr	r3, [pc, #44]	; (80018e8 <display_traffic1+0x200>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	4a0b      	ldr	r2, [pc, #44]	; (80018ec <display_traffic1+0x204>)
 80018be:	fb82 1203 	smull	r1, r2, r2, r3
 80018c2:	1152      	asrs	r2, r2, #5
 80018c4:	17db      	asrs	r3, r3, #31
 80018c6:	1ad3      	subs	r3, r2, r3
 80018c8:	4a09      	ldr	r2, [pc, #36]	; (80018f0 <display_traffic1+0x208>)
 80018ca:	6013      	str	r3, [r2, #0]
			}
		   updateClockBuffer () ;
 80018cc:	f7ff fee0 	bl	8001690 <updateClockBuffer>
		}
		break ;
 80018d0:	e005      	b.n	80018de <display_traffic1+0x1f6>
	default : break ;
 80018d2:	bf00      	nop
 80018d4:	e004      	b.n	80018e0 <display_traffic1+0x1f8>
		break ;
 80018d6:	bf00      	nop
 80018d8:	e002      	b.n	80018e0 <display_traffic1+0x1f8>
		break;
 80018da:	bf00      	nop
 80018dc:	e000      	b.n	80018e0 <display_traffic1+0x1f8>
		break ;
 80018de:	bf00      	nop
	}
}
 80018e0:	bf00      	nop
 80018e2:	bd80      	pop	{r7, pc}
 80018e4:	200000a4 	.word	0x200000a4
 80018e8:	2000004c 	.word	0x2000004c
 80018ec:	51eb851f 	.word	0x51eb851f
 80018f0:	20000124 	.word	0x20000124
 80018f4:	20000108 	.word	0x20000108
 80018f8:	20000128 	.word	0x20000128
 80018fc:	2000012c 	.word	0x2000012c
 8001900:	20000110 	.word	0x20000110
 8001904:	20000050 	.word	0x20000050
 8001908:	20000054 	.word	0x20000054

0800190c <updateClockBuffer2>:
int second2=0;
int index_led2=0;
int led_buffer2[2] = {0 , 0};

void updateClockBuffer2 ()
  {
 800190c:	b480      	push	{r7}
 800190e:	b083      	sub	sp, #12
 8001910:	af00      	add	r7, sp, #0
	  int second_tens=second2/10;
 8001912:	4b11      	ldr	r3, [pc, #68]	; (8001958 <updateClockBuffer2+0x4c>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	4a11      	ldr	r2, [pc, #68]	; (800195c <updateClockBuffer2+0x50>)
 8001918:	fb82 1203 	smull	r1, r2, r2, r3
 800191c:	1092      	asrs	r2, r2, #2
 800191e:	17db      	asrs	r3, r3, #31
 8001920:	1ad3      	subs	r3, r2, r3
 8001922:	607b      	str	r3, [r7, #4]
	  int second_ones=second2%10;
 8001924:	4b0c      	ldr	r3, [pc, #48]	; (8001958 <updateClockBuffer2+0x4c>)
 8001926:	681a      	ldr	r2, [r3, #0]
 8001928:	4b0c      	ldr	r3, [pc, #48]	; (800195c <updateClockBuffer2+0x50>)
 800192a:	fb83 1302 	smull	r1, r3, r3, r2
 800192e:	1099      	asrs	r1, r3, #2
 8001930:	17d3      	asrs	r3, r2, #31
 8001932:	1ac9      	subs	r1, r1, r3
 8001934:	460b      	mov	r3, r1
 8001936:	009b      	lsls	r3, r3, #2
 8001938:	440b      	add	r3, r1
 800193a:	005b      	lsls	r3, r3, #1
 800193c:	1ad3      	subs	r3, r2, r3
 800193e:	603b      	str	r3, [r7, #0]

	  led_buffer2[0] = second_tens;
 8001940:	4a07      	ldr	r2, [pc, #28]	; (8001960 <updateClockBuffer2+0x54>)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	6013      	str	r3, [r2, #0]
	  led_buffer2[1] = second_ones;
 8001946:	4a06      	ldr	r2, [pc, #24]	; (8001960 <updateClockBuffer2+0x54>)
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	6053      	str	r3, [r2, #4]
  }
 800194c:	bf00      	nop
 800194e:	370c      	adds	r7, #12
 8001950:	46bd      	mov	sp, r7
 8001952:	bc80      	pop	{r7}
 8001954:	4770      	bx	lr
 8001956:	bf00      	nop
 8001958:	20000134 	.word	0x20000134
 800195c:	66666667 	.word	0x66666667
 8001960:	2000013c 	.word	0x2000013c

08001964 <display_traffic2>:

void display_traffic2()
{
 8001964:	b580      	push	{r7, lr}
 8001966:	af00      	add	r7, sp, #0
	switch (status4)
 8001968:	4b7d      	ldr	r3, [pc, #500]	; (8001b60 <display_traffic2+0x1fc>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	2b03      	cmp	r3, #3
 800196e:	f200 80ee 	bhi.w	8001b4e <display_traffic2+0x1ea>
 8001972:	a201      	add	r2, pc, #4	; (adr r2, 8001978 <display_traffic2+0x14>)
 8001974:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001978:	08001989 	.word	0x08001989
 800197c:	080019b5 	.word	0x080019b5
 8001980:	08001a3f 	.word	0x08001a3f
 8001984:	08001ac7 	.word	0x08001ac7
	{
	case INIT :
	second2=timer2/100;
 8001988:	4b76      	ldr	r3, [pc, #472]	; (8001b64 <display_traffic2+0x200>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4a76      	ldr	r2, [pc, #472]	; (8001b68 <display_traffic2+0x204>)
 800198e:	fb82 1203 	smull	r1, r2, r2, r3
 8001992:	1152      	asrs	r2, r2, #5
 8001994:	17db      	asrs	r3, r3, #31
 8001996:	1ad3      	subs	r3, r2, r3
 8001998:	4a74      	ldr	r2, [pc, #464]	; (8001b6c <display_traffic2+0x208>)
 800199a:	6013      	str	r3, [r2, #0]
	updateClockBuffer2 ();
 800199c:	f7ff ffb6 	bl	800190c <updateClockBuffer2>
    status4=auto_green;
 80019a0:	4b6f      	ldr	r3, [pc, #444]	; (8001b60 <display_traffic2+0x1fc>)
 80019a2:	2202      	movs	r2, #2
 80019a4:	601a      	str	r2, [r3, #0]
    settimer5(50);
 80019a6:	2032      	movs	r0, #50	; 0x32
 80019a8:	f7ff fd4e 	bl	8001448 <settimer5>
    settimer6(100);
 80019ac:	2064      	movs	r0, #100	; 0x64
 80019ae:	f7ff fd5f 	bl	8001470 <settimer6>
		break;
 80019b2:	e0d3      	b.n	8001b5c <display_traffic2+0x1f8>
	case auto_red :
		if (timer5_flag==1)
 80019b4:	4b6e      	ldr	r3, [pc, #440]	; (8001b70 <display_traffic2+0x20c>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	2b01      	cmp	r3, #1
 80019ba:	d11f      	bne.n	80019fc <display_traffic2+0x98>
		{
			settimer5 (50) ;
 80019bc:	2032      	movs	r0, #50	; 0x32
 80019be:	f7ff fd43 	bl	8001448 <settimer5>
		    if( index_led2 < 2 )
 80019c2:	4b6c      	ldr	r3, [pc, #432]	; (8001b74 <display_traffic2+0x210>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	2b01      	cmp	r3, #1
 80019c8:	dc11      	bgt.n	80019ee <display_traffic2+0x8a>
			{
			  update7SEGb ( index_led2 ) ;
 80019ca:	4b6a      	ldr	r3, [pc, #424]	; (8001b74 <display_traffic2+0x210>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	4618      	mov	r0, r3
 80019d0:	f7fe fff0 	bl	80009b4 <update7SEGb>
			  display7SEGb ( led_buffer2 [ index_led2 ] ) ;
 80019d4:	4b67      	ldr	r3, [pc, #412]	; (8001b74 <display_traffic2+0x210>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4a67      	ldr	r2, [pc, #412]	; (8001b78 <display_traffic2+0x214>)
 80019da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019de:	4618      	mov	r0, r3
 80019e0:	f7ff f814 	bl	8000a0c <display7SEGb>
			  index_led2 ++ ;
 80019e4:	4b63      	ldr	r3, [pc, #396]	; (8001b74 <display_traffic2+0x210>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	3301      	adds	r3, #1
 80019ea:	4a62      	ldr	r2, [pc, #392]	; (8001b74 <display_traffic2+0x210>)
 80019ec:	6013      	str	r3, [r2, #0]
			}
			if( index_led2 >= 2 )
 80019ee:	4b61      	ldr	r3, [pc, #388]	; (8001b74 <display_traffic2+0x210>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	2b01      	cmp	r3, #1
 80019f4:	dd02      	ble.n	80019fc <display_traffic2+0x98>
			{
			  index_led2 = 0;
 80019f6:	4b5f      	ldr	r3, [pc, #380]	; (8001b74 <display_traffic2+0x210>)
 80019f8:	2200      	movs	r2, #0
 80019fa:	601a      	str	r2, [r3, #0]
			}
		}
		if(timer6_flag==1)
 80019fc:	4b5f      	ldr	r3, [pc, #380]	; (8001b7c <display_traffic2+0x218>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	2b01      	cmp	r3, #1
 8001a02:	f040 80a6 	bne.w	8001b52 <display_traffic2+0x1ee>
		{
			settimer6 (100) ;
 8001a06:	2064      	movs	r0, #100	; 0x64
 8001a08:	f7ff fd32 	bl	8001470 <settimer6>
			second2 -- ;
 8001a0c:	4b57      	ldr	r3, [pc, #348]	; (8001b6c <display_traffic2+0x208>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	3b01      	subs	r3, #1
 8001a12:	4a56      	ldr	r2, [pc, #344]	; (8001b6c <display_traffic2+0x208>)
 8001a14:	6013      	str	r3, [r2, #0]
			if(second2 <= 0 )
 8001a16:	4b55      	ldr	r3, [pc, #340]	; (8001b6c <display_traffic2+0x208>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	dc0c      	bgt.n	8001a38 <display_traffic2+0xd4>
			{
				status4 = auto_green;
 8001a1e:	4b50      	ldr	r3, [pc, #320]	; (8001b60 <display_traffic2+0x1fc>)
 8001a20:	2202      	movs	r2, #2
 8001a22:	601a      	str	r2, [r3, #0]
				second2 = timer2/100;
 8001a24:	4b4f      	ldr	r3, [pc, #316]	; (8001b64 <display_traffic2+0x200>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4a4f      	ldr	r2, [pc, #316]	; (8001b68 <display_traffic2+0x204>)
 8001a2a:	fb82 1203 	smull	r1, r2, r2, r3
 8001a2e:	1152      	asrs	r2, r2, #5
 8001a30:	17db      	asrs	r3, r3, #31
 8001a32:	1ad3      	subs	r3, r2, r3
 8001a34:	4a4d      	ldr	r2, [pc, #308]	; (8001b6c <display_traffic2+0x208>)
 8001a36:	6013      	str	r3, [r2, #0]
			}
		   updateClockBuffer2 () ;
 8001a38:	f7ff ff68 	bl	800190c <updateClockBuffer2>
		}
		break ;
 8001a3c:	e089      	b.n	8001b52 <display_traffic2+0x1ee>
	case auto_green :
		if (timer5_flag==1)
 8001a3e:	4b4c      	ldr	r3, [pc, #304]	; (8001b70 <display_traffic2+0x20c>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	2b01      	cmp	r3, #1
 8001a44:	d11f      	bne.n	8001a86 <display_traffic2+0x122>
		{
			settimer5 (50) ;
 8001a46:	2032      	movs	r0, #50	; 0x32
 8001a48:	f7ff fcfe 	bl	8001448 <settimer5>
		    if( index_led2 < 2 )
 8001a4c:	4b49      	ldr	r3, [pc, #292]	; (8001b74 <display_traffic2+0x210>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	2b01      	cmp	r3, #1
 8001a52:	dc11      	bgt.n	8001a78 <display_traffic2+0x114>
			{
			  update7SEGb ( index_led2 ) ;
 8001a54:	4b47      	ldr	r3, [pc, #284]	; (8001b74 <display_traffic2+0x210>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4618      	mov	r0, r3
 8001a5a:	f7fe ffab 	bl	80009b4 <update7SEGb>
			  display7SEGb ( led_buffer2 [ index_led2 ] ) ;
 8001a5e:	4b45      	ldr	r3, [pc, #276]	; (8001b74 <display_traffic2+0x210>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	4a45      	ldr	r2, [pc, #276]	; (8001b78 <display_traffic2+0x214>)
 8001a64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a68:	4618      	mov	r0, r3
 8001a6a:	f7fe ffcf 	bl	8000a0c <display7SEGb>
			  index_led2 ++ ;
 8001a6e:	4b41      	ldr	r3, [pc, #260]	; (8001b74 <display_traffic2+0x210>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	3301      	adds	r3, #1
 8001a74:	4a3f      	ldr	r2, [pc, #252]	; (8001b74 <display_traffic2+0x210>)
 8001a76:	6013      	str	r3, [r2, #0]
			}
			if( index_led2 >= 2 )
 8001a78:	4b3e      	ldr	r3, [pc, #248]	; (8001b74 <display_traffic2+0x210>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	2b01      	cmp	r3, #1
 8001a7e:	dd02      	ble.n	8001a86 <display_traffic2+0x122>
			{
			  index_led2 = 0;
 8001a80:	4b3c      	ldr	r3, [pc, #240]	; (8001b74 <display_traffic2+0x210>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	601a      	str	r2, [r3, #0]
			}
		}
		if(timer6_flag==1)
 8001a86:	4b3d      	ldr	r3, [pc, #244]	; (8001b7c <display_traffic2+0x218>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	2b01      	cmp	r3, #1
 8001a8c:	d163      	bne.n	8001b56 <display_traffic2+0x1f2>
		{
			settimer6 (100) ;
 8001a8e:	2064      	movs	r0, #100	; 0x64
 8001a90:	f7ff fcee 	bl	8001470 <settimer6>
			second2 -- ;
 8001a94:	4b35      	ldr	r3, [pc, #212]	; (8001b6c <display_traffic2+0x208>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	3b01      	subs	r3, #1
 8001a9a:	4a34      	ldr	r2, [pc, #208]	; (8001b6c <display_traffic2+0x208>)
 8001a9c:	6013      	str	r3, [r2, #0]
			if(second2 <= 0 )
 8001a9e:	4b33      	ldr	r3, [pc, #204]	; (8001b6c <display_traffic2+0x208>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	dc0c      	bgt.n	8001ac0 <display_traffic2+0x15c>
			{
				status4 = auto_yellow;
 8001aa6:	4b2e      	ldr	r3, [pc, #184]	; (8001b60 <display_traffic2+0x1fc>)
 8001aa8:	2203      	movs	r2, #3
 8001aaa:	601a      	str	r2, [r3, #0]
				second2 = timer3/100;
 8001aac:	4b34      	ldr	r3, [pc, #208]	; (8001b80 <display_traffic2+0x21c>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4a2d      	ldr	r2, [pc, #180]	; (8001b68 <display_traffic2+0x204>)
 8001ab2:	fb82 1203 	smull	r1, r2, r2, r3
 8001ab6:	1152      	asrs	r2, r2, #5
 8001ab8:	17db      	asrs	r3, r3, #31
 8001aba:	1ad3      	subs	r3, r2, r3
 8001abc:	4a2b      	ldr	r2, [pc, #172]	; (8001b6c <display_traffic2+0x208>)
 8001abe:	6013      	str	r3, [r2, #0]
			}
		   updateClockBuffer2 () ;
 8001ac0:	f7ff ff24 	bl	800190c <updateClockBuffer2>
		}
		break;
 8001ac4:	e047      	b.n	8001b56 <display_traffic2+0x1f2>
	case auto_yellow :
		if (timer5_flag==1)
 8001ac6:	4b2a      	ldr	r3, [pc, #168]	; (8001b70 <display_traffic2+0x20c>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	2b01      	cmp	r3, #1
 8001acc:	d11f      	bne.n	8001b0e <display_traffic2+0x1aa>
		{
			settimer5 (50) ;
 8001ace:	2032      	movs	r0, #50	; 0x32
 8001ad0:	f7ff fcba 	bl	8001448 <settimer5>
		    if( index_led2 < 2 )
 8001ad4:	4b27      	ldr	r3, [pc, #156]	; (8001b74 <display_traffic2+0x210>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	2b01      	cmp	r3, #1
 8001ada:	dc11      	bgt.n	8001b00 <display_traffic2+0x19c>
			{
			  update7SEGb ( index_led2 ) ;
 8001adc:	4b25      	ldr	r3, [pc, #148]	; (8001b74 <display_traffic2+0x210>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f7fe ff67 	bl	80009b4 <update7SEGb>
			  display7SEGb ( led_buffer2 [ index_led2 ] ) ;
 8001ae6:	4b23      	ldr	r3, [pc, #140]	; (8001b74 <display_traffic2+0x210>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4a23      	ldr	r2, [pc, #140]	; (8001b78 <display_traffic2+0x214>)
 8001aec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001af0:	4618      	mov	r0, r3
 8001af2:	f7fe ff8b 	bl	8000a0c <display7SEGb>
			  index_led2 ++ ;
 8001af6:	4b1f      	ldr	r3, [pc, #124]	; (8001b74 <display_traffic2+0x210>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	3301      	adds	r3, #1
 8001afc:	4a1d      	ldr	r2, [pc, #116]	; (8001b74 <display_traffic2+0x210>)
 8001afe:	6013      	str	r3, [r2, #0]
			}
			if( index_led2 >= 2 )
 8001b00:	4b1c      	ldr	r3, [pc, #112]	; (8001b74 <display_traffic2+0x210>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	2b01      	cmp	r3, #1
 8001b06:	dd02      	ble.n	8001b0e <display_traffic2+0x1aa>
			{
			  index_led2 = 0;
 8001b08:	4b1a      	ldr	r3, [pc, #104]	; (8001b74 <display_traffic2+0x210>)
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	601a      	str	r2, [r3, #0]
			}
		}
		if(timer6_flag==1)
 8001b0e:	4b1b      	ldr	r3, [pc, #108]	; (8001b7c <display_traffic2+0x218>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	2b01      	cmp	r3, #1
 8001b14:	d121      	bne.n	8001b5a <display_traffic2+0x1f6>
		{
			settimer6 (100) ;
 8001b16:	2064      	movs	r0, #100	; 0x64
 8001b18:	f7ff fcaa 	bl	8001470 <settimer6>
			second2 -- ;
 8001b1c:	4b13      	ldr	r3, [pc, #76]	; (8001b6c <display_traffic2+0x208>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	3b01      	subs	r3, #1
 8001b22:	4a12      	ldr	r2, [pc, #72]	; (8001b6c <display_traffic2+0x208>)
 8001b24:	6013      	str	r3, [r2, #0]
			if(second2 <= 0 )
 8001b26:	4b11      	ldr	r3, [pc, #68]	; (8001b6c <display_traffic2+0x208>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	dc0c      	bgt.n	8001b48 <display_traffic2+0x1e4>
			{
				status4 = auto_red;
 8001b2e:	4b0c      	ldr	r3, [pc, #48]	; (8001b60 <display_traffic2+0x1fc>)
 8001b30:	2201      	movs	r2, #1
 8001b32:	601a      	str	r2, [r3, #0]
				second2 = timer1/100;
 8001b34:	4b13      	ldr	r3, [pc, #76]	; (8001b84 <display_traffic2+0x220>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4a0b      	ldr	r2, [pc, #44]	; (8001b68 <display_traffic2+0x204>)
 8001b3a:	fb82 1203 	smull	r1, r2, r2, r3
 8001b3e:	1152      	asrs	r2, r2, #5
 8001b40:	17db      	asrs	r3, r3, #31
 8001b42:	1ad3      	subs	r3, r2, r3
 8001b44:	4a09      	ldr	r2, [pc, #36]	; (8001b6c <display_traffic2+0x208>)
 8001b46:	6013      	str	r3, [r2, #0]
			}
		   updateClockBuffer2 () ;
 8001b48:	f7ff fee0 	bl	800190c <updateClockBuffer2>
		}
		break ;
 8001b4c:	e005      	b.n	8001b5a <display_traffic2+0x1f6>
	default : break ;
 8001b4e:	bf00      	nop
 8001b50:	e004      	b.n	8001b5c <display_traffic2+0x1f8>
		break ;
 8001b52:	bf00      	nop
 8001b54:	e002      	b.n	8001b5c <display_traffic2+0x1f8>
		break;
 8001b56:	bf00      	nop
 8001b58:	e000      	b.n	8001b5c <display_traffic2+0x1f8>
		break ;
 8001b5a:	bf00      	nop
	}
}
 8001b5c:	bf00      	nop
 8001b5e:	bd80      	pop	{r7, pc}
 8001b60:	200000a8 	.word	0x200000a8
 8001b64:	20000050 	.word	0x20000050
 8001b68:	51eb851f 	.word	0x51eb851f
 8001b6c:	20000134 	.word	0x20000134
 8001b70:	20000118 	.word	0x20000118
 8001b74:	20000138 	.word	0x20000138
 8001b78:	2000013c 	.word	0x2000013c
 8001b7c:	20000120 	.word	0x20000120
 8001b80:	20000054 	.word	0x20000054
 8001b84:	2000004c 	.word	0x2000004c

08001b88 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001b88:	f7ff fd7c 	bl	8001684 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b8c:	480b      	ldr	r0, [pc, #44]	; (8001bbc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001b8e:	490c      	ldr	r1, [pc, #48]	; (8001bc0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001b90:	4a0c      	ldr	r2, [pc, #48]	; (8001bc4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001b92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b94:	e002      	b.n	8001b9c <LoopCopyDataInit>

08001b96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b9a:	3304      	adds	r3, #4

08001b9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ba0:	d3f9      	bcc.n	8001b96 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ba2:	4a09      	ldr	r2, [pc, #36]	; (8001bc8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001ba4:	4c09      	ldr	r4, [pc, #36]	; (8001bcc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001ba6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ba8:	e001      	b.n	8001bae <LoopFillZerobss>

08001baa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001baa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001bac:	3204      	adds	r2, #4

08001bae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001bb0:	d3fb      	bcc.n	8001baa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001bb2:	f001 faf9 	bl	80031a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001bb6:	f7ff fac7 	bl	8001148 <main>
  bx lr
 8001bba:	4770      	bx	lr
  ldr r0, =_sdata
 8001bbc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001bc0:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8001bc4:	08003234 	.word	0x08003234
  ldr r2, =_sbss
 8001bc8:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8001bcc:	20000148 	.word	0x20000148

08001bd0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001bd0:	e7fe      	b.n	8001bd0 <ADC1_2_IRQHandler>
	...

08001bd4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001bd8:	4b08      	ldr	r3, [pc, #32]	; (8001bfc <HAL_Init+0x28>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4a07      	ldr	r2, [pc, #28]	; (8001bfc <HAL_Init+0x28>)
 8001bde:	f043 0310 	orr.w	r3, r3, #16
 8001be2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001be4:	2003      	movs	r0, #3
 8001be6:	f000 f923 	bl	8001e30 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001bea:	200f      	movs	r0, #15
 8001bec:	f000 f808 	bl	8001c00 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001bf0:	f7ff fcd0 	bl	8001594 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001bf4:	2300      	movs	r3, #0
}
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	bd80      	pop	{r7, pc}
 8001bfa:	bf00      	nop
 8001bfc:	40022000 	.word	0x40022000

08001c00 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b082      	sub	sp, #8
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c08:	4b12      	ldr	r3, [pc, #72]	; (8001c54 <HAL_InitTick+0x54>)
 8001c0a:	681a      	ldr	r2, [r3, #0]
 8001c0c:	4b12      	ldr	r3, [pc, #72]	; (8001c58 <HAL_InitTick+0x58>)
 8001c0e:	781b      	ldrb	r3, [r3, #0]
 8001c10:	4619      	mov	r1, r3
 8001c12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c16:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c1e:	4618      	mov	r0, r3
 8001c20:	f000 f93b 	bl	8001e9a <HAL_SYSTICK_Config>
 8001c24:	4603      	mov	r3, r0
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d001      	beq.n	8001c2e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	e00e      	b.n	8001c4c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	2b0f      	cmp	r3, #15
 8001c32:	d80a      	bhi.n	8001c4a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c34:	2200      	movs	r2, #0
 8001c36:	6879      	ldr	r1, [r7, #4]
 8001c38:	f04f 30ff 	mov.w	r0, #4294967295
 8001c3c:	f000 f903 	bl	8001e46 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c40:	4a06      	ldr	r2, [pc, #24]	; (8001c5c <HAL_InitTick+0x5c>)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c46:	2300      	movs	r3, #0
 8001c48:	e000      	b.n	8001c4c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c4a:	2301      	movs	r3, #1
}
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	3708      	adds	r7, #8
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bd80      	pop	{r7, pc}
 8001c54:	20000058 	.word	0x20000058
 8001c58:	20000060 	.word	0x20000060
 8001c5c:	2000005c 	.word	0x2000005c

08001c60 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c60:	b480      	push	{r7}
 8001c62:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c64:	4b05      	ldr	r3, [pc, #20]	; (8001c7c <HAL_IncTick+0x1c>)
 8001c66:	781b      	ldrb	r3, [r3, #0]
 8001c68:	461a      	mov	r2, r3
 8001c6a:	4b05      	ldr	r3, [pc, #20]	; (8001c80 <HAL_IncTick+0x20>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4413      	add	r3, r2
 8001c70:	4a03      	ldr	r2, [pc, #12]	; (8001c80 <HAL_IncTick+0x20>)
 8001c72:	6013      	str	r3, [r2, #0]
}
 8001c74:	bf00      	nop
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bc80      	pop	{r7}
 8001c7a:	4770      	bx	lr
 8001c7c:	20000060 	.word	0x20000060
 8001c80:	20000144 	.word	0x20000144

08001c84 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c84:	b480      	push	{r7}
 8001c86:	af00      	add	r7, sp, #0
  return uwTick;
 8001c88:	4b02      	ldr	r3, [pc, #8]	; (8001c94 <HAL_GetTick+0x10>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
}
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bc80      	pop	{r7}
 8001c92:	4770      	bx	lr
 8001c94:	20000144 	.word	0x20000144

08001c98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	b085      	sub	sp, #20
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	f003 0307 	and.w	r3, r3, #7
 8001ca6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ca8:	4b0c      	ldr	r3, [pc, #48]	; (8001cdc <__NVIC_SetPriorityGrouping+0x44>)
 8001caa:	68db      	ldr	r3, [r3, #12]
 8001cac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cae:	68ba      	ldr	r2, [r7, #8]
 8001cb0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001cb4:	4013      	ands	r3, r2
 8001cb6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001cbc:	68bb      	ldr	r3, [r7, #8]
 8001cbe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001cc0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001cc4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cc8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cca:	4a04      	ldr	r2, [pc, #16]	; (8001cdc <__NVIC_SetPriorityGrouping+0x44>)
 8001ccc:	68bb      	ldr	r3, [r7, #8]
 8001cce:	60d3      	str	r3, [r2, #12]
}
 8001cd0:	bf00      	nop
 8001cd2:	3714      	adds	r7, #20
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bc80      	pop	{r7}
 8001cd8:	4770      	bx	lr
 8001cda:	bf00      	nop
 8001cdc:	e000ed00 	.word	0xe000ed00

08001ce0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ce4:	4b04      	ldr	r3, [pc, #16]	; (8001cf8 <__NVIC_GetPriorityGrouping+0x18>)
 8001ce6:	68db      	ldr	r3, [r3, #12]
 8001ce8:	0a1b      	lsrs	r3, r3, #8
 8001cea:	f003 0307 	and.w	r3, r3, #7
}
 8001cee:	4618      	mov	r0, r3
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bc80      	pop	{r7}
 8001cf4:	4770      	bx	lr
 8001cf6:	bf00      	nop
 8001cf8:	e000ed00 	.word	0xe000ed00

08001cfc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b083      	sub	sp, #12
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	4603      	mov	r3, r0
 8001d04:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	db0b      	blt.n	8001d26 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d0e:	79fb      	ldrb	r3, [r7, #7]
 8001d10:	f003 021f 	and.w	r2, r3, #31
 8001d14:	4906      	ldr	r1, [pc, #24]	; (8001d30 <__NVIC_EnableIRQ+0x34>)
 8001d16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d1a:	095b      	lsrs	r3, r3, #5
 8001d1c:	2001      	movs	r0, #1
 8001d1e:	fa00 f202 	lsl.w	r2, r0, r2
 8001d22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d26:	bf00      	nop
 8001d28:	370c      	adds	r7, #12
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bc80      	pop	{r7}
 8001d2e:	4770      	bx	lr
 8001d30:	e000e100 	.word	0xe000e100

08001d34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d34:	b480      	push	{r7}
 8001d36:	b083      	sub	sp, #12
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	6039      	str	r1, [r7, #0]
 8001d3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	db0a      	blt.n	8001d5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	b2da      	uxtb	r2, r3
 8001d4c:	490c      	ldr	r1, [pc, #48]	; (8001d80 <__NVIC_SetPriority+0x4c>)
 8001d4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d52:	0112      	lsls	r2, r2, #4
 8001d54:	b2d2      	uxtb	r2, r2
 8001d56:	440b      	add	r3, r1
 8001d58:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d5c:	e00a      	b.n	8001d74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	b2da      	uxtb	r2, r3
 8001d62:	4908      	ldr	r1, [pc, #32]	; (8001d84 <__NVIC_SetPriority+0x50>)
 8001d64:	79fb      	ldrb	r3, [r7, #7]
 8001d66:	f003 030f 	and.w	r3, r3, #15
 8001d6a:	3b04      	subs	r3, #4
 8001d6c:	0112      	lsls	r2, r2, #4
 8001d6e:	b2d2      	uxtb	r2, r2
 8001d70:	440b      	add	r3, r1
 8001d72:	761a      	strb	r2, [r3, #24]
}
 8001d74:	bf00      	nop
 8001d76:	370c      	adds	r7, #12
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bc80      	pop	{r7}
 8001d7c:	4770      	bx	lr
 8001d7e:	bf00      	nop
 8001d80:	e000e100 	.word	0xe000e100
 8001d84:	e000ed00 	.word	0xe000ed00

08001d88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b089      	sub	sp, #36	; 0x24
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	60f8      	str	r0, [r7, #12]
 8001d90:	60b9      	str	r1, [r7, #8]
 8001d92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	f003 0307 	and.w	r3, r3, #7
 8001d9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d9c:	69fb      	ldr	r3, [r7, #28]
 8001d9e:	f1c3 0307 	rsb	r3, r3, #7
 8001da2:	2b04      	cmp	r3, #4
 8001da4:	bf28      	it	cs
 8001da6:	2304      	movcs	r3, #4
 8001da8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001daa:	69fb      	ldr	r3, [r7, #28]
 8001dac:	3304      	adds	r3, #4
 8001dae:	2b06      	cmp	r3, #6
 8001db0:	d902      	bls.n	8001db8 <NVIC_EncodePriority+0x30>
 8001db2:	69fb      	ldr	r3, [r7, #28]
 8001db4:	3b03      	subs	r3, #3
 8001db6:	e000      	b.n	8001dba <NVIC_EncodePriority+0x32>
 8001db8:	2300      	movs	r3, #0
 8001dba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dbc:	f04f 32ff 	mov.w	r2, #4294967295
 8001dc0:	69bb      	ldr	r3, [r7, #24]
 8001dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc6:	43da      	mvns	r2, r3
 8001dc8:	68bb      	ldr	r3, [r7, #8]
 8001dca:	401a      	ands	r2, r3
 8001dcc:	697b      	ldr	r3, [r7, #20]
 8001dce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001dd0:	f04f 31ff 	mov.w	r1, #4294967295
 8001dd4:	697b      	ldr	r3, [r7, #20]
 8001dd6:	fa01 f303 	lsl.w	r3, r1, r3
 8001dda:	43d9      	mvns	r1, r3
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001de0:	4313      	orrs	r3, r2
         );
}
 8001de2:	4618      	mov	r0, r3
 8001de4:	3724      	adds	r7, #36	; 0x24
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bc80      	pop	{r7}
 8001dea:	4770      	bx	lr

08001dec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b082      	sub	sp, #8
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	3b01      	subs	r3, #1
 8001df8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001dfc:	d301      	bcc.n	8001e02 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001dfe:	2301      	movs	r3, #1
 8001e00:	e00f      	b.n	8001e22 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e02:	4a0a      	ldr	r2, [pc, #40]	; (8001e2c <SysTick_Config+0x40>)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	3b01      	subs	r3, #1
 8001e08:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e0a:	210f      	movs	r1, #15
 8001e0c:	f04f 30ff 	mov.w	r0, #4294967295
 8001e10:	f7ff ff90 	bl	8001d34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e14:	4b05      	ldr	r3, [pc, #20]	; (8001e2c <SysTick_Config+0x40>)
 8001e16:	2200      	movs	r2, #0
 8001e18:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e1a:	4b04      	ldr	r3, [pc, #16]	; (8001e2c <SysTick_Config+0x40>)
 8001e1c:	2207      	movs	r2, #7
 8001e1e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e20:	2300      	movs	r3, #0
}
 8001e22:	4618      	mov	r0, r3
 8001e24:	3708      	adds	r7, #8
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd80      	pop	{r7, pc}
 8001e2a:	bf00      	nop
 8001e2c:	e000e010 	.word	0xe000e010

08001e30 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b082      	sub	sp, #8
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e38:	6878      	ldr	r0, [r7, #4]
 8001e3a:	f7ff ff2d 	bl	8001c98 <__NVIC_SetPriorityGrouping>
}
 8001e3e:	bf00      	nop
 8001e40:	3708      	adds	r7, #8
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}

08001e46 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e46:	b580      	push	{r7, lr}
 8001e48:	b086      	sub	sp, #24
 8001e4a:	af00      	add	r7, sp, #0
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	60b9      	str	r1, [r7, #8]
 8001e50:	607a      	str	r2, [r7, #4]
 8001e52:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e54:	2300      	movs	r3, #0
 8001e56:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e58:	f7ff ff42 	bl	8001ce0 <__NVIC_GetPriorityGrouping>
 8001e5c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e5e:	687a      	ldr	r2, [r7, #4]
 8001e60:	68b9      	ldr	r1, [r7, #8]
 8001e62:	6978      	ldr	r0, [r7, #20]
 8001e64:	f7ff ff90 	bl	8001d88 <NVIC_EncodePriority>
 8001e68:	4602      	mov	r2, r0
 8001e6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e6e:	4611      	mov	r1, r2
 8001e70:	4618      	mov	r0, r3
 8001e72:	f7ff ff5f 	bl	8001d34 <__NVIC_SetPriority>
}
 8001e76:	bf00      	nop
 8001e78:	3718      	adds	r7, #24
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}

08001e7e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e7e:	b580      	push	{r7, lr}
 8001e80:	b082      	sub	sp, #8
 8001e82:	af00      	add	r7, sp, #0
 8001e84:	4603      	mov	r3, r0
 8001e86:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	f7ff ff35 	bl	8001cfc <__NVIC_EnableIRQ>
}
 8001e92:	bf00      	nop
 8001e94:	3708      	adds	r7, #8
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}

08001e9a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e9a:	b580      	push	{r7, lr}
 8001e9c:	b082      	sub	sp, #8
 8001e9e:	af00      	add	r7, sp, #0
 8001ea0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ea2:	6878      	ldr	r0, [r7, #4]
 8001ea4:	f7ff ffa2 	bl	8001dec <SysTick_Config>
 8001ea8:	4603      	mov	r3, r0
}
 8001eaa:	4618      	mov	r0, r3
 8001eac:	3708      	adds	r7, #8
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd80      	pop	{r7, pc}
	...

08001eb4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	b08b      	sub	sp, #44	; 0x2c
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
 8001ebc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ec6:	e161      	b.n	800218c <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001ec8:	2201      	movs	r2, #1
 8001eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	69fa      	ldr	r2, [r7, #28]
 8001ed8:	4013      	ands	r3, r2
 8001eda:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001edc:	69ba      	ldr	r2, [r7, #24]
 8001ede:	69fb      	ldr	r3, [r7, #28]
 8001ee0:	429a      	cmp	r2, r3
 8001ee2:	f040 8150 	bne.w	8002186 <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	4a97      	ldr	r2, [pc, #604]	; (8002148 <HAL_GPIO_Init+0x294>)
 8001eec:	4293      	cmp	r3, r2
 8001eee:	d05e      	beq.n	8001fae <HAL_GPIO_Init+0xfa>
 8001ef0:	4a95      	ldr	r2, [pc, #596]	; (8002148 <HAL_GPIO_Init+0x294>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d875      	bhi.n	8001fe2 <HAL_GPIO_Init+0x12e>
 8001ef6:	4a95      	ldr	r2, [pc, #596]	; (800214c <HAL_GPIO_Init+0x298>)
 8001ef8:	4293      	cmp	r3, r2
 8001efa:	d058      	beq.n	8001fae <HAL_GPIO_Init+0xfa>
 8001efc:	4a93      	ldr	r2, [pc, #588]	; (800214c <HAL_GPIO_Init+0x298>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d86f      	bhi.n	8001fe2 <HAL_GPIO_Init+0x12e>
 8001f02:	4a93      	ldr	r2, [pc, #588]	; (8002150 <HAL_GPIO_Init+0x29c>)
 8001f04:	4293      	cmp	r3, r2
 8001f06:	d052      	beq.n	8001fae <HAL_GPIO_Init+0xfa>
 8001f08:	4a91      	ldr	r2, [pc, #580]	; (8002150 <HAL_GPIO_Init+0x29c>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d869      	bhi.n	8001fe2 <HAL_GPIO_Init+0x12e>
 8001f0e:	4a91      	ldr	r2, [pc, #580]	; (8002154 <HAL_GPIO_Init+0x2a0>)
 8001f10:	4293      	cmp	r3, r2
 8001f12:	d04c      	beq.n	8001fae <HAL_GPIO_Init+0xfa>
 8001f14:	4a8f      	ldr	r2, [pc, #572]	; (8002154 <HAL_GPIO_Init+0x2a0>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d863      	bhi.n	8001fe2 <HAL_GPIO_Init+0x12e>
 8001f1a:	4a8f      	ldr	r2, [pc, #572]	; (8002158 <HAL_GPIO_Init+0x2a4>)
 8001f1c:	4293      	cmp	r3, r2
 8001f1e:	d046      	beq.n	8001fae <HAL_GPIO_Init+0xfa>
 8001f20:	4a8d      	ldr	r2, [pc, #564]	; (8002158 <HAL_GPIO_Init+0x2a4>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d85d      	bhi.n	8001fe2 <HAL_GPIO_Init+0x12e>
 8001f26:	2b12      	cmp	r3, #18
 8001f28:	d82a      	bhi.n	8001f80 <HAL_GPIO_Init+0xcc>
 8001f2a:	2b12      	cmp	r3, #18
 8001f2c:	d859      	bhi.n	8001fe2 <HAL_GPIO_Init+0x12e>
 8001f2e:	a201      	add	r2, pc, #4	; (adr r2, 8001f34 <HAL_GPIO_Init+0x80>)
 8001f30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f34:	08001faf 	.word	0x08001faf
 8001f38:	08001f89 	.word	0x08001f89
 8001f3c:	08001f9b 	.word	0x08001f9b
 8001f40:	08001fdd 	.word	0x08001fdd
 8001f44:	08001fe3 	.word	0x08001fe3
 8001f48:	08001fe3 	.word	0x08001fe3
 8001f4c:	08001fe3 	.word	0x08001fe3
 8001f50:	08001fe3 	.word	0x08001fe3
 8001f54:	08001fe3 	.word	0x08001fe3
 8001f58:	08001fe3 	.word	0x08001fe3
 8001f5c:	08001fe3 	.word	0x08001fe3
 8001f60:	08001fe3 	.word	0x08001fe3
 8001f64:	08001fe3 	.word	0x08001fe3
 8001f68:	08001fe3 	.word	0x08001fe3
 8001f6c:	08001fe3 	.word	0x08001fe3
 8001f70:	08001fe3 	.word	0x08001fe3
 8001f74:	08001fe3 	.word	0x08001fe3
 8001f78:	08001f91 	.word	0x08001f91
 8001f7c:	08001fa5 	.word	0x08001fa5
 8001f80:	4a76      	ldr	r2, [pc, #472]	; (800215c <HAL_GPIO_Init+0x2a8>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d013      	beq.n	8001fae <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001f86:	e02c      	b.n	8001fe2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	68db      	ldr	r3, [r3, #12]
 8001f8c:	623b      	str	r3, [r7, #32]
          break;
 8001f8e:	e029      	b.n	8001fe4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	68db      	ldr	r3, [r3, #12]
 8001f94:	3304      	adds	r3, #4
 8001f96:	623b      	str	r3, [r7, #32]
          break;
 8001f98:	e024      	b.n	8001fe4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	68db      	ldr	r3, [r3, #12]
 8001f9e:	3308      	adds	r3, #8
 8001fa0:	623b      	str	r3, [r7, #32]
          break;
 8001fa2:	e01f      	b.n	8001fe4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	68db      	ldr	r3, [r3, #12]
 8001fa8:	330c      	adds	r3, #12
 8001faa:	623b      	str	r3, [r7, #32]
          break;
 8001fac:	e01a      	b.n	8001fe4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	689b      	ldr	r3, [r3, #8]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d102      	bne.n	8001fbc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001fb6:	2304      	movs	r3, #4
 8001fb8:	623b      	str	r3, [r7, #32]
          break;
 8001fba:	e013      	b.n	8001fe4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	689b      	ldr	r3, [r3, #8]
 8001fc0:	2b01      	cmp	r3, #1
 8001fc2:	d105      	bne.n	8001fd0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001fc4:	2308      	movs	r3, #8
 8001fc6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	69fa      	ldr	r2, [r7, #28]
 8001fcc:	611a      	str	r2, [r3, #16]
          break;
 8001fce:	e009      	b.n	8001fe4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001fd0:	2308      	movs	r3, #8
 8001fd2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	69fa      	ldr	r2, [r7, #28]
 8001fd8:	615a      	str	r2, [r3, #20]
          break;
 8001fda:	e003      	b.n	8001fe4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	623b      	str	r3, [r7, #32]
          break;
 8001fe0:	e000      	b.n	8001fe4 <HAL_GPIO_Init+0x130>
          break;
 8001fe2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001fe4:	69bb      	ldr	r3, [r7, #24]
 8001fe6:	2bff      	cmp	r3, #255	; 0xff
 8001fe8:	d801      	bhi.n	8001fee <HAL_GPIO_Init+0x13a>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	e001      	b.n	8001ff2 <HAL_GPIO_Init+0x13e>
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	3304      	adds	r3, #4
 8001ff2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001ff4:	69bb      	ldr	r3, [r7, #24]
 8001ff6:	2bff      	cmp	r3, #255	; 0xff
 8001ff8:	d802      	bhi.n	8002000 <HAL_GPIO_Init+0x14c>
 8001ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ffc:	009b      	lsls	r3, r3, #2
 8001ffe:	e002      	b.n	8002006 <HAL_GPIO_Init+0x152>
 8002000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002002:	3b08      	subs	r3, #8
 8002004:	009b      	lsls	r3, r3, #2
 8002006:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002008:	697b      	ldr	r3, [r7, #20]
 800200a:	681a      	ldr	r2, [r3, #0]
 800200c:	210f      	movs	r1, #15
 800200e:	693b      	ldr	r3, [r7, #16]
 8002010:	fa01 f303 	lsl.w	r3, r1, r3
 8002014:	43db      	mvns	r3, r3
 8002016:	401a      	ands	r2, r3
 8002018:	6a39      	ldr	r1, [r7, #32]
 800201a:	693b      	ldr	r3, [r7, #16]
 800201c:	fa01 f303 	lsl.w	r3, r1, r3
 8002020:	431a      	orrs	r2, r3
 8002022:	697b      	ldr	r3, [r7, #20]
 8002024:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	685b      	ldr	r3, [r3, #4]
 800202a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800202e:	2b00      	cmp	r3, #0
 8002030:	f000 80a9 	beq.w	8002186 <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002034:	4b4a      	ldr	r3, [pc, #296]	; (8002160 <HAL_GPIO_Init+0x2ac>)
 8002036:	699b      	ldr	r3, [r3, #24]
 8002038:	4a49      	ldr	r2, [pc, #292]	; (8002160 <HAL_GPIO_Init+0x2ac>)
 800203a:	f043 0301 	orr.w	r3, r3, #1
 800203e:	6193      	str	r3, [r2, #24]
 8002040:	4b47      	ldr	r3, [pc, #284]	; (8002160 <HAL_GPIO_Init+0x2ac>)
 8002042:	699b      	ldr	r3, [r3, #24]
 8002044:	f003 0301 	and.w	r3, r3, #1
 8002048:	60bb      	str	r3, [r7, #8]
 800204a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800204c:	4a45      	ldr	r2, [pc, #276]	; (8002164 <HAL_GPIO_Init+0x2b0>)
 800204e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002050:	089b      	lsrs	r3, r3, #2
 8002052:	3302      	adds	r3, #2
 8002054:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002058:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800205a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800205c:	f003 0303 	and.w	r3, r3, #3
 8002060:	009b      	lsls	r3, r3, #2
 8002062:	220f      	movs	r2, #15
 8002064:	fa02 f303 	lsl.w	r3, r2, r3
 8002068:	43db      	mvns	r3, r3
 800206a:	68fa      	ldr	r2, [r7, #12]
 800206c:	4013      	ands	r3, r2
 800206e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	4a3d      	ldr	r2, [pc, #244]	; (8002168 <HAL_GPIO_Init+0x2b4>)
 8002074:	4293      	cmp	r3, r2
 8002076:	d00d      	beq.n	8002094 <HAL_GPIO_Init+0x1e0>
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	4a3c      	ldr	r2, [pc, #240]	; (800216c <HAL_GPIO_Init+0x2b8>)
 800207c:	4293      	cmp	r3, r2
 800207e:	d007      	beq.n	8002090 <HAL_GPIO_Init+0x1dc>
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	4a3b      	ldr	r2, [pc, #236]	; (8002170 <HAL_GPIO_Init+0x2bc>)
 8002084:	4293      	cmp	r3, r2
 8002086:	d101      	bne.n	800208c <HAL_GPIO_Init+0x1d8>
 8002088:	2302      	movs	r3, #2
 800208a:	e004      	b.n	8002096 <HAL_GPIO_Init+0x1e2>
 800208c:	2303      	movs	r3, #3
 800208e:	e002      	b.n	8002096 <HAL_GPIO_Init+0x1e2>
 8002090:	2301      	movs	r3, #1
 8002092:	e000      	b.n	8002096 <HAL_GPIO_Init+0x1e2>
 8002094:	2300      	movs	r3, #0
 8002096:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002098:	f002 0203 	and.w	r2, r2, #3
 800209c:	0092      	lsls	r2, r2, #2
 800209e:	4093      	lsls	r3, r2
 80020a0:	68fa      	ldr	r2, [r7, #12]
 80020a2:	4313      	orrs	r3, r2
 80020a4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80020a6:	492f      	ldr	r1, [pc, #188]	; (8002164 <HAL_GPIO_Init+0x2b0>)
 80020a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020aa:	089b      	lsrs	r3, r3, #2
 80020ac:	3302      	adds	r3, #2
 80020ae:	68fa      	ldr	r2, [r7, #12]
 80020b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d006      	beq.n	80020ce <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80020c0:	4b2c      	ldr	r3, [pc, #176]	; (8002174 <HAL_GPIO_Init+0x2c0>)
 80020c2:	689a      	ldr	r2, [r3, #8]
 80020c4:	492b      	ldr	r1, [pc, #172]	; (8002174 <HAL_GPIO_Init+0x2c0>)
 80020c6:	69bb      	ldr	r3, [r7, #24]
 80020c8:	4313      	orrs	r3, r2
 80020ca:	608b      	str	r3, [r1, #8]
 80020cc:	e006      	b.n	80020dc <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80020ce:	4b29      	ldr	r3, [pc, #164]	; (8002174 <HAL_GPIO_Init+0x2c0>)
 80020d0:	689a      	ldr	r2, [r3, #8]
 80020d2:	69bb      	ldr	r3, [r7, #24]
 80020d4:	43db      	mvns	r3, r3
 80020d6:	4927      	ldr	r1, [pc, #156]	; (8002174 <HAL_GPIO_Init+0x2c0>)
 80020d8:	4013      	ands	r3, r2
 80020da:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d006      	beq.n	80020f6 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80020e8:	4b22      	ldr	r3, [pc, #136]	; (8002174 <HAL_GPIO_Init+0x2c0>)
 80020ea:	68da      	ldr	r2, [r3, #12]
 80020ec:	4921      	ldr	r1, [pc, #132]	; (8002174 <HAL_GPIO_Init+0x2c0>)
 80020ee:	69bb      	ldr	r3, [r7, #24]
 80020f0:	4313      	orrs	r3, r2
 80020f2:	60cb      	str	r3, [r1, #12]
 80020f4:	e006      	b.n	8002104 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80020f6:	4b1f      	ldr	r3, [pc, #124]	; (8002174 <HAL_GPIO_Init+0x2c0>)
 80020f8:	68da      	ldr	r2, [r3, #12]
 80020fa:	69bb      	ldr	r3, [r7, #24]
 80020fc:	43db      	mvns	r3, r3
 80020fe:	491d      	ldr	r1, [pc, #116]	; (8002174 <HAL_GPIO_Init+0x2c0>)
 8002100:	4013      	ands	r3, r2
 8002102:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800210c:	2b00      	cmp	r3, #0
 800210e:	d006      	beq.n	800211e <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002110:	4b18      	ldr	r3, [pc, #96]	; (8002174 <HAL_GPIO_Init+0x2c0>)
 8002112:	685a      	ldr	r2, [r3, #4]
 8002114:	4917      	ldr	r1, [pc, #92]	; (8002174 <HAL_GPIO_Init+0x2c0>)
 8002116:	69bb      	ldr	r3, [r7, #24]
 8002118:	4313      	orrs	r3, r2
 800211a:	604b      	str	r3, [r1, #4]
 800211c:	e006      	b.n	800212c <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800211e:	4b15      	ldr	r3, [pc, #84]	; (8002174 <HAL_GPIO_Init+0x2c0>)
 8002120:	685a      	ldr	r2, [r3, #4]
 8002122:	69bb      	ldr	r3, [r7, #24]
 8002124:	43db      	mvns	r3, r3
 8002126:	4913      	ldr	r1, [pc, #76]	; (8002174 <HAL_GPIO_Init+0x2c0>)
 8002128:	4013      	ands	r3, r2
 800212a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002134:	2b00      	cmp	r3, #0
 8002136:	d01f      	beq.n	8002178 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002138:	4b0e      	ldr	r3, [pc, #56]	; (8002174 <HAL_GPIO_Init+0x2c0>)
 800213a:	681a      	ldr	r2, [r3, #0]
 800213c:	490d      	ldr	r1, [pc, #52]	; (8002174 <HAL_GPIO_Init+0x2c0>)
 800213e:	69bb      	ldr	r3, [r7, #24]
 8002140:	4313      	orrs	r3, r2
 8002142:	600b      	str	r3, [r1, #0]
 8002144:	e01f      	b.n	8002186 <HAL_GPIO_Init+0x2d2>
 8002146:	bf00      	nop
 8002148:	10320000 	.word	0x10320000
 800214c:	10310000 	.word	0x10310000
 8002150:	10220000 	.word	0x10220000
 8002154:	10210000 	.word	0x10210000
 8002158:	10120000 	.word	0x10120000
 800215c:	10110000 	.word	0x10110000
 8002160:	40021000 	.word	0x40021000
 8002164:	40010000 	.word	0x40010000
 8002168:	40010800 	.word	0x40010800
 800216c:	40010c00 	.word	0x40010c00
 8002170:	40011000 	.word	0x40011000
 8002174:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002178:	4b0b      	ldr	r3, [pc, #44]	; (80021a8 <HAL_GPIO_Init+0x2f4>)
 800217a:	681a      	ldr	r2, [r3, #0]
 800217c:	69bb      	ldr	r3, [r7, #24]
 800217e:	43db      	mvns	r3, r3
 8002180:	4909      	ldr	r1, [pc, #36]	; (80021a8 <HAL_GPIO_Init+0x2f4>)
 8002182:	4013      	ands	r3, r2
 8002184:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002188:	3301      	adds	r3, #1
 800218a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	681a      	ldr	r2, [r3, #0]
 8002190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002192:	fa22 f303 	lsr.w	r3, r2, r3
 8002196:	2b00      	cmp	r3, #0
 8002198:	f47f ae96 	bne.w	8001ec8 <HAL_GPIO_Init+0x14>
  }
}
 800219c:	bf00      	nop
 800219e:	bf00      	nop
 80021a0:	372c      	adds	r7, #44	; 0x2c
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bc80      	pop	{r7}
 80021a6:	4770      	bx	lr
 80021a8:	40010400 	.word	0x40010400

080021ac <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80021ac:	b480      	push	{r7}
 80021ae:	b085      	sub	sp, #20
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
 80021b4:	460b      	mov	r3, r1
 80021b6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	689a      	ldr	r2, [r3, #8]
 80021bc:	887b      	ldrh	r3, [r7, #2]
 80021be:	4013      	ands	r3, r2
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d002      	beq.n	80021ca <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80021c4:	2301      	movs	r3, #1
 80021c6:	73fb      	strb	r3, [r7, #15]
 80021c8:	e001      	b.n	80021ce <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80021ca:	2300      	movs	r3, #0
 80021cc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80021ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80021d0:	4618      	mov	r0, r3
 80021d2:	3714      	adds	r7, #20
 80021d4:	46bd      	mov	sp, r7
 80021d6:	bc80      	pop	{r7}
 80021d8:	4770      	bx	lr

080021da <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021da:	b480      	push	{r7}
 80021dc:	b083      	sub	sp, #12
 80021de:	af00      	add	r7, sp, #0
 80021e0:	6078      	str	r0, [r7, #4]
 80021e2:	460b      	mov	r3, r1
 80021e4:	807b      	strh	r3, [r7, #2]
 80021e6:	4613      	mov	r3, r2
 80021e8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80021ea:	787b      	ldrb	r3, [r7, #1]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d003      	beq.n	80021f8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80021f0:	887a      	ldrh	r2, [r7, #2]
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80021f6:	e003      	b.n	8002200 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80021f8:	887b      	ldrh	r3, [r7, #2]
 80021fa:	041a      	lsls	r2, r3, #16
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	611a      	str	r2, [r3, #16]
}
 8002200:	bf00      	nop
 8002202:	370c      	adds	r7, #12
 8002204:	46bd      	mov	sp, r7
 8002206:	bc80      	pop	{r7}
 8002208:	4770      	bx	lr
	...

0800220c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b086      	sub	sp, #24
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d101      	bne.n	800221e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800221a:	2301      	movs	r3, #1
 800221c:	e272      	b.n	8002704 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f003 0301 	and.w	r3, r3, #1
 8002226:	2b00      	cmp	r3, #0
 8002228:	f000 8087 	beq.w	800233a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800222c:	4b92      	ldr	r3, [pc, #584]	; (8002478 <HAL_RCC_OscConfig+0x26c>)
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	f003 030c 	and.w	r3, r3, #12
 8002234:	2b04      	cmp	r3, #4
 8002236:	d00c      	beq.n	8002252 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002238:	4b8f      	ldr	r3, [pc, #572]	; (8002478 <HAL_RCC_OscConfig+0x26c>)
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	f003 030c 	and.w	r3, r3, #12
 8002240:	2b08      	cmp	r3, #8
 8002242:	d112      	bne.n	800226a <HAL_RCC_OscConfig+0x5e>
 8002244:	4b8c      	ldr	r3, [pc, #560]	; (8002478 <HAL_RCC_OscConfig+0x26c>)
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800224c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002250:	d10b      	bne.n	800226a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002252:	4b89      	ldr	r3, [pc, #548]	; (8002478 <HAL_RCC_OscConfig+0x26c>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800225a:	2b00      	cmp	r3, #0
 800225c:	d06c      	beq.n	8002338 <HAL_RCC_OscConfig+0x12c>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	2b00      	cmp	r3, #0
 8002264:	d168      	bne.n	8002338 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002266:	2301      	movs	r3, #1
 8002268:	e24c      	b.n	8002704 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002272:	d106      	bne.n	8002282 <HAL_RCC_OscConfig+0x76>
 8002274:	4b80      	ldr	r3, [pc, #512]	; (8002478 <HAL_RCC_OscConfig+0x26c>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4a7f      	ldr	r2, [pc, #508]	; (8002478 <HAL_RCC_OscConfig+0x26c>)
 800227a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800227e:	6013      	str	r3, [r2, #0]
 8002280:	e02e      	b.n	80022e0 <HAL_RCC_OscConfig+0xd4>
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	2b00      	cmp	r3, #0
 8002288:	d10c      	bne.n	80022a4 <HAL_RCC_OscConfig+0x98>
 800228a:	4b7b      	ldr	r3, [pc, #492]	; (8002478 <HAL_RCC_OscConfig+0x26c>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4a7a      	ldr	r2, [pc, #488]	; (8002478 <HAL_RCC_OscConfig+0x26c>)
 8002290:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002294:	6013      	str	r3, [r2, #0]
 8002296:	4b78      	ldr	r3, [pc, #480]	; (8002478 <HAL_RCC_OscConfig+0x26c>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	4a77      	ldr	r2, [pc, #476]	; (8002478 <HAL_RCC_OscConfig+0x26c>)
 800229c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022a0:	6013      	str	r3, [r2, #0]
 80022a2:	e01d      	b.n	80022e0 <HAL_RCC_OscConfig+0xd4>
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80022ac:	d10c      	bne.n	80022c8 <HAL_RCC_OscConfig+0xbc>
 80022ae:	4b72      	ldr	r3, [pc, #456]	; (8002478 <HAL_RCC_OscConfig+0x26c>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4a71      	ldr	r2, [pc, #452]	; (8002478 <HAL_RCC_OscConfig+0x26c>)
 80022b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022b8:	6013      	str	r3, [r2, #0]
 80022ba:	4b6f      	ldr	r3, [pc, #444]	; (8002478 <HAL_RCC_OscConfig+0x26c>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	4a6e      	ldr	r2, [pc, #440]	; (8002478 <HAL_RCC_OscConfig+0x26c>)
 80022c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022c4:	6013      	str	r3, [r2, #0]
 80022c6:	e00b      	b.n	80022e0 <HAL_RCC_OscConfig+0xd4>
 80022c8:	4b6b      	ldr	r3, [pc, #428]	; (8002478 <HAL_RCC_OscConfig+0x26c>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4a6a      	ldr	r2, [pc, #424]	; (8002478 <HAL_RCC_OscConfig+0x26c>)
 80022ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022d2:	6013      	str	r3, [r2, #0]
 80022d4:	4b68      	ldr	r3, [pc, #416]	; (8002478 <HAL_RCC_OscConfig+0x26c>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4a67      	ldr	r2, [pc, #412]	; (8002478 <HAL_RCC_OscConfig+0x26c>)
 80022da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022de:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d013      	beq.n	8002310 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022e8:	f7ff fccc 	bl	8001c84 <HAL_GetTick>
 80022ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022ee:	e008      	b.n	8002302 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022f0:	f7ff fcc8 	bl	8001c84 <HAL_GetTick>
 80022f4:	4602      	mov	r2, r0
 80022f6:	693b      	ldr	r3, [r7, #16]
 80022f8:	1ad3      	subs	r3, r2, r3
 80022fa:	2b64      	cmp	r3, #100	; 0x64
 80022fc:	d901      	bls.n	8002302 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80022fe:	2303      	movs	r3, #3
 8002300:	e200      	b.n	8002704 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002302:	4b5d      	ldr	r3, [pc, #372]	; (8002478 <HAL_RCC_OscConfig+0x26c>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800230a:	2b00      	cmp	r3, #0
 800230c:	d0f0      	beq.n	80022f0 <HAL_RCC_OscConfig+0xe4>
 800230e:	e014      	b.n	800233a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002310:	f7ff fcb8 	bl	8001c84 <HAL_GetTick>
 8002314:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002316:	e008      	b.n	800232a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002318:	f7ff fcb4 	bl	8001c84 <HAL_GetTick>
 800231c:	4602      	mov	r2, r0
 800231e:	693b      	ldr	r3, [r7, #16]
 8002320:	1ad3      	subs	r3, r2, r3
 8002322:	2b64      	cmp	r3, #100	; 0x64
 8002324:	d901      	bls.n	800232a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002326:	2303      	movs	r3, #3
 8002328:	e1ec      	b.n	8002704 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800232a:	4b53      	ldr	r3, [pc, #332]	; (8002478 <HAL_RCC_OscConfig+0x26c>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002332:	2b00      	cmp	r3, #0
 8002334:	d1f0      	bne.n	8002318 <HAL_RCC_OscConfig+0x10c>
 8002336:	e000      	b.n	800233a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002338:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f003 0302 	and.w	r3, r3, #2
 8002342:	2b00      	cmp	r3, #0
 8002344:	d063      	beq.n	800240e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002346:	4b4c      	ldr	r3, [pc, #304]	; (8002478 <HAL_RCC_OscConfig+0x26c>)
 8002348:	685b      	ldr	r3, [r3, #4]
 800234a:	f003 030c 	and.w	r3, r3, #12
 800234e:	2b00      	cmp	r3, #0
 8002350:	d00b      	beq.n	800236a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002352:	4b49      	ldr	r3, [pc, #292]	; (8002478 <HAL_RCC_OscConfig+0x26c>)
 8002354:	685b      	ldr	r3, [r3, #4]
 8002356:	f003 030c 	and.w	r3, r3, #12
 800235a:	2b08      	cmp	r3, #8
 800235c:	d11c      	bne.n	8002398 <HAL_RCC_OscConfig+0x18c>
 800235e:	4b46      	ldr	r3, [pc, #280]	; (8002478 <HAL_RCC_OscConfig+0x26c>)
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002366:	2b00      	cmp	r3, #0
 8002368:	d116      	bne.n	8002398 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800236a:	4b43      	ldr	r3, [pc, #268]	; (8002478 <HAL_RCC_OscConfig+0x26c>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f003 0302 	and.w	r3, r3, #2
 8002372:	2b00      	cmp	r3, #0
 8002374:	d005      	beq.n	8002382 <HAL_RCC_OscConfig+0x176>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	691b      	ldr	r3, [r3, #16]
 800237a:	2b01      	cmp	r3, #1
 800237c:	d001      	beq.n	8002382 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800237e:	2301      	movs	r3, #1
 8002380:	e1c0      	b.n	8002704 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002382:	4b3d      	ldr	r3, [pc, #244]	; (8002478 <HAL_RCC_OscConfig+0x26c>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	695b      	ldr	r3, [r3, #20]
 800238e:	00db      	lsls	r3, r3, #3
 8002390:	4939      	ldr	r1, [pc, #228]	; (8002478 <HAL_RCC_OscConfig+0x26c>)
 8002392:	4313      	orrs	r3, r2
 8002394:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002396:	e03a      	b.n	800240e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	691b      	ldr	r3, [r3, #16]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d020      	beq.n	80023e2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80023a0:	4b36      	ldr	r3, [pc, #216]	; (800247c <HAL_RCC_OscConfig+0x270>)
 80023a2:	2201      	movs	r2, #1
 80023a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023a6:	f7ff fc6d 	bl	8001c84 <HAL_GetTick>
 80023aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023ac:	e008      	b.n	80023c0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023ae:	f7ff fc69 	bl	8001c84 <HAL_GetTick>
 80023b2:	4602      	mov	r2, r0
 80023b4:	693b      	ldr	r3, [r7, #16]
 80023b6:	1ad3      	subs	r3, r2, r3
 80023b8:	2b02      	cmp	r3, #2
 80023ba:	d901      	bls.n	80023c0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80023bc:	2303      	movs	r3, #3
 80023be:	e1a1      	b.n	8002704 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023c0:	4b2d      	ldr	r3, [pc, #180]	; (8002478 <HAL_RCC_OscConfig+0x26c>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f003 0302 	and.w	r3, r3, #2
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d0f0      	beq.n	80023ae <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023cc:	4b2a      	ldr	r3, [pc, #168]	; (8002478 <HAL_RCC_OscConfig+0x26c>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	695b      	ldr	r3, [r3, #20]
 80023d8:	00db      	lsls	r3, r3, #3
 80023da:	4927      	ldr	r1, [pc, #156]	; (8002478 <HAL_RCC_OscConfig+0x26c>)
 80023dc:	4313      	orrs	r3, r2
 80023de:	600b      	str	r3, [r1, #0]
 80023e0:	e015      	b.n	800240e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023e2:	4b26      	ldr	r3, [pc, #152]	; (800247c <HAL_RCC_OscConfig+0x270>)
 80023e4:	2200      	movs	r2, #0
 80023e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023e8:	f7ff fc4c 	bl	8001c84 <HAL_GetTick>
 80023ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023ee:	e008      	b.n	8002402 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023f0:	f7ff fc48 	bl	8001c84 <HAL_GetTick>
 80023f4:	4602      	mov	r2, r0
 80023f6:	693b      	ldr	r3, [r7, #16]
 80023f8:	1ad3      	subs	r3, r2, r3
 80023fa:	2b02      	cmp	r3, #2
 80023fc:	d901      	bls.n	8002402 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80023fe:	2303      	movs	r3, #3
 8002400:	e180      	b.n	8002704 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002402:	4b1d      	ldr	r3, [pc, #116]	; (8002478 <HAL_RCC_OscConfig+0x26c>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f003 0302 	and.w	r3, r3, #2
 800240a:	2b00      	cmp	r3, #0
 800240c:	d1f0      	bne.n	80023f0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f003 0308 	and.w	r3, r3, #8
 8002416:	2b00      	cmp	r3, #0
 8002418:	d03a      	beq.n	8002490 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	699b      	ldr	r3, [r3, #24]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d019      	beq.n	8002456 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002422:	4b17      	ldr	r3, [pc, #92]	; (8002480 <HAL_RCC_OscConfig+0x274>)
 8002424:	2201      	movs	r2, #1
 8002426:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002428:	f7ff fc2c 	bl	8001c84 <HAL_GetTick>
 800242c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800242e:	e008      	b.n	8002442 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002430:	f7ff fc28 	bl	8001c84 <HAL_GetTick>
 8002434:	4602      	mov	r2, r0
 8002436:	693b      	ldr	r3, [r7, #16]
 8002438:	1ad3      	subs	r3, r2, r3
 800243a:	2b02      	cmp	r3, #2
 800243c:	d901      	bls.n	8002442 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800243e:	2303      	movs	r3, #3
 8002440:	e160      	b.n	8002704 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002442:	4b0d      	ldr	r3, [pc, #52]	; (8002478 <HAL_RCC_OscConfig+0x26c>)
 8002444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002446:	f003 0302 	and.w	r3, r3, #2
 800244a:	2b00      	cmp	r3, #0
 800244c:	d0f0      	beq.n	8002430 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800244e:	2001      	movs	r0, #1
 8002450:	f000 fa9c 	bl	800298c <RCC_Delay>
 8002454:	e01c      	b.n	8002490 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002456:	4b0a      	ldr	r3, [pc, #40]	; (8002480 <HAL_RCC_OscConfig+0x274>)
 8002458:	2200      	movs	r2, #0
 800245a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800245c:	f7ff fc12 	bl	8001c84 <HAL_GetTick>
 8002460:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002462:	e00f      	b.n	8002484 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002464:	f7ff fc0e 	bl	8001c84 <HAL_GetTick>
 8002468:	4602      	mov	r2, r0
 800246a:	693b      	ldr	r3, [r7, #16]
 800246c:	1ad3      	subs	r3, r2, r3
 800246e:	2b02      	cmp	r3, #2
 8002470:	d908      	bls.n	8002484 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002472:	2303      	movs	r3, #3
 8002474:	e146      	b.n	8002704 <HAL_RCC_OscConfig+0x4f8>
 8002476:	bf00      	nop
 8002478:	40021000 	.word	0x40021000
 800247c:	42420000 	.word	0x42420000
 8002480:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002484:	4b92      	ldr	r3, [pc, #584]	; (80026d0 <HAL_RCC_OscConfig+0x4c4>)
 8002486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002488:	f003 0302 	and.w	r3, r3, #2
 800248c:	2b00      	cmp	r3, #0
 800248e:	d1e9      	bne.n	8002464 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f003 0304 	and.w	r3, r3, #4
 8002498:	2b00      	cmp	r3, #0
 800249a:	f000 80a6 	beq.w	80025ea <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800249e:	2300      	movs	r3, #0
 80024a0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80024a2:	4b8b      	ldr	r3, [pc, #556]	; (80026d0 <HAL_RCC_OscConfig+0x4c4>)
 80024a4:	69db      	ldr	r3, [r3, #28]
 80024a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d10d      	bne.n	80024ca <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024ae:	4b88      	ldr	r3, [pc, #544]	; (80026d0 <HAL_RCC_OscConfig+0x4c4>)
 80024b0:	69db      	ldr	r3, [r3, #28]
 80024b2:	4a87      	ldr	r2, [pc, #540]	; (80026d0 <HAL_RCC_OscConfig+0x4c4>)
 80024b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024b8:	61d3      	str	r3, [r2, #28]
 80024ba:	4b85      	ldr	r3, [pc, #532]	; (80026d0 <HAL_RCC_OscConfig+0x4c4>)
 80024bc:	69db      	ldr	r3, [r3, #28]
 80024be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024c2:	60bb      	str	r3, [r7, #8]
 80024c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024c6:	2301      	movs	r3, #1
 80024c8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024ca:	4b82      	ldr	r3, [pc, #520]	; (80026d4 <HAL_RCC_OscConfig+0x4c8>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d118      	bne.n	8002508 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80024d6:	4b7f      	ldr	r3, [pc, #508]	; (80026d4 <HAL_RCC_OscConfig+0x4c8>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4a7e      	ldr	r2, [pc, #504]	; (80026d4 <HAL_RCC_OscConfig+0x4c8>)
 80024dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024e2:	f7ff fbcf 	bl	8001c84 <HAL_GetTick>
 80024e6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024e8:	e008      	b.n	80024fc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024ea:	f7ff fbcb 	bl	8001c84 <HAL_GetTick>
 80024ee:	4602      	mov	r2, r0
 80024f0:	693b      	ldr	r3, [r7, #16]
 80024f2:	1ad3      	subs	r3, r2, r3
 80024f4:	2b64      	cmp	r3, #100	; 0x64
 80024f6:	d901      	bls.n	80024fc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80024f8:	2303      	movs	r3, #3
 80024fa:	e103      	b.n	8002704 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024fc:	4b75      	ldr	r3, [pc, #468]	; (80026d4 <HAL_RCC_OscConfig+0x4c8>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002504:	2b00      	cmp	r3, #0
 8002506:	d0f0      	beq.n	80024ea <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	68db      	ldr	r3, [r3, #12]
 800250c:	2b01      	cmp	r3, #1
 800250e:	d106      	bne.n	800251e <HAL_RCC_OscConfig+0x312>
 8002510:	4b6f      	ldr	r3, [pc, #444]	; (80026d0 <HAL_RCC_OscConfig+0x4c4>)
 8002512:	6a1b      	ldr	r3, [r3, #32]
 8002514:	4a6e      	ldr	r2, [pc, #440]	; (80026d0 <HAL_RCC_OscConfig+0x4c4>)
 8002516:	f043 0301 	orr.w	r3, r3, #1
 800251a:	6213      	str	r3, [r2, #32]
 800251c:	e02d      	b.n	800257a <HAL_RCC_OscConfig+0x36e>
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	68db      	ldr	r3, [r3, #12]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d10c      	bne.n	8002540 <HAL_RCC_OscConfig+0x334>
 8002526:	4b6a      	ldr	r3, [pc, #424]	; (80026d0 <HAL_RCC_OscConfig+0x4c4>)
 8002528:	6a1b      	ldr	r3, [r3, #32]
 800252a:	4a69      	ldr	r2, [pc, #420]	; (80026d0 <HAL_RCC_OscConfig+0x4c4>)
 800252c:	f023 0301 	bic.w	r3, r3, #1
 8002530:	6213      	str	r3, [r2, #32]
 8002532:	4b67      	ldr	r3, [pc, #412]	; (80026d0 <HAL_RCC_OscConfig+0x4c4>)
 8002534:	6a1b      	ldr	r3, [r3, #32]
 8002536:	4a66      	ldr	r2, [pc, #408]	; (80026d0 <HAL_RCC_OscConfig+0x4c4>)
 8002538:	f023 0304 	bic.w	r3, r3, #4
 800253c:	6213      	str	r3, [r2, #32]
 800253e:	e01c      	b.n	800257a <HAL_RCC_OscConfig+0x36e>
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	68db      	ldr	r3, [r3, #12]
 8002544:	2b05      	cmp	r3, #5
 8002546:	d10c      	bne.n	8002562 <HAL_RCC_OscConfig+0x356>
 8002548:	4b61      	ldr	r3, [pc, #388]	; (80026d0 <HAL_RCC_OscConfig+0x4c4>)
 800254a:	6a1b      	ldr	r3, [r3, #32]
 800254c:	4a60      	ldr	r2, [pc, #384]	; (80026d0 <HAL_RCC_OscConfig+0x4c4>)
 800254e:	f043 0304 	orr.w	r3, r3, #4
 8002552:	6213      	str	r3, [r2, #32]
 8002554:	4b5e      	ldr	r3, [pc, #376]	; (80026d0 <HAL_RCC_OscConfig+0x4c4>)
 8002556:	6a1b      	ldr	r3, [r3, #32]
 8002558:	4a5d      	ldr	r2, [pc, #372]	; (80026d0 <HAL_RCC_OscConfig+0x4c4>)
 800255a:	f043 0301 	orr.w	r3, r3, #1
 800255e:	6213      	str	r3, [r2, #32]
 8002560:	e00b      	b.n	800257a <HAL_RCC_OscConfig+0x36e>
 8002562:	4b5b      	ldr	r3, [pc, #364]	; (80026d0 <HAL_RCC_OscConfig+0x4c4>)
 8002564:	6a1b      	ldr	r3, [r3, #32]
 8002566:	4a5a      	ldr	r2, [pc, #360]	; (80026d0 <HAL_RCC_OscConfig+0x4c4>)
 8002568:	f023 0301 	bic.w	r3, r3, #1
 800256c:	6213      	str	r3, [r2, #32]
 800256e:	4b58      	ldr	r3, [pc, #352]	; (80026d0 <HAL_RCC_OscConfig+0x4c4>)
 8002570:	6a1b      	ldr	r3, [r3, #32]
 8002572:	4a57      	ldr	r2, [pc, #348]	; (80026d0 <HAL_RCC_OscConfig+0x4c4>)
 8002574:	f023 0304 	bic.w	r3, r3, #4
 8002578:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	68db      	ldr	r3, [r3, #12]
 800257e:	2b00      	cmp	r3, #0
 8002580:	d015      	beq.n	80025ae <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002582:	f7ff fb7f 	bl	8001c84 <HAL_GetTick>
 8002586:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002588:	e00a      	b.n	80025a0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800258a:	f7ff fb7b 	bl	8001c84 <HAL_GetTick>
 800258e:	4602      	mov	r2, r0
 8002590:	693b      	ldr	r3, [r7, #16]
 8002592:	1ad3      	subs	r3, r2, r3
 8002594:	f241 3288 	movw	r2, #5000	; 0x1388
 8002598:	4293      	cmp	r3, r2
 800259a:	d901      	bls.n	80025a0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800259c:	2303      	movs	r3, #3
 800259e:	e0b1      	b.n	8002704 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025a0:	4b4b      	ldr	r3, [pc, #300]	; (80026d0 <HAL_RCC_OscConfig+0x4c4>)
 80025a2:	6a1b      	ldr	r3, [r3, #32]
 80025a4:	f003 0302 	and.w	r3, r3, #2
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d0ee      	beq.n	800258a <HAL_RCC_OscConfig+0x37e>
 80025ac:	e014      	b.n	80025d8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025ae:	f7ff fb69 	bl	8001c84 <HAL_GetTick>
 80025b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025b4:	e00a      	b.n	80025cc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025b6:	f7ff fb65 	bl	8001c84 <HAL_GetTick>
 80025ba:	4602      	mov	r2, r0
 80025bc:	693b      	ldr	r3, [r7, #16]
 80025be:	1ad3      	subs	r3, r2, r3
 80025c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80025c4:	4293      	cmp	r3, r2
 80025c6:	d901      	bls.n	80025cc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80025c8:	2303      	movs	r3, #3
 80025ca:	e09b      	b.n	8002704 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025cc:	4b40      	ldr	r3, [pc, #256]	; (80026d0 <HAL_RCC_OscConfig+0x4c4>)
 80025ce:	6a1b      	ldr	r3, [r3, #32]
 80025d0:	f003 0302 	and.w	r3, r3, #2
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d1ee      	bne.n	80025b6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80025d8:	7dfb      	ldrb	r3, [r7, #23]
 80025da:	2b01      	cmp	r3, #1
 80025dc:	d105      	bne.n	80025ea <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025de:	4b3c      	ldr	r3, [pc, #240]	; (80026d0 <HAL_RCC_OscConfig+0x4c4>)
 80025e0:	69db      	ldr	r3, [r3, #28]
 80025e2:	4a3b      	ldr	r2, [pc, #236]	; (80026d0 <HAL_RCC_OscConfig+0x4c4>)
 80025e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025e8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	69db      	ldr	r3, [r3, #28]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	f000 8087 	beq.w	8002702 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80025f4:	4b36      	ldr	r3, [pc, #216]	; (80026d0 <HAL_RCC_OscConfig+0x4c4>)
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	f003 030c 	and.w	r3, r3, #12
 80025fc:	2b08      	cmp	r3, #8
 80025fe:	d061      	beq.n	80026c4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	69db      	ldr	r3, [r3, #28]
 8002604:	2b02      	cmp	r3, #2
 8002606:	d146      	bne.n	8002696 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002608:	4b33      	ldr	r3, [pc, #204]	; (80026d8 <HAL_RCC_OscConfig+0x4cc>)
 800260a:	2200      	movs	r2, #0
 800260c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800260e:	f7ff fb39 	bl	8001c84 <HAL_GetTick>
 8002612:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002614:	e008      	b.n	8002628 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002616:	f7ff fb35 	bl	8001c84 <HAL_GetTick>
 800261a:	4602      	mov	r2, r0
 800261c:	693b      	ldr	r3, [r7, #16]
 800261e:	1ad3      	subs	r3, r2, r3
 8002620:	2b02      	cmp	r3, #2
 8002622:	d901      	bls.n	8002628 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002624:	2303      	movs	r3, #3
 8002626:	e06d      	b.n	8002704 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002628:	4b29      	ldr	r3, [pc, #164]	; (80026d0 <HAL_RCC_OscConfig+0x4c4>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002630:	2b00      	cmp	r3, #0
 8002632:	d1f0      	bne.n	8002616 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6a1b      	ldr	r3, [r3, #32]
 8002638:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800263c:	d108      	bne.n	8002650 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800263e:	4b24      	ldr	r3, [pc, #144]	; (80026d0 <HAL_RCC_OscConfig+0x4c4>)
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	689b      	ldr	r3, [r3, #8]
 800264a:	4921      	ldr	r1, [pc, #132]	; (80026d0 <HAL_RCC_OscConfig+0x4c4>)
 800264c:	4313      	orrs	r3, r2
 800264e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002650:	4b1f      	ldr	r3, [pc, #124]	; (80026d0 <HAL_RCC_OscConfig+0x4c4>)
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6a19      	ldr	r1, [r3, #32]
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002660:	430b      	orrs	r3, r1
 8002662:	491b      	ldr	r1, [pc, #108]	; (80026d0 <HAL_RCC_OscConfig+0x4c4>)
 8002664:	4313      	orrs	r3, r2
 8002666:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002668:	4b1b      	ldr	r3, [pc, #108]	; (80026d8 <HAL_RCC_OscConfig+0x4cc>)
 800266a:	2201      	movs	r2, #1
 800266c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800266e:	f7ff fb09 	bl	8001c84 <HAL_GetTick>
 8002672:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002674:	e008      	b.n	8002688 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002676:	f7ff fb05 	bl	8001c84 <HAL_GetTick>
 800267a:	4602      	mov	r2, r0
 800267c:	693b      	ldr	r3, [r7, #16]
 800267e:	1ad3      	subs	r3, r2, r3
 8002680:	2b02      	cmp	r3, #2
 8002682:	d901      	bls.n	8002688 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002684:	2303      	movs	r3, #3
 8002686:	e03d      	b.n	8002704 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002688:	4b11      	ldr	r3, [pc, #68]	; (80026d0 <HAL_RCC_OscConfig+0x4c4>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002690:	2b00      	cmp	r3, #0
 8002692:	d0f0      	beq.n	8002676 <HAL_RCC_OscConfig+0x46a>
 8002694:	e035      	b.n	8002702 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002696:	4b10      	ldr	r3, [pc, #64]	; (80026d8 <HAL_RCC_OscConfig+0x4cc>)
 8002698:	2200      	movs	r2, #0
 800269a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800269c:	f7ff faf2 	bl	8001c84 <HAL_GetTick>
 80026a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026a2:	e008      	b.n	80026b6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026a4:	f7ff faee 	bl	8001c84 <HAL_GetTick>
 80026a8:	4602      	mov	r2, r0
 80026aa:	693b      	ldr	r3, [r7, #16]
 80026ac:	1ad3      	subs	r3, r2, r3
 80026ae:	2b02      	cmp	r3, #2
 80026b0:	d901      	bls.n	80026b6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80026b2:	2303      	movs	r3, #3
 80026b4:	e026      	b.n	8002704 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026b6:	4b06      	ldr	r3, [pc, #24]	; (80026d0 <HAL_RCC_OscConfig+0x4c4>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d1f0      	bne.n	80026a4 <HAL_RCC_OscConfig+0x498>
 80026c2:	e01e      	b.n	8002702 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	69db      	ldr	r3, [r3, #28]
 80026c8:	2b01      	cmp	r3, #1
 80026ca:	d107      	bne.n	80026dc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80026cc:	2301      	movs	r3, #1
 80026ce:	e019      	b.n	8002704 <HAL_RCC_OscConfig+0x4f8>
 80026d0:	40021000 	.word	0x40021000
 80026d4:	40007000 	.word	0x40007000
 80026d8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80026dc:	4b0b      	ldr	r3, [pc, #44]	; (800270c <HAL_RCC_OscConfig+0x500>)
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6a1b      	ldr	r3, [r3, #32]
 80026ec:	429a      	cmp	r2, r3
 80026ee:	d106      	bne.n	80026fe <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026fa:	429a      	cmp	r2, r3
 80026fc:	d001      	beq.n	8002702 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80026fe:	2301      	movs	r3, #1
 8002700:	e000      	b.n	8002704 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002702:	2300      	movs	r3, #0
}
 8002704:	4618      	mov	r0, r3
 8002706:	3718      	adds	r7, #24
 8002708:	46bd      	mov	sp, r7
 800270a:	bd80      	pop	{r7, pc}
 800270c:	40021000 	.word	0x40021000

08002710 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b084      	sub	sp, #16
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
 8002718:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2b00      	cmp	r3, #0
 800271e:	d101      	bne.n	8002724 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002720:	2301      	movs	r3, #1
 8002722:	e0d0      	b.n	80028c6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002724:	4b6a      	ldr	r3, [pc, #424]	; (80028d0 <HAL_RCC_ClockConfig+0x1c0>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f003 0307 	and.w	r3, r3, #7
 800272c:	683a      	ldr	r2, [r7, #0]
 800272e:	429a      	cmp	r2, r3
 8002730:	d910      	bls.n	8002754 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002732:	4b67      	ldr	r3, [pc, #412]	; (80028d0 <HAL_RCC_ClockConfig+0x1c0>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f023 0207 	bic.w	r2, r3, #7
 800273a:	4965      	ldr	r1, [pc, #404]	; (80028d0 <HAL_RCC_ClockConfig+0x1c0>)
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	4313      	orrs	r3, r2
 8002740:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002742:	4b63      	ldr	r3, [pc, #396]	; (80028d0 <HAL_RCC_ClockConfig+0x1c0>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f003 0307 	and.w	r3, r3, #7
 800274a:	683a      	ldr	r2, [r7, #0]
 800274c:	429a      	cmp	r2, r3
 800274e:	d001      	beq.n	8002754 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002750:	2301      	movs	r3, #1
 8002752:	e0b8      	b.n	80028c6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f003 0302 	and.w	r3, r3, #2
 800275c:	2b00      	cmp	r3, #0
 800275e:	d020      	beq.n	80027a2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f003 0304 	and.w	r3, r3, #4
 8002768:	2b00      	cmp	r3, #0
 800276a:	d005      	beq.n	8002778 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800276c:	4b59      	ldr	r3, [pc, #356]	; (80028d4 <HAL_RCC_ClockConfig+0x1c4>)
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	4a58      	ldr	r2, [pc, #352]	; (80028d4 <HAL_RCC_ClockConfig+0x1c4>)
 8002772:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002776:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f003 0308 	and.w	r3, r3, #8
 8002780:	2b00      	cmp	r3, #0
 8002782:	d005      	beq.n	8002790 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002784:	4b53      	ldr	r3, [pc, #332]	; (80028d4 <HAL_RCC_ClockConfig+0x1c4>)
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	4a52      	ldr	r2, [pc, #328]	; (80028d4 <HAL_RCC_ClockConfig+0x1c4>)
 800278a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800278e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002790:	4b50      	ldr	r3, [pc, #320]	; (80028d4 <HAL_RCC_ClockConfig+0x1c4>)
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	689b      	ldr	r3, [r3, #8]
 800279c:	494d      	ldr	r1, [pc, #308]	; (80028d4 <HAL_RCC_ClockConfig+0x1c4>)
 800279e:	4313      	orrs	r3, r2
 80027a0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f003 0301 	and.w	r3, r3, #1
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d040      	beq.n	8002830 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	2b01      	cmp	r3, #1
 80027b4:	d107      	bne.n	80027c6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027b6:	4b47      	ldr	r3, [pc, #284]	; (80028d4 <HAL_RCC_ClockConfig+0x1c4>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d115      	bne.n	80027ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027c2:	2301      	movs	r3, #1
 80027c4:	e07f      	b.n	80028c6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	2b02      	cmp	r3, #2
 80027cc:	d107      	bne.n	80027de <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027ce:	4b41      	ldr	r3, [pc, #260]	; (80028d4 <HAL_RCC_ClockConfig+0x1c4>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d109      	bne.n	80027ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027da:	2301      	movs	r3, #1
 80027dc:	e073      	b.n	80028c6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027de:	4b3d      	ldr	r3, [pc, #244]	; (80028d4 <HAL_RCC_ClockConfig+0x1c4>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f003 0302 	and.w	r3, r3, #2
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d101      	bne.n	80027ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027ea:	2301      	movs	r3, #1
 80027ec:	e06b      	b.n	80028c6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80027ee:	4b39      	ldr	r3, [pc, #228]	; (80028d4 <HAL_RCC_ClockConfig+0x1c4>)
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	f023 0203 	bic.w	r2, r3, #3
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	4936      	ldr	r1, [pc, #216]	; (80028d4 <HAL_RCC_ClockConfig+0x1c4>)
 80027fc:	4313      	orrs	r3, r2
 80027fe:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002800:	f7ff fa40 	bl	8001c84 <HAL_GetTick>
 8002804:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002806:	e00a      	b.n	800281e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002808:	f7ff fa3c 	bl	8001c84 <HAL_GetTick>
 800280c:	4602      	mov	r2, r0
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	1ad3      	subs	r3, r2, r3
 8002812:	f241 3288 	movw	r2, #5000	; 0x1388
 8002816:	4293      	cmp	r3, r2
 8002818:	d901      	bls.n	800281e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800281a:	2303      	movs	r3, #3
 800281c:	e053      	b.n	80028c6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800281e:	4b2d      	ldr	r3, [pc, #180]	; (80028d4 <HAL_RCC_ClockConfig+0x1c4>)
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	f003 020c 	and.w	r2, r3, #12
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	009b      	lsls	r3, r3, #2
 800282c:	429a      	cmp	r2, r3
 800282e:	d1eb      	bne.n	8002808 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002830:	4b27      	ldr	r3, [pc, #156]	; (80028d0 <HAL_RCC_ClockConfig+0x1c0>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f003 0307 	and.w	r3, r3, #7
 8002838:	683a      	ldr	r2, [r7, #0]
 800283a:	429a      	cmp	r2, r3
 800283c:	d210      	bcs.n	8002860 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800283e:	4b24      	ldr	r3, [pc, #144]	; (80028d0 <HAL_RCC_ClockConfig+0x1c0>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f023 0207 	bic.w	r2, r3, #7
 8002846:	4922      	ldr	r1, [pc, #136]	; (80028d0 <HAL_RCC_ClockConfig+0x1c0>)
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	4313      	orrs	r3, r2
 800284c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800284e:	4b20      	ldr	r3, [pc, #128]	; (80028d0 <HAL_RCC_ClockConfig+0x1c0>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f003 0307 	and.w	r3, r3, #7
 8002856:	683a      	ldr	r2, [r7, #0]
 8002858:	429a      	cmp	r2, r3
 800285a:	d001      	beq.n	8002860 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800285c:	2301      	movs	r3, #1
 800285e:	e032      	b.n	80028c6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f003 0304 	and.w	r3, r3, #4
 8002868:	2b00      	cmp	r3, #0
 800286a:	d008      	beq.n	800287e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800286c:	4b19      	ldr	r3, [pc, #100]	; (80028d4 <HAL_RCC_ClockConfig+0x1c4>)
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	68db      	ldr	r3, [r3, #12]
 8002878:	4916      	ldr	r1, [pc, #88]	; (80028d4 <HAL_RCC_ClockConfig+0x1c4>)
 800287a:	4313      	orrs	r3, r2
 800287c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f003 0308 	and.w	r3, r3, #8
 8002886:	2b00      	cmp	r3, #0
 8002888:	d009      	beq.n	800289e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800288a:	4b12      	ldr	r3, [pc, #72]	; (80028d4 <HAL_RCC_ClockConfig+0x1c4>)
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	691b      	ldr	r3, [r3, #16]
 8002896:	00db      	lsls	r3, r3, #3
 8002898:	490e      	ldr	r1, [pc, #56]	; (80028d4 <HAL_RCC_ClockConfig+0x1c4>)
 800289a:	4313      	orrs	r3, r2
 800289c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800289e:	f000 f821 	bl	80028e4 <HAL_RCC_GetSysClockFreq>
 80028a2:	4602      	mov	r2, r0
 80028a4:	4b0b      	ldr	r3, [pc, #44]	; (80028d4 <HAL_RCC_ClockConfig+0x1c4>)
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	091b      	lsrs	r3, r3, #4
 80028aa:	f003 030f 	and.w	r3, r3, #15
 80028ae:	490a      	ldr	r1, [pc, #40]	; (80028d8 <HAL_RCC_ClockConfig+0x1c8>)
 80028b0:	5ccb      	ldrb	r3, [r1, r3]
 80028b2:	fa22 f303 	lsr.w	r3, r2, r3
 80028b6:	4a09      	ldr	r2, [pc, #36]	; (80028dc <HAL_RCC_ClockConfig+0x1cc>)
 80028b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80028ba:	4b09      	ldr	r3, [pc, #36]	; (80028e0 <HAL_RCC_ClockConfig+0x1d0>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4618      	mov	r0, r3
 80028c0:	f7ff f99e 	bl	8001c00 <HAL_InitTick>

  return HAL_OK;
 80028c4:	2300      	movs	r3, #0
}
 80028c6:	4618      	mov	r0, r3
 80028c8:	3710      	adds	r7, #16
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bd80      	pop	{r7, pc}
 80028ce:	bf00      	nop
 80028d0:	40022000 	.word	0x40022000
 80028d4:	40021000 	.word	0x40021000
 80028d8:	08003208 	.word	0x08003208
 80028dc:	20000058 	.word	0x20000058
 80028e0:	2000005c 	.word	0x2000005c

080028e4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028e4:	b480      	push	{r7}
 80028e6:	b087      	sub	sp, #28
 80028e8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80028ea:	2300      	movs	r3, #0
 80028ec:	60fb      	str	r3, [r7, #12]
 80028ee:	2300      	movs	r3, #0
 80028f0:	60bb      	str	r3, [r7, #8]
 80028f2:	2300      	movs	r3, #0
 80028f4:	617b      	str	r3, [r7, #20]
 80028f6:	2300      	movs	r3, #0
 80028f8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80028fa:	2300      	movs	r3, #0
 80028fc:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80028fe:	4b1e      	ldr	r3, [pc, #120]	; (8002978 <HAL_RCC_GetSysClockFreq+0x94>)
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	f003 030c 	and.w	r3, r3, #12
 800290a:	2b04      	cmp	r3, #4
 800290c:	d002      	beq.n	8002914 <HAL_RCC_GetSysClockFreq+0x30>
 800290e:	2b08      	cmp	r3, #8
 8002910:	d003      	beq.n	800291a <HAL_RCC_GetSysClockFreq+0x36>
 8002912:	e027      	b.n	8002964 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002914:	4b19      	ldr	r3, [pc, #100]	; (800297c <HAL_RCC_GetSysClockFreq+0x98>)
 8002916:	613b      	str	r3, [r7, #16]
      break;
 8002918:	e027      	b.n	800296a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	0c9b      	lsrs	r3, r3, #18
 800291e:	f003 030f 	and.w	r3, r3, #15
 8002922:	4a17      	ldr	r2, [pc, #92]	; (8002980 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002924:	5cd3      	ldrb	r3, [r2, r3]
 8002926:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800292e:	2b00      	cmp	r3, #0
 8002930:	d010      	beq.n	8002954 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002932:	4b11      	ldr	r3, [pc, #68]	; (8002978 <HAL_RCC_GetSysClockFreq+0x94>)
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	0c5b      	lsrs	r3, r3, #17
 8002938:	f003 0301 	and.w	r3, r3, #1
 800293c:	4a11      	ldr	r2, [pc, #68]	; (8002984 <HAL_RCC_GetSysClockFreq+0xa0>)
 800293e:	5cd3      	ldrb	r3, [r2, r3]
 8002940:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	4a0d      	ldr	r2, [pc, #52]	; (800297c <HAL_RCC_GetSysClockFreq+0x98>)
 8002946:	fb03 f202 	mul.w	r2, r3, r2
 800294a:	68bb      	ldr	r3, [r7, #8]
 800294c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002950:	617b      	str	r3, [r7, #20]
 8002952:	e004      	b.n	800295e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	4a0c      	ldr	r2, [pc, #48]	; (8002988 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002958:	fb02 f303 	mul.w	r3, r2, r3
 800295c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800295e:	697b      	ldr	r3, [r7, #20]
 8002960:	613b      	str	r3, [r7, #16]
      break;
 8002962:	e002      	b.n	800296a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002964:	4b05      	ldr	r3, [pc, #20]	; (800297c <HAL_RCC_GetSysClockFreq+0x98>)
 8002966:	613b      	str	r3, [r7, #16]
      break;
 8002968:	bf00      	nop
    }
  }
  return sysclockfreq;
 800296a:	693b      	ldr	r3, [r7, #16]
}
 800296c:	4618      	mov	r0, r3
 800296e:	371c      	adds	r7, #28
 8002970:	46bd      	mov	sp, r7
 8002972:	bc80      	pop	{r7}
 8002974:	4770      	bx	lr
 8002976:	bf00      	nop
 8002978:	40021000 	.word	0x40021000
 800297c:	007a1200 	.word	0x007a1200
 8002980:	08003218 	.word	0x08003218
 8002984:	08003228 	.word	0x08003228
 8002988:	003d0900 	.word	0x003d0900

0800298c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800298c:	b480      	push	{r7}
 800298e:	b085      	sub	sp, #20
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002994:	4b0a      	ldr	r3, [pc, #40]	; (80029c0 <RCC_Delay+0x34>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4a0a      	ldr	r2, [pc, #40]	; (80029c4 <RCC_Delay+0x38>)
 800299a:	fba2 2303 	umull	r2, r3, r2, r3
 800299e:	0a5b      	lsrs	r3, r3, #9
 80029a0:	687a      	ldr	r2, [r7, #4]
 80029a2:	fb02 f303 	mul.w	r3, r2, r3
 80029a6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80029a8:	bf00      	nop
  }
  while (Delay --);
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	1e5a      	subs	r2, r3, #1
 80029ae:	60fa      	str	r2, [r7, #12]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d1f9      	bne.n	80029a8 <RCC_Delay+0x1c>
}
 80029b4:	bf00      	nop
 80029b6:	bf00      	nop
 80029b8:	3714      	adds	r7, #20
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bc80      	pop	{r7}
 80029be:	4770      	bx	lr
 80029c0:	20000058 	.word	0x20000058
 80029c4:	10624dd3 	.word	0x10624dd3

080029c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b082      	sub	sp, #8
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d101      	bne.n	80029da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80029d6:	2301      	movs	r3, #1
 80029d8:	e041      	b.n	8002a5e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029e0:	b2db      	uxtb	r3, r3
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d106      	bne.n	80029f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	2200      	movs	r2, #0
 80029ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80029ee:	6878      	ldr	r0, [r7, #4]
 80029f0:	f7fe fdf2 	bl	80015d8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2202      	movs	r2, #2
 80029f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681a      	ldr	r2, [r3, #0]
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	3304      	adds	r3, #4
 8002a04:	4619      	mov	r1, r3
 8002a06:	4610      	mov	r0, r2
 8002a08:	f000 fa6e 	bl	8002ee8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2201      	movs	r2, #1
 8002a10:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2201      	movs	r2, #1
 8002a18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2201      	movs	r2, #1
 8002a20:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2201      	movs	r2, #1
 8002a28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2201      	movs	r2, #1
 8002a30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2201      	movs	r2, #1
 8002a38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2201      	movs	r2, #1
 8002a40:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2201      	movs	r2, #1
 8002a48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2201      	movs	r2, #1
 8002a50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2201      	movs	r2, #1
 8002a58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002a5c:	2300      	movs	r3, #0
}
 8002a5e:	4618      	mov	r0, r3
 8002a60:	3708      	adds	r7, #8
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bd80      	pop	{r7, pc}
	...

08002a68 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002a68:	b480      	push	{r7}
 8002a6a:	b085      	sub	sp, #20
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a76:	b2db      	uxtb	r3, r3
 8002a78:	2b01      	cmp	r3, #1
 8002a7a:	d001      	beq.n	8002a80 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002a7c:	2301      	movs	r3, #1
 8002a7e:	e035      	b.n	8002aec <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2202      	movs	r2, #2
 8002a84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	68da      	ldr	r2, [r3, #12]
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f042 0201 	orr.w	r2, r2, #1
 8002a96:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4a16      	ldr	r2, [pc, #88]	; (8002af8 <HAL_TIM_Base_Start_IT+0x90>)
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d009      	beq.n	8002ab6 <HAL_TIM_Base_Start_IT+0x4e>
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002aaa:	d004      	beq.n	8002ab6 <HAL_TIM_Base_Start_IT+0x4e>
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4a12      	ldr	r2, [pc, #72]	; (8002afc <HAL_TIM_Base_Start_IT+0x94>)
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d111      	bne.n	8002ada <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	689b      	ldr	r3, [r3, #8]
 8002abc:	f003 0307 	and.w	r3, r3, #7
 8002ac0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	2b06      	cmp	r3, #6
 8002ac6:	d010      	beq.n	8002aea <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	681a      	ldr	r2, [r3, #0]
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f042 0201 	orr.w	r2, r2, #1
 8002ad6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ad8:	e007      	b.n	8002aea <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	681a      	ldr	r2, [r3, #0]
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f042 0201 	orr.w	r2, r2, #1
 8002ae8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002aea:	2300      	movs	r3, #0
}
 8002aec:	4618      	mov	r0, r3
 8002aee:	3714      	adds	r7, #20
 8002af0:	46bd      	mov	sp, r7
 8002af2:	bc80      	pop	{r7}
 8002af4:	4770      	bx	lr
 8002af6:	bf00      	nop
 8002af8:	40012c00 	.word	0x40012c00
 8002afc:	40000400 	.word	0x40000400

08002b00 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b082      	sub	sp, #8
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	691b      	ldr	r3, [r3, #16]
 8002b0e:	f003 0302 	and.w	r3, r3, #2
 8002b12:	2b02      	cmp	r3, #2
 8002b14:	d122      	bne.n	8002b5c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	68db      	ldr	r3, [r3, #12]
 8002b1c:	f003 0302 	and.w	r3, r3, #2
 8002b20:	2b02      	cmp	r3, #2
 8002b22:	d11b      	bne.n	8002b5c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f06f 0202 	mvn.w	r2, #2
 8002b2c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2201      	movs	r2, #1
 8002b32:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	699b      	ldr	r3, [r3, #24]
 8002b3a:	f003 0303 	and.w	r3, r3, #3
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d003      	beq.n	8002b4a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002b42:	6878      	ldr	r0, [r7, #4]
 8002b44:	f000 f9b4 	bl	8002eb0 <HAL_TIM_IC_CaptureCallback>
 8002b48:	e005      	b.n	8002b56 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b4a:	6878      	ldr	r0, [r7, #4]
 8002b4c:	f000 f9a7 	bl	8002e9e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b50:	6878      	ldr	r0, [r7, #4]
 8002b52:	f000 f9b6 	bl	8002ec2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2200      	movs	r2, #0
 8002b5a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	691b      	ldr	r3, [r3, #16]
 8002b62:	f003 0304 	and.w	r3, r3, #4
 8002b66:	2b04      	cmp	r3, #4
 8002b68:	d122      	bne.n	8002bb0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	68db      	ldr	r3, [r3, #12]
 8002b70:	f003 0304 	and.w	r3, r3, #4
 8002b74:	2b04      	cmp	r3, #4
 8002b76:	d11b      	bne.n	8002bb0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f06f 0204 	mvn.w	r2, #4
 8002b80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2202      	movs	r2, #2
 8002b86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	699b      	ldr	r3, [r3, #24]
 8002b8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d003      	beq.n	8002b9e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b96:	6878      	ldr	r0, [r7, #4]
 8002b98:	f000 f98a 	bl	8002eb0 <HAL_TIM_IC_CaptureCallback>
 8002b9c:	e005      	b.n	8002baa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b9e:	6878      	ldr	r0, [r7, #4]
 8002ba0:	f000 f97d 	bl	8002e9e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ba4:	6878      	ldr	r0, [r7, #4]
 8002ba6:	f000 f98c 	bl	8002ec2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2200      	movs	r2, #0
 8002bae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	691b      	ldr	r3, [r3, #16]
 8002bb6:	f003 0308 	and.w	r3, r3, #8
 8002bba:	2b08      	cmp	r3, #8
 8002bbc:	d122      	bne.n	8002c04 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	68db      	ldr	r3, [r3, #12]
 8002bc4:	f003 0308 	and.w	r3, r3, #8
 8002bc8:	2b08      	cmp	r3, #8
 8002bca:	d11b      	bne.n	8002c04 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f06f 0208 	mvn.w	r2, #8
 8002bd4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2204      	movs	r2, #4
 8002bda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	69db      	ldr	r3, [r3, #28]
 8002be2:	f003 0303 	and.w	r3, r3, #3
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d003      	beq.n	8002bf2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002bea:	6878      	ldr	r0, [r7, #4]
 8002bec:	f000 f960 	bl	8002eb0 <HAL_TIM_IC_CaptureCallback>
 8002bf0:	e005      	b.n	8002bfe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bf2:	6878      	ldr	r0, [r7, #4]
 8002bf4:	f000 f953 	bl	8002e9e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bf8:	6878      	ldr	r0, [r7, #4]
 8002bfa:	f000 f962 	bl	8002ec2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2200      	movs	r2, #0
 8002c02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	691b      	ldr	r3, [r3, #16]
 8002c0a:	f003 0310 	and.w	r3, r3, #16
 8002c0e:	2b10      	cmp	r3, #16
 8002c10:	d122      	bne.n	8002c58 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	68db      	ldr	r3, [r3, #12]
 8002c18:	f003 0310 	and.w	r3, r3, #16
 8002c1c:	2b10      	cmp	r3, #16
 8002c1e:	d11b      	bne.n	8002c58 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f06f 0210 	mvn.w	r2, #16
 8002c28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2208      	movs	r2, #8
 8002c2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	69db      	ldr	r3, [r3, #28]
 8002c36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d003      	beq.n	8002c46 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c3e:	6878      	ldr	r0, [r7, #4]
 8002c40:	f000 f936 	bl	8002eb0 <HAL_TIM_IC_CaptureCallback>
 8002c44:	e005      	b.n	8002c52 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c46:	6878      	ldr	r0, [r7, #4]
 8002c48:	f000 f929 	bl	8002e9e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c4c:	6878      	ldr	r0, [r7, #4]
 8002c4e:	f000 f938 	bl	8002ec2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2200      	movs	r2, #0
 8002c56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	691b      	ldr	r3, [r3, #16]
 8002c5e:	f003 0301 	and.w	r3, r3, #1
 8002c62:	2b01      	cmp	r3, #1
 8002c64:	d10e      	bne.n	8002c84 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	68db      	ldr	r3, [r3, #12]
 8002c6c:	f003 0301 	and.w	r3, r3, #1
 8002c70:	2b01      	cmp	r3, #1
 8002c72:	d107      	bne.n	8002c84 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f06f 0201 	mvn.w	r2, #1
 8002c7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002c7e:	6878      	ldr	r0, [r7, #4]
 8002c80:	f7fe fb80 	bl	8001384 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	691b      	ldr	r3, [r3, #16]
 8002c8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c8e:	2b80      	cmp	r3, #128	; 0x80
 8002c90:	d10e      	bne.n	8002cb0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	68db      	ldr	r3, [r3, #12]
 8002c98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c9c:	2b80      	cmp	r3, #128	; 0x80
 8002c9e:	d107      	bne.n	8002cb0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002ca8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002caa:	6878      	ldr	r0, [r7, #4]
 8002cac:	f000 fa6b 	bl	8003186 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	691b      	ldr	r3, [r3, #16]
 8002cb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cba:	2b40      	cmp	r3, #64	; 0x40
 8002cbc:	d10e      	bne.n	8002cdc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	68db      	ldr	r3, [r3, #12]
 8002cc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cc8:	2b40      	cmp	r3, #64	; 0x40
 8002cca:	d107      	bne.n	8002cdc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002cd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002cd6:	6878      	ldr	r0, [r7, #4]
 8002cd8:	f000 f8fc 	bl	8002ed4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	691b      	ldr	r3, [r3, #16]
 8002ce2:	f003 0320 	and.w	r3, r3, #32
 8002ce6:	2b20      	cmp	r3, #32
 8002ce8:	d10e      	bne.n	8002d08 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	68db      	ldr	r3, [r3, #12]
 8002cf0:	f003 0320 	and.w	r3, r3, #32
 8002cf4:	2b20      	cmp	r3, #32
 8002cf6:	d107      	bne.n	8002d08 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f06f 0220 	mvn.w	r2, #32
 8002d00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002d02:	6878      	ldr	r0, [r7, #4]
 8002d04:	f000 fa36 	bl	8003174 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002d08:	bf00      	nop
 8002d0a:	3708      	adds	r7, #8
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	bd80      	pop	{r7, pc}

08002d10 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b084      	sub	sp, #16
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
 8002d18:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d24:	2b01      	cmp	r3, #1
 8002d26:	d101      	bne.n	8002d2c <HAL_TIM_ConfigClockSource+0x1c>
 8002d28:	2302      	movs	r3, #2
 8002d2a:	e0b4      	b.n	8002e96 <HAL_TIM_ConfigClockSource+0x186>
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2201      	movs	r2, #1
 8002d30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2202      	movs	r2, #2
 8002d38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	689b      	ldr	r3, [r3, #8]
 8002d42:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002d44:	68bb      	ldr	r3, [r7, #8]
 8002d46:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002d4a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002d4c:	68bb      	ldr	r3, [r7, #8]
 8002d4e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002d52:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	68ba      	ldr	r2, [r7, #8]
 8002d5a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d64:	d03e      	beq.n	8002de4 <HAL_TIM_ConfigClockSource+0xd4>
 8002d66:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d6a:	f200 8087 	bhi.w	8002e7c <HAL_TIM_ConfigClockSource+0x16c>
 8002d6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d72:	f000 8086 	beq.w	8002e82 <HAL_TIM_ConfigClockSource+0x172>
 8002d76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d7a:	d87f      	bhi.n	8002e7c <HAL_TIM_ConfigClockSource+0x16c>
 8002d7c:	2b70      	cmp	r3, #112	; 0x70
 8002d7e:	d01a      	beq.n	8002db6 <HAL_TIM_ConfigClockSource+0xa6>
 8002d80:	2b70      	cmp	r3, #112	; 0x70
 8002d82:	d87b      	bhi.n	8002e7c <HAL_TIM_ConfigClockSource+0x16c>
 8002d84:	2b60      	cmp	r3, #96	; 0x60
 8002d86:	d050      	beq.n	8002e2a <HAL_TIM_ConfigClockSource+0x11a>
 8002d88:	2b60      	cmp	r3, #96	; 0x60
 8002d8a:	d877      	bhi.n	8002e7c <HAL_TIM_ConfigClockSource+0x16c>
 8002d8c:	2b50      	cmp	r3, #80	; 0x50
 8002d8e:	d03c      	beq.n	8002e0a <HAL_TIM_ConfigClockSource+0xfa>
 8002d90:	2b50      	cmp	r3, #80	; 0x50
 8002d92:	d873      	bhi.n	8002e7c <HAL_TIM_ConfigClockSource+0x16c>
 8002d94:	2b40      	cmp	r3, #64	; 0x40
 8002d96:	d058      	beq.n	8002e4a <HAL_TIM_ConfigClockSource+0x13a>
 8002d98:	2b40      	cmp	r3, #64	; 0x40
 8002d9a:	d86f      	bhi.n	8002e7c <HAL_TIM_ConfigClockSource+0x16c>
 8002d9c:	2b30      	cmp	r3, #48	; 0x30
 8002d9e:	d064      	beq.n	8002e6a <HAL_TIM_ConfigClockSource+0x15a>
 8002da0:	2b30      	cmp	r3, #48	; 0x30
 8002da2:	d86b      	bhi.n	8002e7c <HAL_TIM_ConfigClockSource+0x16c>
 8002da4:	2b20      	cmp	r3, #32
 8002da6:	d060      	beq.n	8002e6a <HAL_TIM_ConfigClockSource+0x15a>
 8002da8:	2b20      	cmp	r3, #32
 8002daa:	d867      	bhi.n	8002e7c <HAL_TIM_ConfigClockSource+0x16c>
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d05c      	beq.n	8002e6a <HAL_TIM_ConfigClockSource+0x15a>
 8002db0:	2b10      	cmp	r3, #16
 8002db2:	d05a      	beq.n	8002e6a <HAL_TIM_ConfigClockSource+0x15a>
 8002db4:	e062      	b.n	8002e7c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002dc6:	f000 f95e 	bl	8003086 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	689b      	ldr	r3, [r3, #8]
 8002dd0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002dd2:	68bb      	ldr	r3, [r7, #8]
 8002dd4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002dd8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	68ba      	ldr	r2, [r7, #8]
 8002de0:	609a      	str	r2, [r3, #8]
      break;
 8002de2:	e04f      	b.n	8002e84 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002df4:	f000 f947 	bl	8003086 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	689a      	ldr	r2, [r3, #8]
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002e06:	609a      	str	r2, [r3, #8]
      break;
 8002e08:	e03c      	b.n	8002e84 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e16:	461a      	mov	r2, r3
 8002e18:	f000 f8be 	bl	8002f98 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	2150      	movs	r1, #80	; 0x50
 8002e22:	4618      	mov	r0, r3
 8002e24:	f000 f915 	bl	8003052 <TIM_ITRx_SetConfig>
      break;
 8002e28:	e02c      	b.n	8002e84 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002e36:	461a      	mov	r2, r3
 8002e38:	f000 f8dc 	bl	8002ff4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	2160      	movs	r1, #96	; 0x60
 8002e42:	4618      	mov	r0, r3
 8002e44:	f000 f905 	bl	8003052 <TIM_ITRx_SetConfig>
      break;
 8002e48:	e01c      	b.n	8002e84 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e56:	461a      	mov	r2, r3
 8002e58:	f000 f89e 	bl	8002f98 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	2140      	movs	r1, #64	; 0x40
 8002e62:	4618      	mov	r0, r3
 8002e64:	f000 f8f5 	bl	8003052 <TIM_ITRx_SetConfig>
      break;
 8002e68:	e00c      	b.n	8002e84 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681a      	ldr	r2, [r3, #0]
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4619      	mov	r1, r3
 8002e74:	4610      	mov	r0, r2
 8002e76:	f000 f8ec 	bl	8003052 <TIM_ITRx_SetConfig>
      break;
 8002e7a:	e003      	b.n	8002e84 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	73fb      	strb	r3, [r7, #15]
      break;
 8002e80:	e000      	b.n	8002e84 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002e82:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2201      	movs	r2, #1
 8002e88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2200      	movs	r2, #0
 8002e90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002e94:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e96:	4618      	mov	r0, r3
 8002e98:	3710      	adds	r7, #16
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bd80      	pop	{r7, pc}

08002e9e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002e9e:	b480      	push	{r7}
 8002ea0:	b083      	sub	sp, #12
 8002ea2:	af00      	add	r7, sp, #0
 8002ea4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002ea6:	bf00      	nop
 8002ea8:	370c      	adds	r7, #12
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bc80      	pop	{r7}
 8002eae:	4770      	bx	lr

08002eb0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	b083      	sub	sp, #12
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002eb8:	bf00      	nop
 8002eba:	370c      	adds	r7, #12
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	bc80      	pop	{r7}
 8002ec0:	4770      	bx	lr

08002ec2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002ec2:	b480      	push	{r7}
 8002ec4:	b083      	sub	sp, #12
 8002ec6:	af00      	add	r7, sp, #0
 8002ec8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002eca:	bf00      	nop
 8002ecc:	370c      	adds	r7, #12
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bc80      	pop	{r7}
 8002ed2:	4770      	bx	lr

08002ed4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	b083      	sub	sp, #12
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002edc:	bf00      	nop
 8002ede:	370c      	adds	r7, #12
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	bc80      	pop	{r7}
 8002ee4:	4770      	bx	lr
	...

08002ee8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002ee8:	b480      	push	{r7}
 8002eea:	b085      	sub	sp, #20
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
 8002ef0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	4a25      	ldr	r2, [pc, #148]	; (8002f90 <TIM_Base_SetConfig+0xa8>)
 8002efc:	4293      	cmp	r3, r2
 8002efe:	d007      	beq.n	8002f10 <TIM_Base_SetConfig+0x28>
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f06:	d003      	beq.n	8002f10 <TIM_Base_SetConfig+0x28>
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	4a22      	ldr	r2, [pc, #136]	; (8002f94 <TIM_Base_SetConfig+0xac>)
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d108      	bne.n	8002f22 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f16:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	68fa      	ldr	r2, [r7, #12]
 8002f1e:	4313      	orrs	r3, r2
 8002f20:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	4a1a      	ldr	r2, [pc, #104]	; (8002f90 <TIM_Base_SetConfig+0xa8>)
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d007      	beq.n	8002f3a <TIM_Base_SetConfig+0x52>
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f30:	d003      	beq.n	8002f3a <TIM_Base_SetConfig+0x52>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	4a17      	ldr	r2, [pc, #92]	; (8002f94 <TIM_Base_SetConfig+0xac>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d108      	bne.n	8002f4c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f40:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	68db      	ldr	r3, [r3, #12]
 8002f46:	68fa      	ldr	r2, [r7, #12]
 8002f48:	4313      	orrs	r3, r2
 8002f4a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	695b      	ldr	r3, [r3, #20]
 8002f56:	4313      	orrs	r3, r2
 8002f58:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	68fa      	ldr	r2, [r7, #12]
 8002f5e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	689a      	ldr	r2, [r3, #8]
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	681a      	ldr	r2, [r3, #0]
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	4a07      	ldr	r2, [pc, #28]	; (8002f90 <TIM_Base_SetConfig+0xa8>)
 8002f74:	4293      	cmp	r3, r2
 8002f76:	d103      	bne.n	8002f80 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	691a      	ldr	r2, [r3, #16]
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2201      	movs	r2, #1
 8002f84:	615a      	str	r2, [r3, #20]
}
 8002f86:	bf00      	nop
 8002f88:	3714      	adds	r7, #20
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bc80      	pop	{r7}
 8002f8e:	4770      	bx	lr
 8002f90:	40012c00 	.word	0x40012c00
 8002f94:	40000400 	.word	0x40000400

08002f98 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002f98:	b480      	push	{r7}
 8002f9a:	b087      	sub	sp, #28
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	60f8      	str	r0, [r7, #12]
 8002fa0:	60b9      	str	r1, [r7, #8]
 8002fa2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	6a1b      	ldr	r3, [r3, #32]
 8002fa8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	6a1b      	ldr	r3, [r3, #32]
 8002fae:	f023 0201 	bic.w	r2, r3, #1
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	699b      	ldr	r3, [r3, #24]
 8002fba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002fbc:	693b      	ldr	r3, [r7, #16]
 8002fbe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002fc2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	011b      	lsls	r3, r3, #4
 8002fc8:	693a      	ldr	r2, [r7, #16]
 8002fca:	4313      	orrs	r3, r2
 8002fcc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002fce:	697b      	ldr	r3, [r7, #20]
 8002fd0:	f023 030a 	bic.w	r3, r3, #10
 8002fd4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002fd6:	697a      	ldr	r2, [r7, #20]
 8002fd8:	68bb      	ldr	r3, [r7, #8]
 8002fda:	4313      	orrs	r3, r2
 8002fdc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	693a      	ldr	r2, [r7, #16]
 8002fe2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	697a      	ldr	r2, [r7, #20]
 8002fe8:	621a      	str	r2, [r3, #32]
}
 8002fea:	bf00      	nop
 8002fec:	371c      	adds	r7, #28
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	bc80      	pop	{r7}
 8002ff2:	4770      	bx	lr

08002ff4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	b087      	sub	sp, #28
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	60f8      	str	r0, [r7, #12]
 8002ffc:	60b9      	str	r1, [r7, #8]
 8002ffe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	6a1b      	ldr	r3, [r3, #32]
 8003004:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	6a1b      	ldr	r3, [r3, #32]
 800300a:	f023 0210 	bic.w	r2, r3, #16
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	699b      	ldr	r3, [r3, #24]
 8003016:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003018:	693b      	ldr	r3, [r7, #16]
 800301a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800301e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	031b      	lsls	r3, r3, #12
 8003024:	693a      	ldr	r2, [r7, #16]
 8003026:	4313      	orrs	r3, r2
 8003028:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800302a:	697b      	ldr	r3, [r7, #20]
 800302c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003030:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003032:	68bb      	ldr	r3, [r7, #8]
 8003034:	011b      	lsls	r3, r3, #4
 8003036:	697a      	ldr	r2, [r7, #20]
 8003038:	4313      	orrs	r3, r2
 800303a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	693a      	ldr	r2, [r7, #16]
 8003040:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	697a      	ldr	r2, [r7, #20]
 8003046:	621a      	str	r2, [r3, #32]
}
 8003048:	bf00      	nop
 800304a:	371c      	adds	r7, #28
 800304c:	46bd      	mov	sp, r7
 800304e:	bc80      	pop	{r7}
 8003050:	4770      	bx	lr

08003052 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003052:	b480      	push	{r7}
 8003054:	b085      	sub	sp, #20
 8003056:	af00      	add	r7, sp, #0
 8003058:	6078      	str	r0, [r7, #4]
 800305a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	689b      	ldr	r3, [r3, #8]
 8003060:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003068:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800306a:	683a      	ldr	r2, [r7, #0]
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	4313      	orrs	r3, r2
 8003070:	f043 0307 	orr.w	r3, r3, #7
 8003074:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	68fa      	ldr	r2, [r7, #12]
 800307a:	609a      	str	r2, [r3, #8]
}
 800307c:	bf00      	nop
 800307e:	3714      	adds	r7, #20
 8003080:	46bd      	mov	sp, r7
 8003082:	bc80      	pop	{r7}
 8003084:	4770      	bx	lr

08003086 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003086:	b480      	push	{r7}
 8003088:	b087      	sub	sp, #28
 800308a:	af00      	add	r7, sp, #0
 800308c:	60f8      	str	r0, [r7, #12]
 800308e:	60b9      	str	r1, [r7, #8]
 8003090:	607a      	str	r2, [r7, #4]
 8003092:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	689b      	ldr	r3, [r3, #8]
 8003098:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800309a:	697b      	ldr	r3, [r7, #20]
 800309c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80030a0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	021a      	lsls	r2, r3, #8
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	431a      	orrs	r2, r3
 80030aa:	68bb      	ldr	r3, [r7, #8]
 80030ac:	4313      	orrs	r3, r2
 80030ae:	697a      	ldr	r2, [r7, #20]
 80030b0:	4313      	orrs	r3, r2
 80030b2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	697a      	ldr	r2, [r7, #20]
 80030b8:	609a      	str	r2, [r3, #8]
}
 80030ba:	bf00      	nop
 80030bc:	371c      	adds	r7, #28
 80030be:	46bd      	mov	sp, r7
 80030c0:	bc80      	pop	{r7}
 80030c2:	4770      	bx	lr

080030c4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80030c4:	b480      	push	{r7}
 80030c6:	b085      	sub	sp, #20
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
 80030cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030d4:	2b01      	cmp	r3, #1
 80030d6:	d101      	bne.n	80030dc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80030d8:	2302      	movs	r3, #2
 80030da:	e041      	b.n	8003160 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2201      	movs	r2, #1
 80030e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2202      	movs	r2, #2
 80030e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	685b      	ldr	r3, [r3, #4]
 80030f2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	689b      	ldr	r3, [r3, #8]
 80030fa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003102:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	68fa      	ldr	r2, [r7, #12]
 800310a:	4313      	orrs	r3, r2
 800310c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	68fa      	ldr	r2, [r7, #12]
 8003114:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	4a14      	ldr	r2, [pc, #80]	; (800316c <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 800311c:	4293      	cmp	r3, r2
 800311e:	d009      	beq.n	8003134 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003128:	d004      	beq.n	8003134 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4a10      	ldr	r2, [pc, #64]	; (8003170 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8003130:	4293      	cmp	r3, r2
 8003132:	d10c      	bne.n	800314e <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003134:	68bb      	ldr	r3, [r7, #8]
 8003136:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800313a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	68ba      	ldr	r2, [r7, #8]
 8003142:	4313      	orrs	r3, r2
 8003144:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	68ba      	ldr	r2, [r7, #8]
 800314c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2201      	movs	r2, #1
 8003152:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2200      	movs	r2, #0
 800315a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800315e:	2300      	movs	r3, #0
}
 8003160:	4618      	mov	r0, r3
 8003162:	3714      	adds	r7, #20
 8003164:	46bd      	mov	sp, r7
 8003166:	bc80      	pop	{r7}
 8003168:	4770      	bx	lr
 800316a:	bf00      	nop
 800316c:	40012c00 	.word	0x40012c00
 8003170:	40000400 	.word	0x40000400

08003174 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003174:	b480      	push	{r7}
 8003176:	b083      	sub	sp, #12
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800317c:	bf00      	nop
 800317e:	370c      	adds	r7, #12
 8003180:	46bd      	mov	sp, r7
 8003182:	bc80      	pop	{r7}
 8003184:	4770      	bx	lr

08003186 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003186:	b480      	push	{r7}
 8003188:	b083      	sub	sp, #12
 800318a:	af00      	add	r7, sp, #0
 800318c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800318e:	bf00      	nop
 8003190:	370c      	adds	r7, #12
 8003192:	46bd      	mov	sp, r7
 8003194:	bc80      	pop	{r7}
 8003196:	4770      	bx	lr

08003198 <memset>:
 8003198:	4603      	mov	r3, r0
 800319a:	4402      	add	r2, r0
 800319c:	4293      	cmp	r3, r2
 800319e:	d100      	bne.n	80031a2 <memset+0xa>
 80031a0:	4770      	bx	lr
 80031a2:	f803 1b01 	strb.w	r1, [r3], #1
 80031a6:	e7f9      	b.n	800319c <memset+0x4>

080031a8 <__libc_init_array>:
 80031a8:	b570      	push	{r4, r5, r6, lr}
 80031aa:	2600      	movs	r6, #0
 80031ac:	4d0c      	ldr	r5, [pc, #48]	; (80031e0 <__libc_init_array+0x38>)
 80031ae:	4c0d      	ldr	r4, [pc, #52]	; (80031e4 <__libc_init_array+0x3c>)
 80031b0:	1b64      	subs	r4, r4, r5
 80031b2:	10a4      	asrs	r4, r4, #2
 80031b4:	42a6      	cmp	r6, r4
 80031b6:	d109      	bne.n	80031cc <__libc_init_array+0x24>
 80031b8:	f000 f81a 	bl	80031f0 <_init>
 80031bc:	2600      	movs	r6, #0
 80031be:	4d0a      	ldr	r5, [pc, #40]	; (80031e8 <__libc_init_array+0x40>)
 80031c0:	4c0a      	ldr	r4, [pc, #40]	; (80031ec <__libc_init_array+0x44>)
 80031c2:	1b64      	subs	r4, r4, r5
 80031c4:	10a4      	asrs	r4, r4, #2
 80031c6:	42a6      	cmp	r6, r4
 80031c8:	d105      	bne.n	80031d6 <__libc_init_array+0x2e>
 80031ca:	bd70      	pop	{r4, r5, r6, pc}
 80031cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80031d0:	4798      	blx	r3
 80031d2:	3601      	adds	r6, #1
 80031d4:	e7ee      	b.n	80031b4 <__libc_init_array+0xc>
 80031d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80031da:	4798      	blx	r3
 80031dc:	3601      	adds	r6, #1
 80031de:	e7f2      	b.n	80031c6 <__libc_init_array+0x1e>
 80031e0:	0800322c 	.word	0x0800322c
 80031e4:	0800322c 	.word	0x0800322c
 80031e8:	0800322c 	.word	0x0800322c
 80031ec:	08003230 	.word	0x08003230

080031f0 <_init>:
 80031f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031f2:	bf00      	nop
 80031f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80031f6:	bc08      	pop	{r3}
 80031f8:	469e      	mov	lr, r3
 80031fa:	4770      	bx	lr

080031fc <_fini>:
 80031fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031fe:	bf00      	nop
 8003200:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003202:	bc08      	pop	{r3}
 8003204:	469e      	mov	lr, r3
 8003206:	4770      	bx	lr
